// ---------------------------------------------------------------------
/*
This file is auto-generated by behaviac designer, so please don't modify it by yourself!


Usage: include this file in a certain cpp accordingly, only include it once and don't include it in other cpps again.
(RELATIVE_PATH is the path where it is generated):
and you also need to include your agent types' headers before it:

      #include "YourAgentTypes.h"

      #include "RELATIVE_PATH/generated_behaviors.h"
*/

// Export file: ../behaviac_generated/behaviors/generated_behaviors.h
// ---------------------------------------------------------------------

// You should set the include path of the behaviac lib in your project
// for using the following header files :
#pragma once
#include "behaviac/behaviortree/behaviortree.h"
#include "behaviac/agent/agent.h"
#include "behaviac/agent/taskmethod.h"

#include "behaviac/behaviortree/nodes/actions/action.h"
#include "behaviac/behaviortree/nodes/actions/assignment.h"
#include "behaviac/behaviortree/nodes/actions/compute.h"
#include "behaviac/behaviortree/nodes/actions/noop.h"
#include "behaviac/behaviortree/nodes/actions/wait.h"
#include "behaviac/behaviortree/nodes/actions/waitforsignal.h"
#include "behaviac/behaviortree/nodes/actions/waitframes.h"
#include "behaviac/behaviortree/nodes/composites/compositestochastic.h"
#include "behaviac/behaviortree/nodes/composites/ifelse.h"
#include "behaviac/behaviortree/nodes/composites/parallel.h"
#include "behaviac/behaviortree/nodes/composites/query.h"
#include "behaviac/behaviortree/nodes/composites/referencebehavior.h"
#include "behaviac/behaviortree/nodes/composites/selector.h"
#include "behaviac/behaviortree/nodes/composites/selectorloop.h"
#include "behaviac/behaviortree/nodes/composites/selectorprobability.h"
#include "behaviac/behaviortree/nodes/composites/selectorstochastic.h"
#include "behaviac/behaviortree/nodes/composites/sequence.h"
#include "behaviac/behaviortree/nodes/composites/sequencestochastic.h"
#include "behaviac/behaviortree/nodes/composites/withprecondition.h"
#include "behaviac/behaviortree/nodes/conditions/and.h"
#include "behaviac/behaviortree/nodes/conditions/conditionbase.h"
#include "behaviac/behaviortree/nodes/conditions/condition.h"
#include "behaviac/behaviortree/nodes/conditions/false.h"
#include "behaviac/behaviortree/nodes/conditions/or.h"
#include "behaviac/behaviortree/nodes/conditions/true.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoralwaysfailure.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoralwaysrunning.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoralwayssuccess.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorcount.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorcountlimit.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorfailureuntil.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorframes.h"
#include "behaviac/behaviortree/nodes/decorators/decoratoriterator.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorlog.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorloop.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorloopuntil.h"
#include "behaviac/behaviortree/nodes/decorators/decoratornot.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorrepeat.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorsuccessuntil.h"
#include "behaviac/behaviortree/nodes/decorators/decoratortime.h"
#include "behaviac/behaviortree/nodes/decorators/decoratorweight.h"
#include "behaviac/behaviortree/attachments/event.h"
#include "behaviac/behaviortree/attachments/attachaction.h"
#include "behaviac/behaviortree/attachments/precondition.h"
#include "behaviac/behaviortree/attachments/effector.h"
#include "behaviac/htn/task.h"
#include "behaviac/fsm/fsm.h"
#include "behaviac/fsm/state.h"
#include "behaviac/fsm/startcondition.h"
#include "behaviac/fsm/transitioncondition.h"
#include "behaviac/fsm/waitstate.h"
#include "behaviac/fsm/waitframesstate.h"
#include "behaviac/fsm/alwaystransition.h"
#include "behaviac/fsm/waittransition.h"

// You should set the agent header files of your game
// when exporting cpp files in the behaviac editor:

using namespace behaviac;

// Agent property and method handlers

namespace behaviac
{
	struct METHOD_TYPE_behaviac_Agent_VectorAdd { };
	template<>  void Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorAdd>(IList& p0, System::Object& p1)
	{
		this->behaviac::Agent::VectorAdd(p0, p1);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorClear { };
	template<>  void Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorClear>(IList& p0)
	{
		this->behaviac::Agent::VectorClear(p0);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorContains { };
	template<>  bool Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorContains>(IList& p0, System::Object& p1)
	{
		return this->behaviac::Agent::VectorContains(p0, p1);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorLength { };
	template<>  int Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorLength>(IList& p0)
	{
		return this->behaviac::Agent::VectorLength(p0);
	}

	struct METHOD_TYPE_behaviac_Agent_VectorRemove { };
	template<>  void Agent::_Execute_Method_<METHOD_TYPE_behaviac_Agent_VectorRemove>(IList& p0, System::Object& p1)
	{
		this->behaviac::Agent::VectorRemove(p0, p1);
	}

}

struct METHOD_TYPE_HTNAgentHouseBase_ObtainPermit { };
template<>  void HTNAgentHouseBase::_Execute_Method_<METHOD_TYPE_HTNAgentHouseBase_ObtainPermit>()
{
	this->HTNAgentHouseBase::ObtainPermit();
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0 { };
template<>  bool& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_BOOL_0);
	return *(reinterpret_cast<bool*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0 { };
template<>  char& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_CHAR_0);
	return *(reinterpret_cast<char*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0 { };
template<>  TNS::NE::NAT::eColor& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_ECOLOR_0);
	return *(reinterpret_cast<TNS::NE::NAT::eColor*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0 { };
template<>  behaviac::vector<bool>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_LIST_BOOL_0);
	return *(reinterpret_cast<behaviac::vector<bool>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0 { };
template<>  behaviac::vector<char>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_LIST_CHAR_0);
	return *(reinterpret_cast<behaviac::vector<char>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0 { };
template<>  behaviac::vector<TNS::NE::NAT::eColor>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_LIST_ECOLOR_0);
	return *(reinterpret_cast<behaviac::vector<TNS::NE::NAT::eColor>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0 { };
template<>  behaviac::vector<signed char>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgentBase::STV_LIST_SBYTE_0);
	return *(reinterpret_cast<behaviac::vector<signed char>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0 { };
template<>  bool& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_BOOL_0);
	return *(reinterpret_cast<bool*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0 { };
template<>  unsigned char& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_BYTE_0);
	return *(reinterpret_cast<unsigned char*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0 { };
template<>  char& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_CHAR_0);
	return *(reinterpret_cast<char*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0 { };
template<>  TNS::NE::NAT::eColor& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_ECOLOR_0);
	return *(reinterpret_cast<TNS::NE::NAT::eColor*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0 { };
template<>  behaviac::vector<bool>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_LIST_BOOL_0);
	return *(reinterpret_cast<behaviac::vector<bool>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0 { };
template<>  behaviac::vector<unsigned char>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_LIST_BYTE_0);
	return *(reinterpret_cast<behaviac::vector<unsigned char>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0 { };
template<>  behaviac::vector<char>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_LIST_CHAR_0);
	return *(reinterpret_cast<behaviac::vector<char>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0 { };
template<>  behaviac::vector<TNS::NE::NAT::eColor>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_LIST_ECOLOR_0);
	return *(reinterpret_cast<behaviac::vector<TNS::NE::NAT::eColor>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0 { };
template<>  behaviac::vector<signed char>& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_LIST_SBYTE_0);
	return *(reinterpret_cast<behaviac::vector<signed char>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0 { };
template<>  signed char& ParTestAgentBase::_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgentBase, ParTestAgentBase::TV_SBYTE_0);
	return *(reinterpret_cast<signed char*>(pc));
}

struct METHOD_TYPE_ParTestAgentBase_Func_BooleanIR { };
template<>  bool ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR>(bool p0)
{
	return this->ParTestAgentBase::Func_BooleanIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR { };
template<>  behaviac::vector<bool> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR>(behaviac::vector<bool> p0)
{
	return this->ParTestAgentBase::Func_BooleanListIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_ByteIR { };
template<>  unsigned char ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR>(unsigned char p0)
{
	return this->ParTestAgentBase::Func_ByteIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_ByteListIR { };
template<>  behaviac::vector<unsigned char> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR>(behaviac::vector<unsigned char> p0)
{
	return this->ParTestAgentBase::Func_ByteListIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_CharIR { };
template<>  char ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR>(char p0)
{
	return this->ParTestAgentBase::Func_CharIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_CharListIR { };
template<>  behaviac::vector<char> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR>(behaviac::vector<char> p0)
{
	return this->ParTestAgentBase::Func_CharListIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_eColorIR { };
template<>  TNS::NE::NAT::eColor ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR>(TNS::NE::NAT::eColor p0)
{
	return this->ParTestAgentBase::Func_eColorIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_eColorListIR { };
template<>  behaviac::vector<TNS::NE::NAT::eColor> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR>(behaviac::vector<TNS::NE::NAT::eColor> p0)
{
	return this->ParTestAgentBase::Func_eColorListIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_SByteIR { };
template<>  signed char ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR>(signed char p0)
{
	return this->ParTestAgentBase::Func_SByteIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_SByteListIR { };
template<>  behaviac::vector<signed char> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR>(behaviac::vector<signed char> p0)
{
	return this->ParTestAgentBase::Func_SByteListIR(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_ByteSMF { };
template<>  unsigned char ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteSMF>(unsigned char p0)
{
	return this->ParTestAgentBase::Func_ByteSMF(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_CharSMF { };
template<>  char ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharSMF>(char p0)
{
	return this->ParTestAgentBase::Func_CharSMF(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_CharListSMF { };
template<>  behaviac::vector<char> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListSMF>(behaviac::vector<char> p0)
{
	return this->ParTestAgentBase::Func_CharListSMF(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_SByteSMF { };
template<>  signed char ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteSMF>(signed char p0)
{
	return this->ParTestAgentBase::Func_SByteSMF(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_SByteListSMF { };
template<>  behaviac::vector<signed char> ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListSMF>(behaviac::vector<signed char> p0)
{
	return this->ParTestAgentBase::Func_SByteListSMF(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_BooleanRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef>(bool& p0)
{
	this->ParTestAgentBase::Func_BooleanRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef>(behaviac::vector<bool>& p0)
{
	this->ParTestAgentBase::Func_BooleanListRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_ByteRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteRef>(unsigned char& p0)
{
	this->ParTestAgentBase::Func_ByteRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_ByteListRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListRef>(behaviac::vector<unsigned char>& p0)
{
	this->ParTestAgentBase::Func_ByteListRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_CharRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef>(char& p0)
{
	this->ParTestAgentBase::Func_CharRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_CharListRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef>(behaviac::vector<char>& p0)
{
	this->ParTestAgentBase::Func_CharListRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_eColorRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef>(TNS::NE::NAT::eColor& p0)
{
	this->ParTestAgentBase::Func_eColorRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_eColorListRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef>(behaviac::vector<TNS::NE::NAT::eColor>& p0)
{
	this->ParTestAgentBase::Func_eColorListRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_SByteRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteRef>(signed char& p0)
{
	this->ParTestAgentBase::Func_SByteRef(p0);
}

struct METHOD_TYPE_ParTestAgentBase_Func_SByteListRef { };
template<>  void ParTestAgentBase::_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef>(behaviac::vector<signed char>& p0)
{
	this->ParTestAgentBase::Func_SByteListRef(p0);
}

struct PROPERTY_TYPE_ParTestAgent_STV_INT_0 { };
template<>  int& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_INT_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgent::STV_INT_0);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0 { };
template<>  TNS::ST::PER::WRK::kEmployee& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgent::STV_KEMPLOYEE_0);
	return *(reinterpret_cast<TNS::ST::PER::WRK::kEmployee*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0 { };
template<>  behaviac::vector<int>& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgent::STV_LIST_INT_0);
	return *(reinterpret_cast<behaviac::vector<int>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0 { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee>& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestAgent::STV_LIST_KEMPLOYEE_0);
	return *(reinterpret_cast<behaviac::vector<TNS::ST::PER::WRK::kEmployee>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_INT_0 { };
template<>  int& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_INT_0);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0 { };
template<>  TNS::ST::PER::WRK::kEmployee& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_KEMPLOYEE_0);
	return *(reinterpret_cast<TNS::ST::PER::WRK::kEmployee*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0 { };
template<>  behaviac::vector<int>& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_LIST_INT_0);
	return *(reinterpret_cast<behaviac::vector<int>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0 { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee>& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_LIST_KEMPLOYEE_0);
	return *(reinterpret_cast<behaviac::vector<TNS::ST::PER::WRK::kEmployee>*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_LONG_0 { };
template<>  long& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_LONG_0);
	return *(reinterpret_cast<long*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_SHORT_0 { };
template<>  short& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_SHORT_0);
	return *(reinterpret_cast<short*>(pc));
}

struct PROPERTY_TYPE_ParTestAgent_TV_USHORT_0 { };
template<>  unsigned short& ParTestAgent::_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestAgent, ParTestAgent::TV_USHORT_0);
	return *(reinterpret_cast<unsigned short*>(pc));
}

struct METHOD_TYPE_ParTestAgent_Func_IntIR { };
template<>  int ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR>(int p0)
{
	return this->ParTestAgent::Func_IntIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_IntListIR { };
template<>  behaviac::vector<int> ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR>(behaviac::vector<int> p0)
{
	return this->ParTestAgent::Func_IntListIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_kEmployeeIR { };
template<>  TNS::ST::PER::WRK::kEmployee ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR>(TNS::ST::PER::WRK::kEmployee p0)
{
	return this->ParTestAgent::Func_kEmployeeIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee> ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR>(behaviac::vector<TNS::ST::PER::WRK::kEmployee> p0)
{
	return this->ParTestAgent::Func_kEmployeeListIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_LongIR { };
template<>  long ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongIR>(long p0)
{
	return this->ParTestAgent::Func_LongIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_ShortIR { };
template<>  short ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortIR>(short p0)
{
	return this->ParTestAgent::Func_ShortIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_UShortIR { };
template<>  unsigned short ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortIR>(unsigned short p0)
{
	return this->ParTestAgent::Func_UShortIR(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_kEmployeeSMF { };
template<>  TNS::ST::PER::WRK::kEmployee ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeSMF>(TNS::ST::PER::WRK::kEmployee p0)
{
	return this->ParTestAgent::Func_kEmployeeSMF(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_kEmployeeListSMF { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee> ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListSMF>(behaviac::vector<TNS::ST::PER::WRK::kEmployee> p0)
{
	return this->ParTestAgent::Func_kEmployeeListSMF(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_IntRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntRef>(int& p0)
{
	this->ParTestAgent::Func_IntRef(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_IntListRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListRef>(behaviac::vector<int>& p0)
{
	this->ParTestAgent::Func_IntListRef(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_kEmployeeRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeRef>(TNS::ST::PER::WRK::kEmployee& p0)
{
	this->ParTestAgent::Func_kEmployeeRef(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef>(behaviac::vector<TNS::ST::PER::WRK::kEmployee>& p0)
{
	this->ParTestAgent::Func_kEmployeeListRef(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_LongRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongRef>(long& p0)
{
	this->ParTestAgent::Func_LongRef(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_ShortRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortRef>(short& p0)
{
	this->ParTestAgent::Func_ShortRef(p0);
}

struct METHOD_TYPE_ParTestAgent_Func_UShortRef { };
template<>  void ParTestAgent::_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortRef>(unsigned short& p0)
{
	this->ParTestAgent::Func_UShortRef(p0);
}

struct PROPERTY_TYPE_AgentNodeTest_testColor { };
template<>  EnumTest& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::testColor);
	return *(reinterpret_cast<EnumTest*>(pc));
}

struct PROPERTY_TYPE_AgentNodeTest_testVar_0 { };
template<>  int& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::testVar_0);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_AgentNodeTest_testVar_1 { };
template<>  int& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::testVar_1);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_AgentNodeTest_testVar_2 { };
template<>  float& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::testVar_2);
	return *(reinterpret_cast<float*>(pc));
}

struct PROPERTY_TYPE_AgentNodeTest_testVar_3 { };
template<>  float& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_3>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::testVar_3);
	return *(reinterpret_cast<float*>(pc));
}

struct PROPERTY_TYPE_AgentNodeTest_testVar_str_0 { };
template<>  string& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_str_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::testVar_str_0);
	return *(reinterpret_cast<string*>(pc));
}

struct PROPERTY_TYPE_AgentNodeTest_waiting_timeout_interval { };
template<>  int& AgentNodeTest::_Get_Property_<PROPERTY_TYPE_AgentNodeTest_waiting_timeout_interval>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(AgentNodeTest, AgentNodeTest::waiting_timeout_interval);
	return *(reinterpret_cast<int*>(pc));
}

struct METHOD_TYPE_AgentNodeTest_CanSeeEnemy { };
template<>  bool AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy>()
{
	return this->AgentNodeTest::CanSeeEnemy();
}

struct METHOD_TYPE_AgentNodeTest_createExtendedNode { };
template<>  TestNS::Node* AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_createExtendedNode>()
{
	return this->AgentNodeTest::createExtendedNode();
}

struct METHOD_TYPE_AgentNodeTest_createGameObject { };
template<>  UnityEngine::GameObject* AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_createGameObject>()
{
	return this->AgentNodeTest::createGameObject();
}

struct METHOD_TYPE_AgentNodeTest_enter_action_0 { };
template<>  bool AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_0>()
{
	return this->AgentNodeTest::enter_action_0();
}

struct METHOD_TYPE_AgentNodeTest_enter_action_1 { };
template<>  bool AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1>(float p0)
{
	return this->AgentNodeTest::enter_action_1(p0);
}

struct METHOD_TYPE_AgentNodeTest_enter_action_2 { };
template<>  bool AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2>(int p0, string p1)
{
	return this->AgentNodeTest::enter_action_2(p0, p1);
}

struct METHOD_TYPE_AgentNodeTest_exit_action_0 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_0>()
{
	this->AgentNodeTest::exit_action_0();
}

struct METHOD_TYPE_AgentNodeTest_exit_action_1 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1>(float p0)
{
	this->AgentNodeTest::exit_action_1(p0);
}

struct METHOD_TYPE_AgentNodeTest_exit_action_2 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2>(int p0, string p1)
{
	this->AgentNodeTest::exit_action_2(p0, p1);
}

struct METHOD_TYPE_AgentNodeTest_getConstExtendedStruct { };
template<>  const TestNS::Float2& AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstExtendedStruct>()
{
	return this->AgentNodeTest::getConstExtendedStruct();
}

struct METHOD_TYPE_AgentNodeTest_getConstOne { };
template<>  int AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstOne>()
{
	return this->AgentNodeTest::getConstOne();
}

struct METHOD_TYPE_AgentNodeTest_getExtendedStruct { };
template<>  TestNS::Float2& AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_getExtendedStruct>()
{
	return this->AgentNodeTest::getExtendedStruct();
}

struct METHOD_TYPE_AgentNodeTest_initChildAgent { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgent>()
{
	this->AgentNodeTest::initChildAgent();
}

struct METHOD_TYPE_AgentNodeTest_initChildAgentTest { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgentTest>()
{
	this->AgentNodeTest::initChildAgentTest();
}

struct METHOD_TYPE_AgentNodeTest_IsTargetValid { };
template<>  bool AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_IsTargetValid>()
{
	return this->AgentNodeTest::IsTargetValid();
}

struct METHOD_TYPE_AgentNodeTest_Move { };
template<>  behaviac::EBTStatus AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move>()
{
	return this->AgentNodeTest::Move();
}

struct METHOD_TYPE_AgentNodeTest_MoveToTarget { };
template<>  behaviac::EBTStatus AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget>()
{
	return this->AgentNodeTest::MoveToTarget();
}

struct METHOD_TYPE_AgentNodeTest_SelectTarget { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget>()
{
	this->AgentNodeTest::SelectTarget();
}

struct METHOD_TYPE_AgentNodeTest_setEventVarAgent { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarAgent>(AgentNodeTest* p0)
{
	this->AgentNodeTest::setEventVarAgent(p0);
}

struct METHOD_TYPE_AgentNodeTest_setEventVarBool { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool>(bool p0)
{
	this->AgentNodeTest::setEventVarBool(p0);
}

struct METHOD_TYPE_AgentNodeTest_setEventVarFloat { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarFloat>(float p0)
{
	this->AgentNodeTest::setEventVarFloat(p0);
}

struct METHOD_TYPE_AgentNodeTest_setEventVarInt { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt>(int p0)
{
	this->AgentNodeTest::setEventVarInt(p0);
}

struct METHOD_TYPE_AgentNodeTest_setTestVar_0 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0>(int p0)
{
	this->AgentNodeTest::setTestVar_0(p0);
}

struct METHOD_TYPE_AgentNodeTest_setTestVar_0_2 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0_2>(int p0, float p1)
{
	this->AgentNodeTest::setTestVar_0_2(p0, p1);
}

struct METHOD_TYPE_AgentNodeTest_setTestVar_1 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1>(int p0)
{
	this->AgentNodeTest::setTestVar_1(p0);
}

struct METHOD_TYPE_AgentNodeTest_setTestVar_2 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2>(float p0)
{
	this->AgentNodeTest::setTestVar_2(p0);
}

struct METHOD_TYPE_AgentNodeTest_setTestVar_3 { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3>(float p0)
{
	this->AgentNodeTest::setTestVar_3(p0);
}

struct METHOD_TYPE_AgentNodeTest_setTestVar_R { };
template<>  float AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_R>()
{
	return this->AgentNodeTest::setTestVar_R();
}

struct METHOD_TYPE_AgentNodeTest_Stop { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_Stop>()
{
	this->AgentNodeTest::Stop();
}

struct METHOD_TYPE_AgentNodeTest_switchRef { };
template<>  behaviac::EBTStatus AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_switchRef>(string& p0)
{
	return this->AgentNodeTest::switchRef(p0);
}

struct METHOD_TYPE_AgentNodeTest_testExtendedRefType { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedRefType>(TestNS::Node* p0)
{
	this->AgentNodeTest::testExtendedRefType(p0);
}

struct METHOD_TYPE_AgentNodeTest_testExtendedStruct { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedStruct>(TestNS::Float2& p0)
{
	this->AgentNodeTest::testExtendedStruct(p0);
}

struct METHOD_TYPE_AgentNodeTest_testGameObject { };
template<>  void AgentNodeTest::_Execute_Method_<METHOD_TYPE_AgentNodeTest_testGameObject>(UnityEngine::GameObject* p0)
{
	this->AgentNodeTest::testGameObject(p0);
}

struct METHOD_TYPE_ChildNodeTest_GetConstDoubleValue { };
template<>  double ChildNodeTest::_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstDoubleValue>()
{
	return this->ChildNodeTest::GetConstDoubleValue();
}

struct METHOD_TYPE_ChildNodeTest_GetConstFloatValue { };
template<>  float ChildNodeTest::_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstFloatValue>()
{
	return this->ChildNodeTest::GetConstFloatValue();
}

struct PROPERTY_TYPE_CustomPropertyAgent_BoolMemberReadonly { };
template<>  bool& CustomPropertyAgent::_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_BoolMemberReadonly>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(CustomPropertyAgent, CustomPropertyAgent::BoolMemberReadonly);
	return *(reinterpret_cast<bool*>(pc));
}

struct PROPERTY_TYPE_CustomPropertyAgent_FloatPropertyReadonly { };
template<>  float& CustomPropertyAgent::_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_FloatPropertyReadonly>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(CustomPropertyAgent, CustomPropertyAgent::FloatPropertyReadonly);
	return *(reinterpret_cast<float*>(pc));
}

struct PROPERTY_TYPE_CustomPropertyAgent_IntMemberConst { };
template<>  int& CustomPropertyAgent::_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_IntMemberConst>()
{
	unsigned char* pc = (unsigned char*)(&CustomPropertyAgent::IntMemberConst);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_CustomPropertyAgent_IntProperty { };
template<>  int& CustomPropertyAgent::_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_IntProperty>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(CustomPropertyAgent, CustomPropertyAgent::IntProperty);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_CustomPropertyAgent_Location { };
template<>  UnityEngine::Vector3& CustomPropertyAgent::_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_Location>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(CustomPropertyAgent, CustomPropertyAgent::Location);
	return *(reinterpret_cast<UnityEngine::Vector3*>(pc));
}

struct PROPERTY_TYPE_CustomPropertyAgent_StringMemberReadonly { };
template<>  string& CustomPropertyAgent::_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_StringMemberReadonly>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(CustomPropertyAgent, CustomPropertyAgent::StringMemberReadonly);
	return *(reinterpret_cast<string*>(pc));
}

struct METHOD_TYPE_CustomPropertyAgent_FnWithOutParam { };
template<>  void CustomPropertyAgent::_Execute_Method_<METHOD_TYPE_CustomPropertyAgent_FnWithOutParam>(int& p0)
{
	this->CustomPropertyAgent::FnWithOutParam(p0);
}

struct PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0 { };
template<>  behaviac::Agent*& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0>()
{
	unsigned char* pc = (unsigned char*)(&EmployeeParTestAgent::STV_AGENT_0);
	return *(reinterpret_cast<behaviac::Agent**>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0 { };
template<>  float& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0>()
{
	unsigned char* pc = (unsigned char*)(&EmployeeParTestAgent::STV_F_0);
	return *(reinterpret_cast<float*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0 { };
template<>  behaviac::vector<behaviac::Agent*>& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0>()
{
	unsigned char* pc = (unsigned char*)(&EmployeeParTestAgent::STV_LIST_AGENT_0);
	return *(reinterpret_cast<behaviac::vector<behaviac::Agent*>*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0 { };
template<>  behaviac::vector<float>& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0>()
{
	unsigned char* pc = (unsigned char*)(&EmployeeParTestAgent::STV_LIST_F_0);
	return *(reinterpret_cast<behaviac::vector<float>*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0 { };
template<>  behaviac::vector<string>& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0>()
{
	unsigned char* pc = (unsigned char*)(&EmployeeParTestAgent::STV_LIST_STR_0);
	return *(reinterpret_cast<behaviac::vector<string>*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0 { };
template<>  string& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0>()
{
	unsigned char* pc = (unsigned char*)(&EmployeeParTestAgent::STV_STR_0);
	return *(reinterpret_cast<string*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0 { };
template<>  behaviac::Agent*& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_AGENT_0);
	return *(reinterpret_cast<behaviac::Agent**>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_CSZSTR_0 { };
template<>  char*& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_CSZSTR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_CSZSTR_0);
	return *(reinterpret_cast<char**>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0 { };
template<>  double& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_D_0);
	return *(reinterpret_cast<double*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0 { };
template<>  float& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_F_0);
	return *(reinterpret_cast<float*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0 { };
template<>  behaviac::vector<behaviac::Agent*>& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_LIST_AGENT_0);
	return *(reinterpret_cast<behaviac::vector<behaviac::Agent*>*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0 { };
template<>  behaviac::vector<float>& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_LIST_F_0);
	return *(reinterpret_cast<behaviac::vector<float>*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0 { };
template<>  behaviac::vector<string>& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_LIST_STR_0);
	return *(reinterpret_cast<behaviac::vector<string>*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0 { };
template<>  long long& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_LL_0);
	return *(reinterpret_cast<long long*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0 { };
template<>  string& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_STR_0);
	return *(reinterpret_cast<string*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_SZSTR_0 { };
template<>  char*& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_SZSTR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_SZSTR_0);
	return *(reinterpret_cast<char**>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0 { };
template<>  unsigned int& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_UINT_0);
	return *(reinterpret_cast<unsigned int*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0 { };
template<>  unsigned long long& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_ULL_0);
	return *(reinterpret_cast<unsigned long long*>(pc));
}

struct PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0 { };
template<>  unsigned long& EmployeeParTestAgent::_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(EmployeeParTestAgent, EmployeeParTestAgent::TV_ULONG_0);
	return *(reinterpret_cast<unsigned long*>(pc));
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_AgentIR { };
template<>  behaviac::Agent* EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentIR>(behaviac::Agent* p0)
{
	return this->EmployeeParTestAgent::Func_AgentIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR { };
template<>  behaviac::vector<behaviac::Agent*> EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR>(behaviac::vector<behaviac::Agent*> p0)
{
	return this->EmployeeParTestAgent::Func_AgentListIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringIR { };
template<>  const char* EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringIR>(char* p0)
{
	return this->EmployeeParTestAgent::Func_CSzStringIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_DoubleIR { };
template<>  double EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleIR>(double p0)
{
	return this->EmployeeParTestAgent::Func_DoubleIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_LongLongIR { };
template<>  long long EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongIR>(long long p0)
{
	return this->EmployeeParTestAgent::Func_LongLongIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseIR { };
template<>  ParTestAgentBase* EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseIR>(ParTestAgentBase* p0)
{
	return this->EmployeeParTestAgent::Func_ParTestAgentBaseIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseListIR { };
template<>  behaviac::vector<ParTestAgentBase*> EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseListIR>(behaviac::vector<ParTestAgentBase*> p0)
{
	return this->EmployeeParTestAgent::Func_ParTestAgentBaseListIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR { };
template<>  float EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR>(float p0)
{
	return this->EmployeeParTestAgent::Func_SingleIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR { };
template<>  behaviac::vector<float> EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR>(behaviac::vector<float> p0)
{
	return this->EmployeeParTestAgent::Func_SingleListIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_StringIR { };
template<>  string EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR>(string& p0)
{
	return this->EmployeeParTestAgent::Func_StringIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR { };
template<>  behaviac::vector<string> EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR>(behaviac::vector<string> p0)
{
	return this->EmployeeParTestAgent::Func_StringListIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_SzStringIR { };
template<>  char* EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SzStringIR>(char* p0)
{
	return this->EmployeeParTestAgent::Func_SzStringIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_UIntIR { };
template<>  unsigned int EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntIR>(unsigned int p0)
{
	return this->EmployeeParTestAgent::Func_UIntIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ULongIR { };
template<>  unsigned long EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongIR>(unsigned long p0)
{
	return this->EmployeeParTestAgent::Func_ULongIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongIR { };
template<>  unsigned long long EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongIR>(unsigned long long p0)
{
	return this->EmployeeParTestAgent::Func_ULongLongIR(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_AgentListSMF { };
template<>  behaviac::vector<behaviac::Agent*> EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListSMF>(behaviac::vector<behaviac::Agent*> p0)
{
	return this->EmployeeParTestAgent::Func_AgentListSMF(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_AgentSMF { };
template<>  behaviac::Agent* EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentSMF>(behaviac::Agent* p0)
{
	return this->EmployeeParTestAgent::Func_AgentSMF(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_StringListSMF { };
template<>  behaviac::vector<string> EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListSMF>(behaviac::vector<string> p0)
{
	return this->EmployeeParTestAgent::Func_StringListSMF(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_StringSMF { };
template<>  string EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringSMF>(string& p0)
{
	return this->EmployeeParTestAgent::Func_StringSMF(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ULongSMF { };
template<>  unsigned long EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongSMF>(unsigned long p0)
{
	return this->EmployeeParTestAgent::Func_ULongSMF(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_AgentListRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListRef>(behaviac::vector<behaviac::Agent*>& p0)
{
	this->EmployeeParTestAgent::Func_AgentListRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_AgentRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentRef>(behaviac::Agent*& p0)
{
	this->EmployeeParTestAgent::Func_AgentRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringRef>(char* p0)
{
	this->EmployeeParTestAgent::Func_CSzStringRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_DoubleRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleRef>(double& p0)
{
	this->EmployeeParTestAgent::Func_DoubleRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_LongLongRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongRef>(long long& p0)
{
	this->EmployeeParTestAgent::Func_LongLongRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_SingleListRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListRef>(behaviac::vector<float>& p0)
{
	this->EmployeeParTestAgent::Func_SingleListRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_SingleRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleRef>(float& p0)
{
	this->EmployeeParTestAgent::Func_SingleRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_StringListRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListRef>(behaviac::vector<string>& p0)
{
	this->EmployeeParTestAgent::Func_StringListRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_StringRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringRef>(string& p0)
{
	this->EmployeeParTestAgent::Func_StringRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_SzStringRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SzStringRef>(char*& p0)
{
	this->EmployeeParTestAgent::Func_SzStringRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_UIntRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntRef>(unsigned int& p0)
{
	this->EmployeeParTestAgent::Func_UIntRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongRef>(unsigned long long& p0)
{
	this->EmployeeParTestAgent::Func_ULongLongRef(p0);
}

struct METHOD_TYPE_EmployeeParTestAgent_Func_ULongRef { };
template<>  void EmployeeParTestAgent::_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongRef>(unsigned long& p0)
{
	this->EmployeeParTestAgent::Func_ULongRef(p0);
}

struct PROPERTY_TYPE_FSMAgentTest_Message { };
template<>  FSMAgentTest::EMessage& FSMAgentTest::_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(FSMAgentTest, FSMAgentTest::Message);
	return *(reinterpret_cast<FSMAgentTest::EMessage*>(pc));
}

struct METHOD_TYPE_FSMAgentTest_active_update { };
template<>  void FSMAgentTest::_Execute_Method_<METHOD_TYPE_FSMAgentTest_active_update>()
{
	this->FSMAgentTest::active_update();
}

struct METHOD_TYPE_FSMAgentTest_exit_update { };
template<>  void FSMAgentTest::_Execute_Method_<METHOD_TYPE_FSMAgentTest_exit_update>()
{
	this->FSMAgentTest::exit_update();
}

struct METHOD_TYPE_FSMAgentTest_inactive_update { };
template<>  void FSMAgentTest::_Execute_Method_<METHOD_TYPE_FSMAgentTest_inactive_update>()
{
	this->FSMAgentTest::inactive_update();
}

struct METHOD_TYPE_FSMAgentTest_pause_update { };
template<>  void FSMAgentTest::_Execute_Method_<METHOD_TYPE_FSMAgentTest_pause_update>()
{
	this->FSMAgentTest::pause_update();
}

struct METHOD_TYPE_HTNAgentHouse_BuildFoundation { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildFoundation>()
{
	this->HTNAgentHouse::BuildFoundation();
}

struct METHOD_TYPE_HTNAgentHouse_BuildFrame { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildFrame>()
{
	this->HTNAgentHouse::BuildFrame();
}

struct METHOD_TYPE_HTNAgentHouse_BuildInterior { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildInterior>()
{
	this->HTNAgentHouse::BuildInterior();
}

struct METHOD_TYPE_HTNAgentHouse_BuildRoof { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildRoof>()
{
	this->HTNAgentHouse::BuildRoof();
}

struct METHOD_TYPE_HTNAgentHouse_BuildWalls { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildWalls>()
{
	this->HTNAgentHouse::BuildWalls();
}

struct METHOD_TYPE_HTNAgentHouse_BuyLand { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuyLand>()
{
	this->HTNAgentHouse::BuyLand();
}

struct METHOD_TYPE_HTNAgentHouse_CutLogs { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_CutLogs>()
{
	this->HTNAgentHouse::CutLogs();
}

struct METHOD_TYPE_HTNAgentHouse_GetFriend { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_GetFriend>()
{
	this->HTNAgentHouse::GetFriend();
}

struct METHOD_TYPE_HTNAgentHouse_GetLoan { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_GetLoan>()
{
	this->HTNAgentHouse::GetLoan();
}

struct METHOD_TYPE_HTNAgentHouse_HireBuilder { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_HireBuilder>()
{
	this->HTNAgentHouse::HireBuilder();
}

struct METHOD_TYPE_HTNAgentHouse_PayBuilder { };
template<>  void HTNAgentHouse::_Execute_Method_<METHOD_TYPE_HTNAgentHouse_PayBuilder>()
{
	this->HTNAgentHouse::PayBuilder();
}

struct METHOD_TYPE_HTNAgentTravel_exist_airport { };
template<>  bool HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_airport>(int p0, int& p1)
{
	return this->HTNAgentTravel::exist_airport(p0, p1);
}

struct METHOD_TYPE_HTNAgentTravel_exist_airports { };
template<>  bool HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_airports>(int p0, behaviac::vector<int>& p1)
{
	return this->HTNAgentTravel::exist_airports(p0, p1);
}

struct METHOD_TYPE_HTNAgentTravel_exist_finish { };
template<>  bool HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_finish>(int& p0)
{
	return this->HTNAgentTravel::exist_finish(p0);
}

struct METHOD_TYPE_HTNAgentTravel_exist_start { };
template<>  bool HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_start>(int& p0)
{
	return this->HTNAgentTravel::exist_start(p0);
}

struct METHOD_TYPE_HTNAgentTravel_fly { };
template<>  void HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_fly>(int p0, int p1)
{
	this->HTNAgentTravel::fly(p0, p1);
}

struct METHOD_TYPE_HTNAgentTravel_long_distance { };
template<>  bool HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_long_distance>(int p0, int p1)
{
	return this->HTNAgentTravel::long_distance(p0, p1);
}

struct METHOD_TYPE_HTNAgentTravel_ride_taxi { };
template<>  void HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_ride_taxi>(int p0, int p1)
{
	this->HTNAgentTravel::ride_taxi(p0, p1);
}

struct METHOD_TYPE_HTNAgentTravel_short_distance { };
template<>  bool HTNAgentTravel::_Execute_Method_<METHOD_TYPE_HTNAgentTravel_short_distance>(int p0, int p1)
{
	return this->HTNAgentTravel::short_distance(p0, p1);
}

struct PROPERTY_TYPE_ParTestRegNameAgent_STV_KEMPLOYEE_0 { };
template<>  TNS::ST::PER::WRK::kEmployee& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestRegNameAgent::STV_KEMPLOYEE_0);
	return *(reinterpret_cast<TNS::ST::PER::WRK::kEmployee*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0 { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee>& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestRegNameAgent::STV_LIST_KEMPLOYEE_0);
	return *(reinterpret_cast<behaviac::vector<TNS::ST::PER::WRK::kEmployee>*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0 { };
template<>  behaviac::vector<signed char>& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0>()
{
	unsigned char* pc = (unsigned char*)(&ParTestRegNameAgent::STV_LIST_SBYTE_0);
	return *(reinterpret_cast<behaviac::vector<signed char>*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_AGENT_0 { };
template<>  behaviac::Agent*& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_AGENT_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_AGENT_0);
	return *(reinterpret_cast<behaviac::Agent**>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_BYTE_0 { };
template<>  unsigned char& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_BYTE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_BYTE_0);
	return *(reinterpret_cast<unsigned char*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_CHAR_0 { };
template<>  char& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_CHAR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_CHAR_0);
	return *(reinterpret_cast<char*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_KEMPLOYEE_0 { };
template<>  TNS::ST::PER::WRK::kEmployee& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_KEMPLOYEE_0);
	return *(reinterpret_cast<TNS::ST::PER::WRK::kEmployee*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0 { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee>& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_LIST_KEMPLOYEE_0);
	return *(reinterpret_cast<behaviac::vector<TNS::ST::PER::WRK::kEmployee>*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_SBYTE_0 { };
template<>  signed char& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_SBYTE_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_SBYTE_0);
	return *(reinterpret_cast<signed char*>(pc));
}

struct PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0 { };
template<>  string& ParTestRegNameAgent::_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(ParTestRegNameAgent, ParTestRegNameAgent::TV_STR_0);
	return *(reinterpret_cast<string*>(pc));
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_AgentIR { };
template<>  behaviac::Agent* ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_AgentIR>(behaviac::Agent* p0)
{
	return this->ParTestRegNameAgent::Func_AgentIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_ByteIR { };
template<>  unsigned char ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_ByteIR>(unsigned char p0)
{
	return this->ParTestRegNameAgent::Func_ByteIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_CharIR { };
template<>  char ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_CharIR>(char p0)
{
	return this->ParTestRegNameAgent::Func_CharIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeIR { };
template<>  TNS::ST::PER::WRK::kEmployee ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeIR>(TNS::ST::PER::WRK::kEmployee p0)
{
	return this->ParTestRegNameAgent::Func_kEmployeeIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeListIR { };
template<>  behaviac::vector<TNS::ST::PER::WRK::kEmployee> ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeListIR>(behaviac::vector<TNS::ST::PER::WRK::kEmployee> p0)
{
	return this->ParTestRegNameAgent::Func_kEmployeeListIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_SByteIR { };
template<>  signed char ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_SByteIR>(signed char p0)
{
	return this->ParTestRegNameAgent::Func_SByteIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_SByteListIR { };
template<>  behaviac::vector<signed char> ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_SByteListIR>(behaviac::vector<signed char> p0)
{
	return this->ParTestRegNameAgent::Func_SByteListIR(p0);
}

struct METHOD_TYPE_ParTestRegNameAgent_Func_StringIR { };
template<>  string ParTestRegNameAgent::_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_StringIR>(string p0)
{
	return this->ParTestRegNameAgent::Func_StringIR(p0);
}

struct PROPERTY_TYPE_PreconEffectorAgent_count_both { };
template<>  int& PreconEffectorAgent::_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(PreconEffectorAgent, PreconEffectorAgent::count_both);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_PreconEffectorAgent_count_failure { };
template<>  int& PreconEffectorAgent::_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(PreconEffectorAgent, PreconEffectorAgent::count_failure);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_PreconEffectorAgent_count_success { };
template<>  int& PreconEffectorAgent::_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(PreconEffectorAgent, PreconEffectorAgent::count_success);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_PreconEffectorAgent_ret { };
template<>  int& PreconEffectorAgent::_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_ret>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(PreconEffectorAgent, PreconEffectorAgent::ret);
	return *(reinterpret_cast<int*>(pc));
}

struct METHOD_TYPE_PreconEffectorAgent_action { };
template<>  void PreconEffectorAgent::_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_action>()
{
	this->PreconEffectorAgent::action();
}

struct METHOD_TYPE_PreconEffectorAgent_fn_return { };
template<>  int PreconEffectorAgent::_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_fn_return>()
{
	return this->PreconEffectorAgent::fn_return();
}

struct PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonly { };
template<>  int& PropertyReadonlyAgent::_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonly>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(PropertyReadonlyAgent, PropertyReadonlyAgent::MemberReadonly);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonlyAs { };
template<>  int& PropertyReadonlyAgent::_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonlyAs>()
{
	unsigned char* pc = (unsigned char*)this;
	pc += (int)BEHAVIAC_OFFSETOF(PropertyReadonlyAgent, PropertyReadonlyAgent::MemberReadonlyAs);
	return *(reinterpret_cast<int*>(pc));
}

struct PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterOnly { };
template<>  int& PropertyReadonlyAgent::_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterOnly>()
{
	return *(int*)&this->GetVariable<int>("PropertyGetterOnly");
}

struct PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterSetter { };
template<>  int& PropertyReadonlyAgent::_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterSetter>()
{
	return *(int*)&this->GetVariable<int>("PropertyGetterSetter");
}

struct PROPERTY_TYPE_PropertyReadonlyAgent_StaticPropertyGetterSetter { };
template<>  float& PropertyReadonlyAgent::_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_StaticPropertyGetterSetter>()
{
	return *(float*)&this->GetVariable<float>("StaticPropertyGetterSetter");
}

struct METHOD_TYPE_PropertyReadonlyAgent_FnWithOutParam { };
template<>  void PropertyReadonlyAgent::_Execute_Method_<METHOD_TYPE_PropertyReadonlyAgent_FnWithOutParam>(int& p0)
{
	this->PropertyReadonlyAgent::FnWithOutParam(p0);
}

struct METHOD_TYPE_PropertyReadonlyAgent_PassInProperty { };
template<>  void PropertyReadonlyAgent::_Execute_Method_<METHOD_TYPE_PropertyReadonlyAgent_PassInProperty>(int p0)
{
	this->PropertyReadonlyAgent::PassInProperty(p0);
}

struct PROPERTY_TYPE_StaticAgent_sInt { };
template<>  int& StaticAgent::_Get_Property_<PROPERTY_TYPE_StaticAgent_sInt>()
{
	unsigned char* pc = (unsigned char*)(&StaticAgent::sInt);
	return *(reinterpret_cast<int*>(pc));
}

struct METHOD_TYPE_StaticAgent_sAction { };
template<>  void StaticAgent::_Execute_Method_<METHOD_TYPE_StaticAgent_sAction>()
{
	this->StaticAgent::sAction();
}

namespace TestNS
{
	struct PROPERTY_TYPE_TestNS_AgentArrayAccessTest_Int { };
	template<>  int& AgentArrayAccessTest::_Get_Property_<PROPERTY_TYPE_TestNS_AgentArrayAccessTest_Int>()
	{
		unsigned char* pc = (unsigned char*)this;
		pc += (int)BEHAVIAC_OFFSETOF(TestNS::AgentArrayAccessTest, TestNS::AgentArrayAccessTest::Int);
		return *(reinterpret_cast<int*>(pc));
	}

	struct PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts { };
	template<>  behaviac::vector<int>& AgentArrayAccessTest::_Get_Property_<PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts>()
	{
		unsigned char* pc = (unsigned char*)this;
		pc += (int)BEHAVIAC_OFFSETOF(TestNS::AgentArrayAccessTest, TestNS::AgentArrayAccessTest::ListInts);
		return *(reinterpret_cast<behaviac::vector<int>*>(pc));
	}

}

namespace behaviac
{
	// Source file: node_test/fsm/action_ut_1_2

	class DecoratorLoop_bt_node_test_fsm_action_ut_1_2_node8 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_fsm_action_ut_1_2_node8, DecoratorLoop);
		DecoratorLoop_bt_node_test_fsm_action_ut_1_2_node8()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Compute_bt_node_test_fsm_action_ut_1_2_node3 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_fsm_action_ut_1_2_node3, Compute);
		Compute_bt_node_test_fsm_action_ut_1_2_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr1 = 0.5f;
			float opr2 = 1.3f;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			pAgent->SetVariable("par_float_type_0", (float)(opr1 + opr2), 569873069u);
			return result;
		}
	};

	class Action_bt_node_test_fsm_action_ut_1_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_fsm_action_ut_1_2_node2, Action);
		Action_bt_node_test_fsm_action_ut_1_2_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(569873069u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_fsm_action_ut_1_2_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_fsm_action_ut_1_2_node1, Assignment);
		Assignment_bt_node_test_fsm_action_ut_1_2_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_1") == 955032556u);
			pAgent->SetVariable("par_float_type_1", opr, 955032556u);
			return result;
		}
	};

	class Compute_bt_node_test_fsm_action_ut_1_2_node4 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_fsm_action_ut_1_2_node4, Compute);
		Compute_bt_node_test_fsm_action_ut_1_2_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_1") == 955032556u);
			float& opr1 = (float&)pAgent->GetVariable<float >(955032556u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_2") == 331477039u);
			float& opr2 = (float&)pAgent->GetVariable<float >(331477039u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			pAgent->SetVariable("par_float_type_0", (float)(opr1 + opr2), 569873069u);
			return result;
		}
	};

	class Action_bt_node_test_fsm_action_ut_1_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_fsm_action_ut_1_2_node5, Action);
		Action_bt_node_test_fsm_action_ut_1_2_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(569873069u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_fsm_action_ut_1_2_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_fsm_action_ut_1_2_node7, Assignment);
		Assignment_bt_node_test_fsm_action_ut_1_2_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			UnityEngine::GameObject* opr = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createGameObject, UnityEngine::GameObject* >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_go") == 464621558u);
			pAgent->SetVariable("par_go", opr, 464621558u);
			return result;
		}
	};

	class Action_bt_node_test_fsm_action_ut_1_2_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_fsm_action_ut_1_2_node6, Action);
		Action_bt_node_test_fsm_action_ut_1_2_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_go") == 464621558u);
			UnityEngine::GameObject*& method_p0 = (UnityEngine::GameObject*&)pAgent->GetVariable<UnityEngine::GameObject* >(464621558u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testGameObject, void, UnityEngine::GameObject* >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_fsm_action_ut_1_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/fsm/action_ut_1_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "UnityEngine::GameObject", "par_go", "null");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_0", "0");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_1", "0");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_2", "2.7");
			// children
			{
				DecoratorLoop_bt_node_test_fsm_action_ut_1_2_node8* node8 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_fsm_action_ut_1_2_node8;
				node8->SetClassNameString("DecoratorLoop");
				node8->SetId(8);
#if !BEHAVIAC_RELEASE
				node8->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node8);
				{
					Sequence* node0 = BEHAVIAC_NEW Sequence;
					node0->SetClassNameString("Sequence");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node8->AddChild(node0);
					{
						Compute_bt_node_test_fsm_action_ut_1_2_node3* node3 = BEHAVIAC_NEW Compute_bt_node_test_fsm_action_ut_1_2_node3;
						node3->SetClassNameString("Compute");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_fsm_action_ut_1_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_fsm_action_ut_1_2_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_node_test_fsm_action_ut_1_2_node1* node1 = BEHAVIAC_NEW Assignment_bt_node_test_fsm_action_ut_1_2_node1;
						node1->SetClassNameString("Assignment");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						Compute_bt_node_test_fsm_action_ut_1_2_node4* node4 = BEHAVIAC_NEW Compute_bt_node_test_fsm_action_ut_1_2_node4;
						node4->SetClassNameString("Compute");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_fsm_action_ut_1_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_fsm_action_ut_1_2_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node5);
						node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
					}
					{
						Assignment_bt_node_test_fsm_action_ut_1_2_node7* node7 = BEHAVIAC_NEW Assignment_bt_node_test_fsm_action_ut_1_2_node7;
						node7->SetClassNameString("Assignment");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node7);
						node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
					}
					{
						Action_bt_node_test_fsm_action_ut_1_2_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_fsm_action_ut_1_2_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node6);
						node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
					}
					node8->SetHasEvents(node8->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node8->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/fsm/bt_ref_fsm

	class Assignment_bt_node_test_fsm_bt_ref_fsm_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_fsm_bt_ref_fsm_node2, Assignment);
		Assignment_bt_node_test_fsm_bt_ref_fsm_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = -1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			pAgent->SetVariable("FoodCount", opr, 3299892854u);
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_fsm_bt_ref_fsm_node1 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_fsm_bt_ref_fsm_node1, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_fsm_bt_ref_fsm_node1()
		{
			m_referencedBehaviorPath = "node_test/fsm/fsm_ut_0";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
		}
	protected:
	};

	class bt_node_test_fsm_bt_ref_fsm
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/fsm/bt_ref_fsm");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("FSMAgentTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("FSMAgentTest");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_node_test_fsm_bt_ref_fsm_node2* node2 = BEHAVIAC_NEW Assignment_bt_node_test_fsm_bt_ref_fsm_node2;
					node2->SetClassNameString("Assignment");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("FSMAgentTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					ReferencedBehavior_bt_node_test_fsm_bt_ref_fsm_node1* node1 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_fsm_bt_ref_fsm_node1;
					node1->SetClassNameString("ReferencedBehavior");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("FSMAgentTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/fsm/fsm_ref_bt_ut

	class State_bt_node_test_fsm_fsm_ref_bt_ut_node1 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ref_bt_ut_node1, State);
		State_bt_node_test_fsm_fsm_ref_bt_ut_node1()
		{
			this->m_bIsEndState = false;
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach4 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach4, Transition);
		Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach4()
		{
			this->SetTargetStateId(6);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ref_bt_ut_node3 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ref_bt_ut_node3, State);
		State_bt_node_test_fsm_fsm_ref_bt_ut_node3()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach2, Precondition);
		Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach2()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 4;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_fsm_fsm_ref_bt_ut_node6 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_fsm_fsm_ref_bt_ut_node6, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_fsm_fsm_ref_bt_ut_node6()
		{
			m_referencedBehaviorPath = "node_test/fsm/action_ut_1_2";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
		}
	protected:
	};

	class Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach5 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach5, Precondition);
		Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach5()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach9 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach9, Transition);
		Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach9()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 3;
			bool op = Details::GreaterEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_node_test_fsm_fsm_ref_bt_ut
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/fsm/fsm_ref_bt_ut");
			pBT->SetIsFSM(true);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// attachments
			// children
			{
				FSM* fsm = BEHAVIAC_NEW FSM();
				fsm->SetClassNameString("FSM");
				fsm->SetId((uint16_t)-1);
				fsm->SetInitialId(1);
#if !BEHAVIAC_RELEASE
				fsm->SetAgentType("AgentNodeTest");
#endif
				{
					State_bt_node_test_fsm_fsm_ref_bt_ut_node1* node1 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ref_bt_ut_node1;
					node1->SetClassNameString("State");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach4* attach4 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach4;
						attach4->SetClassNameString("Transition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach4, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					fsm->AddChild(node1);
					fsm->SetHasEvents(fsm->HasEvents() | node1->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ref_bt_ut_node3* node3 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ref_bt_ut_node3;
					node3->SetClassNameString("State");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach2;
						attach2->SetClassNameString("Precondition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("AgentNodeTest");
#endif
						node3->Attach(attach2, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					fsm->AddChild(node3);
					fsm->SetHasEvents(fsm->HasEvents() | node3->HasEvents());
				}
				{
					ReferencedBehavior_bt_node_test_fsm_fsm_ref_bt_ut_node6* node6 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_fsm_fsm_ref_bt_ut_node6;
					node6->SetClassNameString("ReferencedBehavior");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach5* attach5 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ref_bt_ut_attach5;
						attach5->SetClassNameString("Precondition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("AgentNodeTest");
#endif
						node6->Attach(attach5, true, false, false);
						node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach9* attach9 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_bt_ut_attach9;
						attach9->SetClassNameString("Transition");
						attach9->SetId(9);
#if !BEHAVIAC_RELEASE
						attach9->SetAgentType("AgentNodeTest");
#endif
						node6->Attach(attach9, false, false, true);
						node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach9) != 0));
					}
					fsm->AddChild(node6);
					fsm->SetHasEvents(fsm->HasEvents() | node6->HasEvents());
				}
				pBT->AddChild(fsm);
			}
			return true;
		}
	};

	// Source file: node_test/fsm/fsm_ref_fsm_ut

	class State_bt_node_test_fsm_fsm_ref_fsm_ut_node3 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ref_fsm_ut_node3, State);
		State_bt_node_test_fsm_fsm_ref_fsm_ut_node3()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_inactive_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach10 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach10, Precondition);
		Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach10()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("InactiveCount") == 1246269412u);
			pAgent->SetVariable("InactiveCount", opr2, 1246269412u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach5 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach5, Transition);
		Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach5()
		{
			this->SetTargetStateId(18);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Begin;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach14 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach14, Effector);
		Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach14()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("InactiveCount") == 1246269412u);
			int& opr1 = (int&)pAgent->GetVariable<int >(1246269412u);
			int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("InactiveCount") == 1246269412u);
			pAgent->SetVariable("InactiveCount", (int)(opr1 + opr2), 1246269412u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach6 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach6, Transition);
		Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach6()
		{
			this->SetTargetStateId(2);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Exit;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ref_fsm_ut_node2 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ref_fsm_ut_node2, State);
		State_bt_node_test_fsm_fsm_ref_fsm_ut_node2()
		{
			this->m_bIsEndState = true;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach12 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach12, Precondition);
		Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach12()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			long opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ExitCount") == 1184325508u);
			pAgent->SetVariable("ExitCount", opr2, 1184325508u);
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach15 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach15, Effector);
		Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach15()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ExitCount") == 1184325508u);
			long& opr1 = (long&)pAgent->GetVariable<long >(1184325508u);
			long opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ExitCount") == 1184325508u);
			pAgent->SetVariable("ExitCount", (long)(opr1 + opr2), 1184325508u);
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ref_fsm_ut_node4 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ref_fsm_ut_node4, State);
		State_bt_node_test_fsm_fsm_ref_fsm_ut_node4()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_pause_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach13 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach13, Precondition);
		Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach13()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			short opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("PauseCount") == 3020354788u);
			pAgent->SetVariable("PauseCount", opr2, 3020354788u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach8 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach8, Transition);
		Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach8()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::End;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach9 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach9, Transition);
		Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach9()
		{
			this->SetTargetStateId(1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Resume;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach16 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach16, Effector);
		Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach16()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("PauseCount") == 3020354788u);
			short& opr1 = (short&)pAgent->GetVariable<short >(3020354788u);
			short opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("PauseCount") == 3020354788u);
			pAgent->SetVariable("PauseCount", (short)(opr1 + opr2), 3020354788u);
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_fsm_fsm_ref_fsm_ut_node18 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_fsm_fsm_ref_fsm_ut_node18, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_fsm_fsm_ref_fsm_ut_node18()
		{
			m_referencedBehaviorPath = "node_test/fsm/fsm_ut_0";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
		}
	protected:
	};

	class Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach11 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach11, Precondition);
		Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach11()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			unsigned int opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ActiveCount") == 177115358u);
			pAgent->SetVariable("ActiveCount", opr2, 177115358u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach7 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach7, Transition);
		Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach7()
		{
			this->SetTargetStateId(4);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Pause;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach17 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach17, Effector);
		Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach17()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ActiveCount") == 177115358u);
			unsigned int& opr1 = (unsigned int&)pAgent->GetVariable<unsigned int >(177115358u);
			unsigned int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ActiveCount") == 177115358u);
			pAgent->SetVariable("ActiveCount", (unsigned int)(opr1 + opr2), 177115358u);
			return result;
		}
	};

	class bt_node_test_fsm_fsm_ref_fsm_ut
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/fsm/fsm_ref_fsm_ut");
			pBT->SetIsFSM(true);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("FSMAgentTest");
#endif
			// attachments
			// children
			{
				FSM* fsm = BEHAVIAC_NEW FSM();
				fsm->SetClassNameString("FSM");
				fsm->SetId((uint16_t)-1);
				fsm->SetInitialId(3);
#if !BEHAVIAC_RELEASE
				fsm->SetAgentType("FSMAgentTest");
#endif
				{
					State_bt_node_test_fsm_fsm_ref_fsm_ut_node3* node3 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ref_fsm_ut_node3;
					node3->SetClassNameString("State");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach10* attach10 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach10;
						attach10->SetClassNameString("Precondition");
						attach10->SetId(10);
#if !BEHAVIAC_RELEASE
						attach10->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach10, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach10) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach5* attach5 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach5;
						attach5->SetClassNameString("Transition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach5, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach14* attach14 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach14;
						attach14->SetClassNameString("Effector");
						attach14->SetId(14);
#if !BEHAVIAC_RELEASE
						attach14->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach14, false, true, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach14) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach6* attach6 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach6;
						attach6->SetClassNameString("Transition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach6, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					fsm->AddChild(node3);
					fsm->SetHasEvents(fsm->HasEvents() | node3->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ref_fsm_ut_node2* node2 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ref_fsm_ut_node2;
					node2->SetClassNameString("State");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach12* attach12 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach12;
						attach12->SetClassNameString("Precondition");
						attach12->SetId(12);
#if !BEHAVIAC_RELEASE
						attach12->SetAgentType("FSMAgentTest");
#endif
						node2->Attach(attach12, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach12) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach15* attach15 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach15;
						attach15->SetClassNameString("Effector");
						attach15->SetId(15);
#if !BEHAVIAC_RELEASE
						attach15->SetAgentType("FSMAgentTest");
#endif
						node2->Attach(attach15, false, true, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach15) != 0));
					}
					fsm->AddChild(node2);
					fsm->SetHasEvents(fsm->HasEvents() | node2->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ref_fsm_ut_node4* node4 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ref_fsm_ut_node4;
					node4->SetClassNameString("State");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach13* attach13 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach13;
						attach13->SetClassNameString("Precondition");
						attach13->SetId(13);
#if !BEHAVIAC_RELEASE
						attach13->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach13, true, false, false);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach13) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach8* attach8 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach8;
						attach8->SetClassNameString("Transition");
						attach8->SetId(8);
#if !BEHAVIAC_RELEASE
						attach8->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach8, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach8) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach9* attach9 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach9;
						attach9->SetClassNameString("Transition");
						attach9->SetId(9);
#if !BEHAVIAC_RELEASE
						attach9->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach9, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach9) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach16* attach16 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach16;
						attach16->SetClassNameString("Effector");
						attach16->SetId(16);
#if !BEHAVIAC_RELEASE
						attach16->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach16, false, true, false);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach16) != 0));
					}
					fsm->AddChild(node4);
					fsm->SetHasEvents(fsm->HasEvents() | node4->HasEvents());
				}
				{
					ReferencedBehavior_bt_node_test_fsm_fsm_ref_fsm_ut_node18* node18 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_fsm_fsm_ref_fsm_ut_node18;
					node18->SetClassNameString("ReferencedBehavior");
					node18->SetId(18);
#if !BEHAVIAC_RELEASE
					node18->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach11* attach11 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ref_fsm_ut_attach11;
						attach11->SetClassNameString("Precondition");
						attach11->SetId(11);
#if !BEHAVIAC_RELEASE
						attach11->SetAgentType("FSMAgentTest");
#endif
						node18->Attach(attach11, true, false, false);
						node18->SetHasEvents(node18->HasEvents() | (Event::DynamicCast(attach11) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach7* attach7 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ref_fsm_ut_attach7;
						attach7->SetClassNameString("Transition");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("FSMAgentTest");
#endif
						node18->Attach(attach7, false, false, true);
						node18->SetHasEvents(node18->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach17* attach17 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ref_fsm_ut_attach17;
						attach17->SetClassNameString("Effector");
						attach17->SetId(17);
#if !BEHAVIAC_RELEASE
						attach17->SetAgentType("FSMAgentTest");
#endif
						node18->Attach(attach17, false, true, false);
						node18->SetHasEvents(node18->HasEvents() | (Event::DynamicCast(attach17) != 0));
					}
					fsm->AddChild(node18);
					fsm->SetHasEvents(fsm->HasEvents() | node18->HasEvents());
				}
				pBT->AddChild(fsm);
			}
			return true;
		}
	};

	// Source file: node_test/fsm/fsm_ut_0

	class State_bt_node_test_fsm_fsm_ut_0_node3 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_0_node3, State);
		State_bt_node_test_fsm_fsm_ut_0_node3()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_inactive_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_0_attach10 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_0_attach10, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_0_attach10()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			pAgent->SetVariable("FoodCount", opr2, 3299892854u);
			return result;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_0_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_0_attach2, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_0_attach2()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			int& opr1 = (int&)pAgent->GetVariable<int >(3299892854u);
			int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			pAgent->SetVariable("FoodCount", (int)(opr1 + opr2), 3299892854u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_0_attach5 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_0_attach5, Transition);
		Transition_bt_node_test_fsm_fsm_ut_0_attach5()
		{
			this->SetTargetStateId(1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			int& opl = (int&)pAgent->GetVariable<int >(3299892854u);
			int opr2 = 10;
			bool op = Details::GreaterEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ut_0_node1 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_0_node1, State);
		State_bt_node_test_fsm_fsm_ut_0_node1()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_active_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_0_attach6 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_0_attach6, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_0_attach6()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			int& opr1 = (int&)pAgent->GetVariable<int >(3299892854u);
			int opr2 = 2;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			pAgent->SetVariable("FoodCount", (int)(opr1 - opr2), 3299892854u);
			return result;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_0_attach11 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_0_attach11, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_0_attach11()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("EnergyCount") == 881465299u);
			int& opr1 = (int&)pAgent->GetVariable<int >(881465299u);
			int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("EnergyCount") == 881465299u);
			pAgent->SetVariable("EnergyCount", (int)(opr1 + opr2), 881465299u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_0_attach7 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_0_attach7, Transition);
		Transition_bt_node_test_fsm_fsm_ut_0_attach7()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			int& opl = (int&)pAgent->GetVariable<int >(3299892854u);
			int opr2 = 0;
			bool op = Details::LessEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_0_attach12 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_0_attach12, Transition);
		Transition_bt_node_test_fsm_fsm_ut_0_attach12()
		{
			this->SetTargetStateId(4);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("EnergyCount") == 881465299u);
			int& opl = (int&)pAgent->GetVariable<int >(881465299u);
			int opr2 = 5;
			bool op = Details::GreaterEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ut_0_node4 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_0_node4, State);
		State_bt_node_test_fsm_fsm_ut_0_node4()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_pause_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_0_attach9 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_0_attach9, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_0_attach9()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			int& opr1 = (int&)pAgent->GetVariable<int >(3299892854u);
			int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			pAgent->SetVariable("FoodCount", (int)(opr1 - opr2), 3299892854u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_0_attach8 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_0_attach8, Transition);
		Transition_bt_node_test_fsm_fsm_ut_0_attach8()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("FoodCount") == 3299892854u);
			int& opl = (int&)pAgent->GetVariable<int >(3299892854u);
			int opr2 = 0;
			bool op = Details::LessEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_node_test_fsm_fsm_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/fsm/fsm_ut_0");
			pBT->SetIsFSM(true);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("FSMAgentTest");
#endif
			// attachments
			// children
			{
				FSM* fsm = BEHAVIAC_NEW FSM();
				fsm->SetClassNameString("FSM");
				fsm->SetId((uint16_t)-1);
				fsm->SetInitialId(3);
#if !BEHAVIAC_RELEASE
				fsm->SetAgentType("FSMAgentTest");
#endif
				{
					State_bt_node_test_fsm_fsm_ut_0_node3* node3 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_0_node3;
					node3->SetClassNameString("State");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_0_attach10* attach10 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_0_attach10;
						attach10->SetClassNameString("Precondition");
						attach10->SetId(10);
#if !BEHAVIAC_RELEASE
						attach10->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach10, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach10) != 0));
					}
					{
						Precondition_bt_node_test_fsm_fsm_ut_0_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_0_attach2;
						attach2->SetClassNameString("Precondition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach2, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_0_attach5* attach5 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_0_attach5;
						attach5->SetClassNameString("Transition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach5, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					fsm->AddChild(node3);
					fsm->SetHasEvents(fsm->HasEvents() | node3->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ut_0_node1* node1 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_0_node1;
					node1->SetClassNameString("State");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_0_attach6* attach6 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_0_attach6;
						attach6->SetClassNameString("Precondition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach6, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					{
						Precondition_bt_node_test_fsm_fsm_ut_0_attach11* attach11 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_0_attach11;
						attach11->SetClassNameString("Precondition");
						attach11->SetId(11);
#if !BEHAVIAC_RELEASE
						attach11->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach11, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach11) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_0_attach7* attach7 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_0_attach7;
						attach7->SetClassNameString("Transition");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach7, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_0_attach12* attach12 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_0_attach12;
						attach12->SetClassNameString("Transition");
						attach12->SetId(12);
#if !BEHAVIAC_RELEASE
						attach12->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach12, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach12) != 0));
					}
					fsm->AddChild(node1);
					fsm->SetHasEvents(fsm->HasEvents() | node1->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ut_0_node4* node4 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_0_node4;
					node4->SetClassNameString("State");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_0_attach9* attach9 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_0_attach9;
						attach9->SetClassNameString("Precondition");
						attach9->SetId(9);
#if !BEHAVIAC_RELEASE
						attach9->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach9, true, false, false);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach9) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_0_attach8* attach8 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_0_attach8;
						attach8->SetClassNameString("Transition");
						attach8->SetId(8);
#if !BEHAVIAC_RELEASE
						attach8->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach8, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach8) != 0));
					}
					fsm->AddChild(node4);
					fsm->SetHasEvents(fsm->HasEvents() | node4->HasEvents());
				}
				pBT->AddChild(fsm);
			}
			return true;
		}
	};

	// Source file: node_test/fsm/fsm_ut_1

	class State_bt_node_test_fsm_fsm_ut_1_node3 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_1_node3, State);
		State_bt_node_test_fsm_fsm_ut_1_node3()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_inactive_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_1_attach10 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_1_attach10, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_1_attach10()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("InactiveCount") == 1246269412u);
			pAgent->SetVariable("InactiveCount", opr2, 1246269412u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_1_attach5 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_1_attach5, Transition);
		Transition_bt_node_test_fsm_fsm_ut_1_attach5()
		{
			this->SetTargetStateId(1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Begin;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_1_attach6 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_1_attach6, Transition);
		Transition_bt_node_test_fsm_fsm_ut_1_attach6()
		{
			this->SetTargetStateId(18);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Exit;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ut_1_attach14 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ut_1_attach14, Effector);
		Effector_bt_node_test_fsm_fsm_ut_1_attach14()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("InactiveCount") == 1246269412u);
			int& opr1 = (int&)pAgent->GetVariable<int >(1246269412u);
			int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("InactiveCount") == 1246269412u);
			pAgent->SetVariable("InactiveCount", (int)(opr1 + opr2), 1246269412u);
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ut_1_node1 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_1_node1, State);
		State_bt_node_test_fsm_fsm_ut_1_node1()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_active_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_1_attach11 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_1_attach11, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_1_attach11()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			unsigned int opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ActiveCount") == 177115358u);
			pAgent->SetVariable("ActiveCount", opr2, 177115358u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_1_attach7 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_1_attach7, Transition);
		Transition_bt_node_test_fsm_fsm_ut_1_attach7()
		{
			this->SetTargetStateId(4);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Pause;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ut_1_attach17 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ut_1_attach17, Effector);
		Effector_bt_node_test_fsm_fsm_ut_1_attach17()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ActiveCount") == 177115358u);
			unsigned int& opr1 = (unsigned int&)pAgent->GetVariable<unsigned int >(177115358u);
			unsigned int opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ActiveCount") == 177115358u);
			pAgent->SetVariable("ActiveCount", (unsigned int)(opr1 + opr2), 177115358u);
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ut_1_node2 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_1_node2, State);
		State_bt_node_test_fsm_fsm_ut_1_node2()
		{
			this->m_bIsEndState = true;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_1_attach12 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_1_attach12, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_1_attach12()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			long opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ExitCount") == 1184325508u);
			pAgent->SetVariable("ExitCount", opr2, 1184325508u);
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ut_1_attach15 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ut_1_attach15, Effector);
		Effector_bt_node_test_fsm_fsm_ut_1_attach15()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ExitCount") == 1184325508u);
			long& opr1 = (long&)pAgent->GetVariable<long >(1184325508u);
			long opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ExitCount") == 1184325508u);
			pAgent->SetVariable("ExitCount", (long)(opr1 + opr2), 1184325508u);
			return result;
		}
	};

	class State_bt_node_test_fsm_fsm_ut_1_node4 : public State
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(State_bt_node_test_fsm_fsm_ut_1_node4, State);
		State_bt_node_test_fsm_fsm_ut_1_node4()
		{
			this->m_bIsEndState = false;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((FSMAgentTest*)pAgent)->_Execute_Method_<METHOD_TYPE_FSMAgentTest_pause_update, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_fsm_fsm_ut_1_attach13 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_fsm_fsm_ut_1_attach13, Precondition);
		Precondition_bt_node_test_fsm_fsm_ut_1_attach13()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			short opr2 = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("PauseCount") == 3020354788u);
			pAgent->SetVariable("PauseCount", opr2, 3020354788u);
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_1_attach8 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_1_attach8, Transition);
		Transition_bt_node_test_fsm_fsm_ut_1_attach8()
		{
			this->SetTargetStateId(3);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::End;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Transition_bt_node_test_fsm_fsm_ut_1_attach9 : public Transition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Transition_bt_node_test_fsm_fsm_ut_1_attach9, Transition);
		Transition_bt_node_test_fsm_fsm_ut_1_attach9()
		{
			this->SetTargetStateId(1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			FSMAgentTest::EMessage opl = ((FSMAgentTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_FSMAgentTest_Message, FSMAgentTest::EMessage >();
			FSMAgentTest::EMessage opr2 = FSMAgentTest::Resume;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_fsm_fsm_ut_1_attach16 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_fsm_fsm_ut_1_attach16, Effector);
		Effector_bt_node_test_fsm_fsm_ut_1_attach16()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("PauseCount") == 3020354788u);
			short& opr1 = (short&)pAgent->GetVariable<short >(3020354788u);
			short opr2 = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("PauseCount") == 3020354788u);
			pAgent->SetVariable("PauseCount", (short)(opr1 + opr2), 3020354788u);
			return result;
		}
	};

	class WaitFramesState_bt_node_test_fsm_fsm_ut_1_node18 : public WaitFramesState
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitFramesState_bt_node_test_fsm_fsm_ut_1_node18, WaitFramesState);
		WaitFramesState_bt_node_test_fsm_fsm_ut_1_node18()
		{
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 3;
		}
	};

	class WaitTransition_bt_node_test_fsm_fsm_ut_1_attach20 : public WaitTransition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitTransition_bt_node_test_fsm_fsm_ut_1_attach20, WaitTransition);
		WaitTransition_bt_node_test_fsm_fsm_ut_1_attach20()
		{
			this->SetTargetStateId(2);
		}
	protected:
	};

	class bt_node_test_fsm_fsm_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/fsm/fsm_ut_1");
			pBT->SetIsFSM(true);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("FSMAgentTest");
#endif
			// attachments
			// children
			{
				FSM* fsm = BEHAVIAC_NEW FSM();
				fsm->SetClassNameString("FSM");
				fsm->SetId((uint16_t)-1);
				fsm->SetInitialId(3);
#if !BEHAVIAC_RELEASE
				fsm->SetAgentType("FSMAgentTest");
#endif
				{
					State_bt_node_test_fsm_fsm_ut_1_node3* node3 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_1_node3;
					node3->SetClassNameString("State");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_1_attach10* attach10 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_1_attach10;
						attach10->SetClassNameString("Precondition");
						attach10->SetId(10);
#if !BEHAVIAC_RELEASE
						attach10->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach10, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach10) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_1_attach5* attach5 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_1_attach5;
						attach5->SetClassNameString("Transition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach5, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_1_attach6* attach6 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_1_attach6;
						attach6->SetClassNameString("Transition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach6, false, false, true);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ut_1_attach14* attach14 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ut_1_attach14;
						attach14->SetClassNameString("Effector");
						attach14->SetId(14);
#if !BEHAVIAC_RELEASE
						attach14->SetAgentType("FSMAgentTest");
#endif
						node3->Attach(attach14, false, true, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach14) != 0));
					}
					fsm->AddChild(node3);
					fsm->SetHasEvents(fsm->HasEvents() | node3->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ut_1_node1* node1 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_1_node1;
					node1->SetClassNameString("State");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_1_attach11* attach11 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_1_attach11;
						attach11->SetClassNameString("Precondition");
						attach11->SetId(11);
#if !BEHAVIAC_RELEASE
						attach11->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach11, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach11) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_1_attach7* attach7 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_1_attach7;
						attach7->SetClassNameString("Transition");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach7, false, false, true);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ut_1_attach17* attach17 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ut_1_attach17;
						attach17->SetClassNameString("Effector");
						attach17->SetId(17);
#if !BEHAVIAC_RELEASE
						attach17->SetAgentType("FSMAgentTest");
#endif
						node1->Attach(attach17, false, true, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach17) != 0));
					}
					fsm->AddChild(node1);
					fsm->SetHasEvents(fsm->HasEvents() | node1->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ut_1_node2* node2 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_1_node2;
					node2->SetClassNameString("State");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_1_attach12* attach12 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_1_attach12;
						attach12->SetClassNameString("Precondition");
						attach12->SetId(12);
#if !BEHAVIAC_RELEASE
						attach12->SetAgentType("FSMAgentTest");
#endif
						node2->Attach(attach12, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach12) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ut_1_attach15* attach15 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ut_1_attach15;
						attach15->SetClassNameString("Effector");
						attach15->SetId(15);
#if !BEHAVIAC_RELEASE
						attach15->SetAgentType("FSMAgentTest");
#endif
						node2->Attach(attach15, false, true, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach15) != 0));
					}
					fsm->AddChild(node2);
					fsm->SetHasEvents(fsm->HasEvents() | node2->HasEvents());
				}
				{
					State_bt_node_test_fsm_fsm_ut_1_node4* node4 = BEHAVIAC_NEW State_bt_node_test_fsm_fsm_ut_1_node4;
					node4->SetClassNameString("State");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_fsm_fsm_ut_1_attach13* attach13 = BEHAVIAC_NEW Precondition_bt_node_test_fsm_fsm_ut_1_attach13;
						attach13->SetClassNameString("Precondition");
						attach13->SetId(13);
#if !BEHAVIAC_RELEASE
						attach13->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach13, true, false, false);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach13) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_1_attach8* attach8 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_1_attach8;
						attach8->SetClassNameString("Transition");
						attach8->SetId(8);
#if !BEHAVIAC_RELEASE
						attach8->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach8, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach8) != 0));
					}
					{
						Transition_bt_node_test_fsm_fsm_ut_1_attach9* attach9 = BEHAVIAC_NEW Transition_bt_node_test_fsm_fsm_ut_1_attach9;
						attach9->SetClassNameString("Transition");
						attach9->SetId(9);
#if !BEHAVIAC_RELEASE
						attach9->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach9, false, false, true);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach9) != 0));
					}
					{
						Effector_bt_node_test_fsm_fsm_ut_1_attach16* attach16 = BEHAVIAC_NEW Effector_bt_node_test_fsm_fsm_ut_1_attach16;
						attach16->SetClassNameString("Effector");
						attach16->SetId(16);
#if !BEHAVIAC_RELEASE
						attach16->SetAgentType("FSMAgentTest");
#endif
						node4->Attach(attach16, false, true, false);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach16) != 0));
					}
					fsm->AddChild(node4);
					fsm->SetHasEvents(fsm->HasEvents() | node4->HasEvents());
				}
				{
					WaitFramesState_bt_node_test_fsm_fsm_ut_1_node18* node18 = BEHAVIAC_NEW WaitFramesState_bt_node_test_fsm_fsm_ut_1_node18;
					node18->SetClassNameString("WaitFramesState");
					node18->SetId(18);
#if !BEHAVIAC_RELEASE
					node18->SetAgentType("FSMAgentTest");
#endif
					// attachments
					{
						WaitTransition_bt_node_test_fsm_fsm_ut_1_attach20* attach20 = BEHAVIAC_NEW WaitTransition_bt_node_test_fsm_fsm_ut_1_attach20;
						attach20->SetClassNameString("WaitTransition");
						attach20->SetId(20);
#if !BEHAVIAC_RELEASE
						attach20->SetAgentType("FSMAgentTest");
#endif
						node18->Attach(attach20, false, false, true);
						node18->SetHasEvents(node18->HasEvents() | (Event::DynamicCast(attach20) != 0));
					}
					fsm->AddChild(node18);
					fsm->SetHasEvents(fsm->HasEvents() | node18->HasEvents());
				}
				pBT->AddChild(fsm);
			}
			return true;
		}
	};

	// Source file: node_test/htn/house/build_house

	class Task_bt_node_test_htn_house_build_house_node7 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_htn_house_build_house_node7, Task);
		Task_bt_node_test_htn_house_build_house_node7()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentHouse::build_house()");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = true;
		}
	protected:
	};

	class Precondition_bt_node_test_htn_house_build_house_attach0 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_build_house_attach0, Precondition);
		Precondition_bt_node_test_htn_house_build_house_attach0()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Land") == 1676779868u);
			bool& opl = (bool&)pAgent->GetVariable<bool >(1676779868u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach1 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach1, Effector);
		Effector_bt_node_test_htn_house_build_house_attach1()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("House") == 3571637003u);
			pAgent->SetVariable("House", opr2, 3571637003u);
			return result;
		}
	};

	class Parallel_bt_node_test_htn_house_build_house_node4 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_htn_house_build_house_node4, Parallel);
		Parallel_bt_node_test_htn_house_build_house_node4()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_htn_house_build_house_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_build_house_node5, Action);
		Action_bt_node_test_htn_house_build_house_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouseBase*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouseBase_ObtainPermit, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_htn_house_build_house_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_build_house_attach3, Precondition);
		Precondition_bt_node_test_htn_house_build_house_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Land") == 1676779868u);
			bool& opl = (bool&)pAgent->GetVariable<bool >(1676779868u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach6 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach6, Effector);
		Effector_bt_node_test_htn_house_build_house_attach6()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Permit") == 3054969542u);
			pAgent->SetVariable("Permit", opr2, 3054969542u);
			return result;
		}
	};

	class Action_bt_node_test_htn_house_build_house_node18 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_build_house_node18, Action);
		Action_bt_node_test_htn_house_build_house_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_HireBuilder, void >();
			return BT_SUCCESS;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach8 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach8, Effector);
		Effector_bt_node_test_htn_house_build_house_attach8()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Contract") == 3012131995u);
			pAgent->SetVariable("Contract", opr2, 3012131995u);
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_htn_house_build_house_node20 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_house_build_house_node20, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_house_build_house_node20()
		{
			m_referencedBehaviorPath = "node_test/htn/house/construct";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentHouse::construct()");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class Action_bt_node_test_htn_house_build_house_node19 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_build_house_node19, Action);
		Action_bt_node_test_htn_house_build_house_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_PayBuilder, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_htn_house_build_house_attach27 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_build_house_attach27, Precondition);
		Precondition_bt_node_test_htn_house_build_house_attach27()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			int& opl = (int&)pAgent->GetVariable<int >(4260042937u);
			int opr2 = 50;
			bool op = Details::GreaterEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_htn_house_build_house_attach9 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_build_house_attach9, Precondition);
		Precondition_bt_node_test_htn_house_build_house_attach9()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("HouseBuilt") == 1186824470u);
			bool& opl = (bool&)pAgent->GetVariable<bool >(1186824470u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach10 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach10, Effector);
		Effector_bt_node_test_htn_house_build_house_attach10()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			int& opr1 = (int&)pAgent->GetVariable<int >(4260042937u);
			int opr2 = 50;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			pAgent->SetVariable("Money", (int)(opr1 - opr2), 4260042937u);
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach11 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach11, Effector);
		Effector_bt_node_test_htn_house_build_house_attach11()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("House") == 3571637003u);
			pAgent->SetVariable("House", opr2, 3571637003u);
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach12 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach12, Effector);
		Effector_bt_node_test_htn_house_build_house_attach12()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = false;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Contract") == 3012131995u);
			pAgent->SetVariable("Contract", opr2, 3012131995u);
			return result;
		}
	};

	class Parallel_bt_node_test_htn_house_build_house_node23 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_htn_house_build_house_node23, Parallel);
		Parallel_bt_node_test_htn_house_build_house_node23()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_htn_house_build_house_node28 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_build_house_node28, Action);
		Action_bt_node_test_htn_house_build_house_node28()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouseBase*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouseBase_ObtainPermit, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_htn_house_build_house_attach15 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_build_house_attach15, Precondition);
		Precondition_bt_node_test_htn_house_build_house_attach15()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Land") == 1676779868u);
			bool& opl = (bool&)pAgent->GetVariable<bool >(1676779868u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_build_house_attach16 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_build_house_attach16, Effector);
		Effector_bt_node_test_htn_house_build_house_attach16()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Permit") == 3054969542u);
			pAgent->SetVariable("Permit", opr2, 3054969542u);
			return result;
		}
	};

	class Action_bt_node_test_htn_house_build_house_node24 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_build_house_node24, Action);
		Action_bt_node_test_htn_house_build_house_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_CutLogs, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_htn_house_build_house_node25 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_build_house_node25, Action);
		Action_bt_node_test_htn_house_build_house_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_GetFriend, void >();
			return BT_SUCCESS;
		}
	};

	class ReferencedBehavior_bt_node_test_htn_house_build_house_node26 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_house_build_house_node26, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_house_build_house_node26()
		{
			m_referencedBehaviorPath = "node_test/htn/house/construct";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentHouse::construct()");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class bt_node_test_htn_house_build_house
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/htn/house/build_house");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("HTNAgentHouse");
#endif
			// children
			{
				Task_bt_node_test_htn_house_build_house_node7* node7 = BEHAVIAC_NEW Task_bt_node_test_htn_house_build_house_node7;
				node7->SetClassNameString("Task");
				node7->SetId(7);
#if !BEHAVIAC_RELEASE
				node7->SetAgentType("HTNAgentHouse");
#endif
				// attachments
				{
					Precondition_bt_node_test_htn_house_build_house_attach0* attach0 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_build_house_attach0;
					attach0->SetClassNameString("Precondition");
					attach0->SetId(0);
#if !BEHAVIAC_RELEASE
					attach0->SetAgentType("HTNAgentHouse");
#endif
					node7->Attach(attach0, true, false, false);
					node7->SetHasEvents(node7->HasEvents() | (Event::DynamicCast(attach0) != 0));
				}
				{
					Effector_bt_node_test_htn_house_build_house_attach1* attach1 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach1;
					attach1->SetClassNameString("Effector");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("HTNAgentHouse");
#endif
					node7->Attach(attach1, false, true, false);
					node7->SetHasEvents(node7->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				pBT->AddChild(node7);
				{
					Method* node2 = BEHAVIAC_NEW Method;
					node2->SetClassNameString("Method");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("HTNAgentHouse");
#endif
					node7->AddChild(node2);
					{
						Sequence* node17 = BEHAVIAC_NEW Sequence;
						node17->SetClassNameString("Sequence");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("HTNAgentHouse");
#endif
						node2->AddChild(node17);
						{
							Parallel_bt_node_test_htn_house_build_house_node4* node4 = BEHAVIAC_NEW Parallel_bt_node_test_htn_house_build_house_node4;
							node4->SetClassNameString("Parallel");
							node4->SetId(4);
#if !BEHAVIAC_RELEASE
							node4->SetAgentType("HTNAgentHouse");
#endif
							node17->AddChild(node4);
							{
								Action_bt_node_test_htn_house_build_house_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_htn_house_build_house_node5;
								node5->SetClassNameString("Action");
								node5->SetId(5);
#if !BEHAVIAC_RELEASE
								node5->SetAgentType("HTNAgentHouse");
#endif
								// attachments
								{
									Precondition_bt_node_test_htn_house_build_house_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_build_house_attach3;
									attach3->SetClassNameString("Precondition");
									attach3->SetId(3);
#if !BEHAVIAC_RELEASE
									attach3->SetAgentType("HTNAgentHouse");
#endif
									node5->Attach(attach3, true, false, false);
									node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach3) != 0));
								}
								{
									Effector_bt_node_test_htn_house_build_house_attach6* attach6 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach6;
									attach6->SetClassNameString("Effector");
									attach6->SetId(6);
#if !BEHAVIAC_RELEASE
									attach6->SetAgentType("HTNAgentHouse");
#endif
									node5->Attach(attach6, false, true, false);
									node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach6) != 0));
								}
								node4->AddChild(node5);
								node4->SetHasEvents(node4->HasEvents() | node5->HasEvents());
							}
							{
								Action_bt_node_test_htn_house_build_house_node18* node18 = BEHAVIAC_NEW Action_bt_node_test_htn_house_build_house_node18;
								node18->SetClassNameString("Action");
								node18->SetId(18);
#if !BEHAVIAC_RELEASE
								node18->SetAgentType("HTNAgentHouse");
#endif
								// attachments
								{
									Effector_bt_node_test_htn_house_build_house_attach8* attach8 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach8;
									attach8->SetClassNameString("Effector");
									attach8->SetId(8);
#if !BEHAVIAC_RELEASE
									attach8->SetAgentType("HTNAgentHouse");
#endif
									node18->Attach(attach8, false, true, false);
									node18->SetHasEvents(node18->HasEvents() | (Event::DynamicCast(attach8) != 0));
								}
								node4->AddChild(node18);
								node4->SetHasEvents(node4->HasEvents() | node18->HasEvents());
							}
							node17->SetHasEvents(node17->HasEvents() | node4->HasEvents());
						}
						{
							ReferencedBehavior_bt_node_test_htn_house_build_house_node20* node20 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_house_build_house_node20;
							node20->SetClassNameString("ReferencedBehavior");
							node20->SetId(20);
#if !BEHAVIAC_RELEASE
							node20->SetAgentType("HTNAgentHouse");
#endif
							node17->AddChild(node20);
							node17->SetHasEvents(node17->HasEvents() | node20->HasEvents());
						}
						{
							Action_bt_node_test_htn_house_build_house_node19* node19 = BEHAVIAC_NEW Action_bt_node_test_htn_house_build_house_node19;
							node19->SetClassNameString("Action");
							node19->SetId(19);
#if !BEHAVIAC_RELEASE
							node19->SetAgentType("HTNAgentHouse");
#endif
							// attachments
							{
								Precondition_bt_node_test_htn_house_build_house_attach27* attach27 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_build_house_attach27;
								attach27->SetClassNameString("Precondition");
								attach27->SetId(27);
#if !BEHAVIAC_RELEASE
								attach27->SetAgentType("HTNAgentHouse");
#endif
								node19->Attach(attach27, true, false, false);
								node19->SetHasEvents(node19->HasEvents() | (Event::DynamicCast(attach27) != 0));
							}
							{
								Precondition_bt_node_test_htn_house_build_house_attach9* attach9 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_build_house_attach9;
								attach9->SetClassNameString("Precondition");
								attach9->SetId(9);
#if !BEHAVIAC_RELEASE
								attach9->SetAgentType("HTNAgentHouse");
#endif
								node19->Attach(attach9, true, false, false);
								node19->SetHasEvents(node19->HasEvents() | (Event::DynamicCast(attach9) != 0));
							}
							{
								Effector_bt_node_test_htn_house_build_house_attach10* attach10 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach10;
								attach10->SetClassNameString("Effector");
								attach10->SetId(10);
#if !BEHAVIAC_RELEASE
								attach10->SetAgentType("HTNAgentHouse");
#endif
								node19->Attach(attach10, false, true, false);
								node19->SetHasEvents(node19->HasEvents() | (Event::DynamicCast(attach10) != 0));
							}
							{
								Effector_bt_node_test_htn_house_build_house_attach11* attach11 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach11;
								attach11->SetClassNameString("Effector");
								attach11->SetId(11);
#if !BEHAVIAC_RELEASE
								attach11->SetAgentType("HTNAgentHouse");
#endif
								node19->Attach(attach11, false, true, false);
								node19->SetHasEvents(node19->HasEvents() | (Event::DynamicCast(attach11) != 0));
							}
							{
								Effector_bt_node_test_htn_house_build_house_attach12* attach12 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach12;
								attach12->SetClassNameString("Effector");
								attach12->SetId(12);
#if !BEHAVIAC_RELEASE
								attach12->SetAgentType("HTNAgentHouse");
#endif
								node19->Attach(attach12, false, true, false);
								node19->SetHasEvents(node19->HasEvents() | (Event::DynamicCast(attach12) != 0));
							}
							node17->AddChild(node19);
							node17->SetHasEvents(node17->HasEvents() | node19->HasEvents());
						}
						node2->SetHasEvents(node2->HasEvents() | node17->HasEvents());
					}
					node7->SetHasEvents(node7->HasEvents() | node2->HasEvents());
				}
				{
					Method* node21 = BEHAVIAC_NEW Method;
					node21->SetClassNameString("Method");
					node21->SetId(21);
#if !BEHAVIAC_RELEASE
					node21->SetAgentType("HTNAgentHouse");
#endif
					node7->AddChild(node21);
					{
						Sequence* node22 = BEHAVIAC_NEW Sequence;
						node22->SetClassNameString("Sequence");
						node22->SetId(22);
#if !BEHAVIAC_RELEASE
						node22->SetAgentType("HTNAgentHouse");
#endif
						node21->AddChild(node22);
						{
							Parallel_bt_node_test_htn_house_build_house_node23* node23 = BEHAVIAC_NEW Parallel_bt_node_test_htn_house_build_house_node23;
							node23->SetClassNameString("Parallel");
							node23->SetId(23);
#if !BEHAVIAC_RELEASE
							node23->SetAgentType("HTNAgentHouse");
#endif
							node22->AddChild(node23);
							{
								Sequence* node14 = BEHAVIAC_NEW Sequence;
								node14->SetClassNameString("Sequence");
								node14->SetId(14);
#if !BEHAVIAC_RELEASE
								node14->SetAgentType("HTNAgentHouse");
#endif
								node23->AddChild(node14);
								{
									Action_bt_node_test_htn_house_build_house_node28* node28 = BEHAVIAC_NEW Action_bt_node_test_htn_house_build_house_node28;
									node28->SetClassNameString("Action");
									node28->SetId(28);
#if !BEHAVIAC_RELEASE
									node28->SetAgentType("HTNAgentHouse");
#endif
									// attachments
									{
										Precondition_bt_node_test_htn_house_build_house_attach15* attach15 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_build_house_attach15;
										attach15->SetClassNameString("Precondition");
										attach15->SetId(15);
#if !BEHAVIAC_RELEASE
										attach15->SetAgentType("HTNAgentHouse");
#endif
										node28->Attach(attach15, true, false, false);
										node28->SetHasEvents(node28->HasEvents() | (Event::DynamicCast(attach15) != 0));
									}
									{
										Effector_bt_node_test_htn_house_build_house_attach16* attach16 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_build_house_attach16;
										attach16->SetClassNameString("Effector");
										attach16->SetId(16);
#if !BEHAVIAC_RELEASE
										attach16->SetAgentType("HTNAgentHouse");
#endif
										node28->Attach(attach16, false, true, false);
										node28->SetHasEvents(node28->HasEvents() | (Event::DynamicCast(attach16) != 0));
									}
									node14->AddChild(node28);
									node14->SetHasEvents(node14->HasEvents() | node28->HasEvents());
								}
								{
									Action_bt_node_test_htn_house_build_house_node24* node24 = BEHAVIAC_NEW Action_bt_node_test_htn_house_build_house_node24;
									node24->SetClassNameString("Action");
									node24->SetId(24);
#if !BEHAVIAC_RELEASE
									node24->SetAgentType("HTNAgentHouse");
#endif
									node14->AddChild(node24);
									node14->SetHasEvents(node14->HasEvents() | node24->HasEvents());
								}
								node23->SetHasEvents(node23->HasEvents() | node14->HasEvents());
							}
							{
								Action_bt_node_test_htn_house_build_house_node25* node25 = BEHAVIAC_NEW Action_bt_node_test_htn_house_build_house_node25;
								node25->SetClassNameString("Action");
								node25->SetId(25);
#if !BEHAVIAC_RELEASE
								node25->SetAgentType("HTNAgentHouse");
#endif
								node23->AddChild(node25);
								node23->SetHasEvents(node23->HasEvents() | node25->HasEvents());
							}
							node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
						}
						{
							ReferencedBehavior_bt_node_test_htn_house_build_house_node26* node26 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_house_build_house_node26;
							node26->SetClassNameString("ReferencedBehavior");
							node26->SetId(26);
#if !BEHAVIAC_RELEASE
							node26->SetAgentType("HTNAgentHouse");
#endif
							node22->AddChild(node26);
							node22->SetHasEvents(node22->HasEvents() | node26->HasEvents());
						}
						node21->SetHasEvents(node21->HasEvents() | node22->HasEvents());
					}
					node7->SetHasEvents(node7->HasEvents() | node21->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node7->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/htn/house/construct

	class Task_bt_node_test_htn_house_construct_node0 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_htn_house_construct_node0, Task);
		Task_bt_node_test_htn_house_construct_node0()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentHouse::construct()");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = true;
		}
	protected:
	};

	class Precondition_bt_node_test_htn_house_construct_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_construct_attach1, Precondition);
		Precondition_bt_node_test_htn_house_construct_attach1()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Permit") == 3054969542u);
			bool& opl = (bool&)pAgent->GetVariable<bool >(3054969542u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_construct_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_construct_attach2, Effector);
		Effector_bt_node_test_htn_house_construct_attach2()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("HouseBuilt") == 1186824470u);
			pAgent->SetVariable("HouseBuilt", opr2, 1186824470u);
			return result;
		}
	};

	class Action_bt_node_test_htn_house_construct_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_construct_node3, Action);
		Action_bt_node_test_htn_house_construct_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildFoundation, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_htn_house_construct_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_construct_node4, Action);
		Action_bt_node_test_htn_house_construct_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildFrame, void >();
			return BT_SUCCESS;
		}
	};

	class Parallel_bt_node_test_htn_house_construct_node5 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_htn_house_construct_node5, Parallel);
		Parallel_bt_node_test_htn_house_construct_node5()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_htn_house_construct_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_construct_node6, Action);
		Action_bt_node_test_htn_house_construct_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildRoof, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_htn_house_construct_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_construct_node7, Action);
		Action_bt_node_test_htn_house_construct_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildWalls, void >();
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_htn_house_construct_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_construct_node8, Action);
		Action_bt_node_test_htn_house_construct_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuildInterior, void >();
			return BT_SUCCESS;
		}
	};

	class bt_node_test_htn_house_construct
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/htn/house/construct");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("HTNAgentHouse");
#endif
			// children
			{
				Task_bt_node_test_htn_house_construct_node0* node0 = BEHAVIAC_NEW Task_bt_node_test_htn_house_construct_node0;
				node0->SetClassNameString("Task");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("HTNAgentHouse");
#endif
				// attachments
				{
					Precondition_bt_node_test_htn_house_construct_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_construct_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("HTNAgentHouse");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_htn_house_construct_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_construct_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("HTNAgentHouse");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					Method* node9 = BEHAVIAC_NEW Method;
					node9->SetClassNameString("Method");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("HTNAgentHouse");
#endif
					node0->AddChild(node9);
					{
						Sequence* node10 = BEHAVIAC_NEW Sequence;
						node10->SetClassNameString("Sequence");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("HTNAgentHouse");
#endif
						node9->AddChild(node10);
						{
							Action_bt_node_test_htn_house_construct_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_htn_house_construct_node3;
							node3->SetClassNameString("Action");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("HTNAgentHouse");
#endif
							node10->AddChild(node3);
							node10->SetHasEvents(node10->HasEvents() | node3->HasEvents());
						}
						{
							Action_bt_node_test_htn_house_construct_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_htn_house_construct_node4;
							node4->SetClassNameString("Action");
							node4->SetId(4);
#if !BEHAVIAC_RELEASE
							node4->SetAgentType("HTNAgentHouse");
#endif
							node10->AddChild(node4);
							node10->SetHasEvents(node10->HasEvents() | node4->HasEvents());
						}
						{
							Parallel_bt_node_test_htn_house_construct_node5* node5 = BEHAVIAC_NEW Parallel_bt_node_test_htn_house_construct_node5;
							node5->SetClassNameString("Parallel");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("HTNAgentHouse");
#endif
							node10->AddChild(node5);
							{
								Action_bt_node_test_htn_house_construct_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_htn_house_construct_node6;
								node6->SetClassNameString("Action");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("HTNAgentHouse");
#endif
								node5->AddChild(node6);
								node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
							}
							{
								Action_bt_node_test_htn_house_construct_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_htn_house_construct_node7;
								node7->SetClassNameString("Action");
								node7->SetId(7);
#if !BEHAVIAC_RELEASE
								node7->SetAgentType("HTNAgentHouse");
#endif
								node5->AddChild(node7);
								node5->SetHasEvents(node5->HasEvents() | node7->HasEvents());
							}
							node10->SetHasEvents(node10->HasEvents() | node5->HasEvents());
						}
						{
							Action_bt_node_test_htn_house_construct_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_htn_house_construct_node8;
							node8->SetClassNameString("Action");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("HTNAgentHouse");
#endif
							node10->AddChild(node8);
							node10->SetHasEvents(node10->HasEvents() | node8->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/htn/house/root

	class Task_bt_node_test_htn_house_root_node1 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_htn_house_root_node1, Task);
		Task_bt_node_test_htn_house_root_node1()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentHouse::root()");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = true;
		}
	protected:
	};

	class Parallel_bt_node_test_htn_house_root_node12 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_htn_house_root_node12, Parallel);
		Parallel_bt_node_test_htn_house_root_node12()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_htn_house_root_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_root_node4, Action);
		Action_bt_node_test_htn_house_root_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_BuyLand, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_htn_house_root_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_root_attach3, Precondition);
		Precondition_bt_node_test_htn_house_root_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			int& opl = (int&)pAgent->GetVariable<int >(4260042937u);
			int opr2 = 100;
			bool op = Details::Greater(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_root_attach5 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_root_attach5, Effector);
		Effector_bt_node_test_htn_house_root_attach5()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			int& opr1 = (int&)pAgent->GetVariable<int >(4260042937u);
			int opr2 = 100;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			pAgent->SetVariable("Money", (int)(opr1 - opr2), 4260042937u);
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_root_attach6 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_root_attach6, Effector);
		Effector_bt_node_test_htn_house_root_attach6()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Land") == 1676779868u);
			pAgent->SetVariable("Land", opr2, 1676779868u);
			return result;
		}
	};

	class Action_bt_node_test_htn_house_root_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_house_root_node8, Action);
		Action_bt_node_test_htn_house_root_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((HTNAgentHouse*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentHouse_GetLoan, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_htn_house_root_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_house_root_attach7, Precondition);
		Precondition_bt_node_test_htn_house_root_attach7()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("GoodCredit") == 2793604018u);
			bool& opl = (bool&)pAgent->GetVariable<bool >(2793604018u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_root_attach9 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_root_attach9, Effector);
		Effector_bt_node_test_htn_house_root_attach9()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			int& opr1 = (int&)pAgent->GetVariable<int >(4260042937u);
			int opr2 = 50;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Money") == 4260042937u);
			pAgent->SetVariable("Money", (int)(opr1 + opr2), 4260042937u);
			return result;
		}
	};

	class Effector_bt_node_test_htn_house_root_attach10 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_htn_house_root_attach10, Effector);
		Effector_bt_node_test_htn_house_root_attach10()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opr2 = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("Mortgage") == 669368973u);
			pAgent->SetVariable("Mortgage", opr2, 669368973u);
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_htn_house_root_node11 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_house_root_node11, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_house_root_node11()
		{
			m_referencedBehaviorPath = "node_test/htn/house/build_house";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentHouse::build_house()");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class bt_node_test_htn_house_root
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/htn/house/root");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("HTNAgentHouse");
#endif
			// children
			{
				Task_bt_node_test_htn_house_root_node1* node1 = BEHAVIAC_NEW Task_bt_node_test_htn_house_root_node1;
				node1->SetClassNameString("Task");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("HTNAgentHouse");
#endif
				pBT->AddChild(node1);
				{
					Method* node0 = BEHAVIAC_NEW Method;
					node0->SetClassNameString("Method");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("HTNAgentHouse");
#endif
					node1->AddChild(node0);
					{
						Sequence* node2 = BEHAVIAC_NEW Sequence;
						node2->SetClassNameString("Sequence");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("HTNAgentHouse");
#endif
						node0->AddChild(node2);
						{
							Parallel_bt_node_test_htn_house_root_node12* node12 = BEHAVIAC_NEW Parallel_bt_node_test_htn_house_root_node12;
							node12->SetClassNameString("Parallel");
							node12->SetId(12);
#if !BEHAVIAC_RELEASE
							node12->SetAgentType("HTNAgentHouse");
#endif
							node2->AddChild(node12);
							{
								Action_bt_node_test_htn_house_root_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_htn_house_root_node4;
								node4->SetClassNameString("Action");
								node4->SetId(4);
#if !BEHAVIAC_RELEASE
								node4->SetAgentType("HTNAgentHouse");
#endif
								// attachments
								{
									Precondition_bt_node_test_htn_house_root_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_root_attach3;
									attach3->SetClassNameString("Precondition");
									attach3->SetId(3);
#if !BEHAVIAC_RELEASE
									attach3->SetAgentType("HTNAgentHouse");
#endif
									node4->Attach(attach3, true, false, false);
									node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach3) != 0));
								}
								{
									Effector_bt_node_test_htn_house_root_attach5* attach5 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_root_attach5;
									attach5->SetClassNameString("Effector");
									attach5->SetId(5);
#if !BEHAVIAC_RELEASE
									attach5->SetAgentType("HTNAgentHouse");
#endif
									node4->Attach(attach5, false, true, false);
									node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach5) != 0));
								}
								{
									Effector_bt_node_test_htn_house_root_attach6* attach6 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_root_attach6;
									attach6->SetClassNameString("Effector");
									attach6->SetId(6);
#if !BEHAVIAC_RELEASE
									attach6->SetAgentType("HTNAgentHouse");
#endif
									node4->Attach(attach6, false, true, false);
									node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach6) != 0));
								}
								node12->AddChild(node4);
								node12->SetHasEvents(node12->HasEvents() | node4->HasEvents());
							}
							{
								Action_bt_node_test_htn_house_root_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_htn_house_root_node8;
								node8->SetClassNameString("Action");
								node8->SetId(8);
#if !BEHAVIAC_RELEASE
								node8->SetAgentType("HTNAgentHouse");
#endif
								// attachments
								{
									Precondition_bt_node_test_htn_house_root_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_node_test_htn_house_root_attach7;
									attach7->SetClassNameString("Precondition");
									attach7->SetId(7);
#if !BEHAVIAC_RELEASE
									attach7->SetAgentType("HTNAgentHouse");
#endif
									node8->Attach(attach7, true, false, false);
									node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach7) != 0));
								}
								{
									Effector_bt_node_test_htn_house_root_attach9* attach9 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_root_attach9;
									attach9->SetClassNameString("Effector");
									attach9->SetId(9);
#if !BEHAVIAC_RELEASE
									attach9->SetAgentType("HTNAgentHouse");
#endif
									node8->Attach(attach9, false, true, false);
									node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach9) != 0));
								}
								{
									Effector_bt_node_test_htn_house_root_attach10* attach10 = BEHAVIAC_NEW Effector_bt_node_test_htn_house_root_attach10;
									attach10->SetClassNameString("Effector");
									attach10->SetId(10);
#if !BEHAVIAC_RELEASE
									attach10->SetAgentType("HTNAgentHouse");
#endif
									node8->Attach(attach10, false, true, false);
									node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach10) != 0));
								}
								node12->AddChild(node8);
								node12->SetHasEvents(node12->HasEvents() | node8->HasEvents());
							}
							node2->SetHasEvents(node2->HasEvents() | node12->HasEvents());
						}
						{
							ReferencedBehavior_bt_node_test_htn_house_root_node11* node11 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_house_root_node11;
							node11->SetClassNameString("ReferencedBehavior");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("HTNAgentHouse");
#endif
							node2->AddChild(node11);
							node2->SetHasEvents(node2->HasEvents() | node11->HasEvents());
						}
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/htn/travel/root

	class Task_bt_node_test_htn_travel_root_node1 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_htn_travel_root_node1, Task);
		Task_bt_node_test_htn_travel_root_node1()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::root()");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = true;
		}
	protected:
	};

	class Precondition_bt_node_test_htn_travel_root_attach0 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_travel_root_attach0, Precondition);
		Precondition_bt_node_test_htn_travel_root_attach0()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("start") == 537854745u);
			int& opl_p0 = (int&)pAgent->GetVariable<int >(537854745u);
			bool opl = ((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_start, bool, int& >(opl_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("start") == 537854745u);
			pAgent->SetVariable("start", opl_p0, 537854745u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_htn_travel_root_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_travel_root_attach3, Precondition);
		Precondition_bt_node_test_htn_travel_root_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("finish") == 3620922618u);
			int& opl_p0 = (int&)pAgent->GetVariable<int >(3620922618u);
			bool opl = ((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_finish, bool, int& >(opl_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("finish") == 3620922618u);
			pAgent->SetVariable("finish", opl_p0, 3620922618u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_htn_travel_root_node4 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_travel_root_node4, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_travel_root_node4()
		{
			m_referencedBehaviorPath = "node_test/htn/travel/travel";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::travel(int Self.HTNAgentTravel::start,int Self.HTNAgentTravel::finish)");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class bt_node_test_htn_travel_root
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/htn/travel/root");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("HTNAgentTravel");
#endif
			// pars
			pBT->AddPar("HTNAgentTravel", "int", "start", "0");
			pBT->AddPar("HTNAgentTravel", "int", "finish", "0");
			// children
			{
				Task_bt_node_test_htn_travel_root_node1* node1 = BEHAVIAC_NEW Task_bt_node_test_htn_travel_root_node1;
				node1->SetClassNameString("Task");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("HTNAgentTravel");
#endif
				pBT->AddChild(node1);
				{
					Method* node2 = BEHAVIAC_NEW Method;
					node2->SetClassNameString("Method");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("HTNAgentTravel");
#endif
					// attachments
					{
						Precondition_bt_node_test_htn_travel_root_attach0* attach0 = BEHAVIAC_NEW Precondition_bt_node_test_htn_travel_root_attach0;
						attach0->SetClassNameString("Precondition");
						attach0->SetId(0);
#if !BEHAVIAC_RELEASE
						attach0->SetAgentType("HTNAgentTravel");
#endif
						node2->Attach(attach0, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach0) != 0));
					}
					{
						Precondition_bt_node_test_htn_travel_root_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_htn_travel_root_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("HTNAgentTravel");
#endif
						node2->Attach(attach3, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					node1->AddChild(node2);
					{
						ReferencedBehavior_bt_node_test_htn_travel_root_node4* node4 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_travel_root_node4;
						node4->SetClassNameString("ReferencedBehavior");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("HTNAgentTravel");
#endif
						node2->AddChild(node4);
						node2->SetHasEvents(node2->HasEvents() | node4->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/htn/travel/travel

	class Task_bt_node_test_htn_travel_travel_node0 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_htn_travel_travel_node0, Task);
		Task_bt_node_test_htn_travel_travel_node0()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::travel(0,0)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = true;
		}
	protected:
	};

	class Precondition_bt_node_test_htn_travel_travel_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_travel_travel_attach1, Precondition);
		Precondition_bt_node_test_htn_travel_travel_attach1()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& opl_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			int& opl_p1 = (int&)pAgent->GetVariable<int >(1859309333u);
			bool opl = ((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_short_distance, bool, int, int >(opl_p0, opl_p1);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Action_bt_node_test_htn_travel_travel_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_travel_travel_node3, Action);
		Action_bt_node_test_htn_travel_travel_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			int& method_p1 = (int&)pAgent->GetVariable<int >(1859309333u);
			((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_ride_taxi, void, int, int >(method_p0, method_p1);
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_htn_travel_travel_attach4 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_travel_travel_attach4, Precondition);
		Precondition_bt_node_test_htn_travel_travel_attach4()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& opl_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			int& opl_p1 = (int&)pAgent->GetVariable<int >(1859309333u);
			bool opl = ((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_long_distance, bool, int, int >(opl_p0, opl_p1);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_htn_travel_travel_node6 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_travel_travel_node6, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_travel_travel_node6()
		{
			m_referencedBehaviorPath = "node_test/htn/travel/travel_by_air";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::travel_by_air(int Self.HTNAgentTravel::_$local_task_param_$_0,int Self.HTNAgentTravel::_$local_task_param_$_1)");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class bt_node_test_htn_travel_travel
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/htn/travel/travel");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("HTNAgentTravel");
#endif
			// pars
			pBT->AddPar("HTNAgentTravel", "int", "_$local_task_param_$_0", "0");
			pBT->AddPar("HTNAgentTravel", "int", "_$local_task_param_$_1", "0");
			// children
			{
				Task_bt_node_test_htn_travel_travel_node0* node0 = BEHAVIAC_NEW Task_bt_node_test_htn_travel_travel_node0;
				node0->SetClassNameString("Task");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("HTNAgentTravel");
#endif
				pBT->AddChild(node0);
				{
					Method* node2 = BEHAVIAC_NEW Method;
					node2->SetClassNameString("Method");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("HTNAgentTravel");
#endif
					// attachments
					{
						Precondition_bt_node_test_htn_travel_travel_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_htn_travel_travel_attach1;
						attach1->SetClassNameString("Precondition");
						attach1->SetId(1);
#if !BEHAVIAC_RELEASE
						attach1->SetAgentType("HTNAgentTravel");
#endif
						node2->Attach(attach1, true, false, false);
						node2->SetHasEvents(node2->HasEvents() | (Event::DynamicCast(attach1) != 0));
					}
					node0->AddChild(node2);
					{
						Action_bt_node_test_htn_travel_travel_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_htn_travel_travel_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("HTNAgentTravel");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Method* node5 = BEHAVIAC_NEW Method;
					node5->SetClassNameString("Method");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("HTNAgentTravel");
#endif
					// attachments
					{
						Precondition_bt_node_test_htn_travel_travel_attach4* attach4 = BEHAVIAC_NEW Precondition_bt_node_test_htn_travel_travel_attach4;
						attach4->SetClassNameString("Precondition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("HTNAgentTravel");
#endif
						node5->Attach(attach4, true, false, false);
						node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					node0->AddChild(node5);
					{
						ReferencedBehavior_bt_node_test_htn_travel_travel_node6* node6 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_travel_travel_node6;
						node6->SetClassNameString("ReferencedBehavior");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("HTNAgentTravel");
#endif
						node5->AddChild(node6);
						node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/htn/travel/travel_by_air

	class Task_bt_node_test_htn_travel_travel_by_air_node0 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_htn_travel_travel_by_air_node0, Task);
		Task_bt_node_test_htn_travel_travel_by_air_node0()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::travel_by_air(0,0)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = true;
		}
	protected:
	};

	class Precondition_bt_node_test_htn_travel_travel_by_air_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_travel_travel_by_air_attach2, Precondition);
		Precondition_bt_node_test_htn_travel_travel_by_air_attach2()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& opl_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("as") == 2746731747u);
			behaviac::vector<int>& opl_p1 = (behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(2746731747u);
			bool opl = ((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_airports, bool, int, behaviac::vector<int>& >(opl_p0, opl_p1);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("as") == 2746731747u);
			pAgent->SetVariable("as", opl_p1, 2746731747u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_htn_travel_travel_by_air_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_htn_travel_travel_by_air_attach3, Precondition);
		Precondition_bt_node_test_htn_travel_travel_by_air_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			int& opl_p0 = (int&)pAgent->GetVariable<int >(1859309333u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ay") == 1498948713u);
			int& opl_p1 = (int&)pAgent->GetVariable<int >(1498948713u);
			bool opl = ((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_exist_airport, bool, int, int& >(opl_p0, opl_p1);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ay") == 1498948713u);
			pAgent->SetVariable("ay", opl_p1, 1498948713u);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class DecoratorIterator_bt_node_test_htn_travel_travel_by_air_node5 : public DecoratorIterator
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorIterator_bt_node_test_htn_travel_travel_by_air_node5, DecoratorIterator);
		DecoratorIterator_bt_node_test_htn_travel_travel_by_air_node5()
		{
			m_bDecorateWhenChildEnds = false;
			this->m_opl = Condition::LoadLeft("int Self.HTNAgentTravel::ax");
			BEHAVIAC_ASSERT(this->m_opl != NULL);
			behaviac::string typeName;
			this->m_opr = Condition::LoadRight("vector<int> Self.HTNAgentTravel::as", typeName);
			BEHAVIAC_ASSERT(this->m_opr != NULL);
		}
	protected:
	};

	class ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node8 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node8, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node8()
		{
			m_referencedBehaviorPath = "node_test/htn/travel/travel";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::travel(int Self.HTNAgentTravel::_$local_task_param_$_0,int Self.HTNAgentTravel::ax)");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class Action_bt_node_test_htn_travel_travel_by_air_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_htn_travel_travel_by_air_node7, Action);
		Action_bt_node_test_htn_travel_travel_by_air_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ax") == 1078138152u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(1078138152u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("ay") == 1498948713u);
			int& method_p1 = (int&)pAgent->GetVariable<int >(1498948713u);
			((HTNAgentTravel*)pAgent)->_Execute_Method_<METHOD_TYPE_HTNAgentTravel_fly, void, int, int >(method_p0, method_p1);
			return BT_SUCCESS;
		}
	};

	class ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node4 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node4, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node4()
		{
			m_referencedBehaviorPath = "node_test/htn/travel/travel";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.HTNAgentTravel::travel(int Self.HTNAgentTravel::ay,int Self.HTNAgentTravel::_$local_task_param_$_1)");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class bt_node_test_htn_travel_travel_by_air
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/htn/travel/travel_by_air");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("HTNAgentTravel");
#endif
			// pars
			pBT->AddPar("HTNAgentTravel", "int", "ax", "0");
			pBT->AddPar("HTNAgentTravel", "int", "ay", "0");
			pBT->AddPar("HTNAgentTravel", "vector<int>", "as", "0:");
			pBT->AddPar("HTNAgentTravel", "int", "_$local_task_param_$_0", "0");
			pBT->AddPar("HTNAgentTravel", "int", "_$local_task_param_$_1", "0");
			// children
			{
				Task_bt_node_test_htn_travel_travel_by_air_node0* node0 = BEHAVIAC_NEW Task_bt_node_test_htn_travel_travel_by_air_node0;
				node0->SetClassNameString("Task");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("HTNAgentTravel");
#endif
				pBT->AddChild(node0);
				{
					Method* node1 = BEHAVIAC_NEW Method;
					node1->SetClassNameString("Method");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("HTNAgentTravel");
#endif
					// attachments
					{
						Precondition_bt_node_test_htn_travel_travel_by_air_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_htn_travel_travel_by_air_attach2;
						attach2->SetClassNameString("Precondition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("HTNAgentTravel");
#endif
						node1->Attach(attach2, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					{
						Precondition_bt_node_test_htn_travel_travel_by_air_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_htn_travel_travel_by_air_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("HTNAgentTravel");
#endif
						node1->Attach(attach3, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					node0->AddChild(node1);
					{
						DecoratorIterator_bt_node_test_htn_travel_travel_by_air_node5* node5 = BEHAVIAC_NEW DecoratorIterator_bt_node_test_htn_travel_travel_by_air_node5;
						node5->SetClassNameString("DecoratorIterator");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("HTNAgentTravel");
#endif
						node1->AddChild(node5);
						{
							Sequence* node6 = BEHAVIAC_NEW Sequence;
							node6->SetClassNameString("Sequence");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("HTNAgentTravel");
#endif
							node5->AddChild(node6);
							{
								ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node8* node8 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node8;
								node8->SetClassNameString("ReferencedBehavior");
								node8->SetId(8);
#if !BEHAVIAC_RELEASE
								node8->SetAgentType("HTNAgentTravel");
#endif
								node6->AddChild(node8);
								node6->SetHasEvents(node6->HasEvents() | node8->HasEvents());
							}
							{
								Action_bt_node_test_htn_travel_travel_by_air_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_htn_travel_travel_by_air_node7;
								node7->SetClassNameString("Action");
								node7->SetId(7);
#if !BEHAVIAC_RELEASE
								node7->SetAgentType("HTNAgentTravel");
#endif
								node6->AddChild(node7);
								node6->SetHasEvents(node6->HasEvents() | node7->HasEvents());
							}
							{
								ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node4* node4 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_htn_travel_travel_by_air_node4;
								node4->SetClassNameString("ReferencedBehavior");
								node4->SetId(4);
#if !BEHAVIAC_RELEASE
								node4->SetAgentType("HTNAgentTravel");
#endif
								node6->AddChild(node4);
								node6->SetHasEvents(node6->HasEvents() | node4->HasEvents());
							}
							node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/PreconditionEffectorTest/PreconditionEffectorTest_0

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach0 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach0, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach0()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node8, Action);
		Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((PreconEffectorAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_action, void >();
			return BT_FAILURE;
		}
	};

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach1, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach1()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach2, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach2()
		{
			this->SetPhase(Effector::E_FAILURE);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure, int >() = opr2;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach4 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach4, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach4()
		{
			this->SetPhase(Effector::E_BOTH);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >();
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node9, Action);
		Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((PreconEffectorAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_action, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach10 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach10, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach10()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach5 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach5, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach5()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success, int >() = opr2;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach6 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach6, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach6()
		{
			this->SetPhase(Effector::E_BOTH);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >();
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/PreconditionEffectorTest/PreconditionEffectorTest_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("PreconEffectorAgent");
#endif
			// children
			{
				Selector* node3 = BEHAVIAC_NEW Selector;
				node3->SetClassNameString("Selector");
				node3->SetId(3);
#if !BEHAVIAC_RELEASE
				node3->SetAgentType("PreconEffectorAgent");
#endif
				// attachments
				{
					Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach0* attach0 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach0;
					attach0->SetClassNameString("Precondition");
					attach0->SetId(0);
#if !BEHAVIAC_RELEASE
					attach0->SetAgentType("PreconEffectorAgent");
#endif
					node3->Attach(attach0, true, false, false);
					node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach0) != 0));
				}
				pBT->AddChild(node3);
				{
					Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node8;
					node8->SetClassNameString("Action");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("PreconEffectorAgent");
#endif
					// attachments
					{
						Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach1;
						attach1->SetClassNameString("Precondition");
						attach1->SetId(1);
#if !BEHAVIAC_RELEASE
						attach1->SetAgentType("PreconEffectorAgent");
#endif
						node8->Attach(attach1, true, false, false);
						node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach1) != 0));
					}
					{
						Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach2;
						attach2->SetClassNameString("Effector");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("PreconEffectorAgent");
#endif
						node8->Attach(attach2, false, true, false);
						node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					{
						Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach4* attach4 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach4;
						attach4->SetClassNameString("Effector");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("PreconEffectorAgent");
#endif
						node8->Attach(attach4, false, true, false);
						node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					node3->AddChild(node8);
					node3->SetHasEvents(node3->HasEvents() | node8->HasEvents());
				}
				{
					Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_node9;
					node9->SetClassNameString("Action");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("PreconEffectorAgent");
#endif
					// attachments
					{
						Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach10* attach10 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach10;
						attach10->SetClassNameString("Precondition");
						attach10->SetId(10);
#if !BEHAVIAC_RELEASE
						attach10->SetAgentType("PreconEffectorAgent");
#endif
						node9->Attach(attach10, true, false, false);
						node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach10) != 0));
					}
					{
						Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach5* attach5 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach5;
						attach5->SetClassNameString("Effector");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("PreconEffectorAgent");
#endif
						node9->Attach(attach5, false, true, false);
						node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					{
						Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach6* attach6 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0_attach6;
						attach6->SetClassNameString("Effector");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("PreconEffectorAgent");
#endif
						node9->Attach(attach6, false, true, false);
						node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					node3->AddChild(node9);
					node3->SetHasEvents(node3->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node3->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/PreconditionEffectorTest/PreconditionEffectorTest_1

	class Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_node4, Action);
		Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((PreconEffectorAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_action, void >();
			return BT_RUNNING;
		}
	};

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach0 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach0, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach0()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach1, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach1()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach2, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach2()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach3, Precondition);
		Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = ((PreconEffectorAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_PreconEffectorAgent_fn_return, int >();
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_ret, int >() = opr2;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach5 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach5, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach5()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_success, int >() = opr2;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach6 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach6, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach6()
		{
			this->SetPhase(Effector::E_FAILURE);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_failure, int >() = opr2;
			return result;
		}
	};

	class Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach7 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach7, Effector);
		Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach7()
		{
			this->SetPhase(Effector::E_BOTH);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >();
			int opr2 = 1;
			((PreconEffectorAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PreconEffectorAgent_count_both, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/PreconditionEffectorTest/PreconditionEffectorTest_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("PreconEffectorAgent");
#endif
			// children
			{
				Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_node4;
				node4->SetClassNameString("Action");
				node4->SetId(4);
#if !BEHAVIAC_RELEASE
				node4->SetAgentType("PreconEffectorAgent");
#endif
				// attachments
				{
					Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach0* attach0 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach0;
					attach0->SetClassNameString("Precondition");
					attach0->SetId(0);
#if !BEHAVIAC_RELEASE
					attach0->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach0, true, false, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach0) != 0));
				}
				{
					Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach1, true, false, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach2;
					attach2->SetClassNameString("Precondition");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach2, true, false, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				{
					Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach3;
					attach3->SetClassNameString("Precondition");
					attach3->SetId(3);
#if !BEHAVIAC_RELEASE
					attach3->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach3, true, false, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach3) != 0));
				}
				{
					Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach5* attach5 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach5;
					attach5->SetClassNameString("Effector");
					attach5->SetId(5);
#if !BEHAVIAC_RELEASE
					attach5->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach5, false, true, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach5) != 0));
				}
				{
					Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach6* attach6 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach6;
					attach6->SetClassNameString("Effector");
					attach6->SetId(6);
#if !BEHAVIAC_RELEASE
					attach6->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach6, false, true, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach6) != 0));
				}
				{
					Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach7* attach7 = BEHAVIAC_NEW Effector_bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1_attach7;
					attach7->SetClassNameString("Effector");
					attach7->SetId(7);
#if !BEHAVIAC_RELEASE
					attach7->SetAgentType("PreconEffectorAgent");
#endif
					node4->Attach(attach7, false, true, false);
					node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach7) != 0));
				}
				pBT->AddChild(node4);
				pBT->SetHasEvents(pBT->HasEvents() | node4->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/repeat/repeat_ut_0

	class Assignment_bt_node_test_repeat_repeat_ut_0_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_repeat_repeat_ut_0_node3, Assignment);
		Assignment_bt_node_test_repeat_repeat_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class DecoratorRepeat_bt_node_test_repeat_repeat_ut_0_node0 : public DecoratorRepeat
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorRepeat_bt_node_test_repeat_repeat_ut_0_node0, DecoratorRepeat);
		DecoratorRepeat_bt_node_test_repeat_repeat_ut_0_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class Compute_bt_node_test_repeat_repeat_ut_0_node1 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_repeat_repeat_ut_0_node1, Compute);
		Compute_bt_node_test_repeat_repeat_ut_0_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class bt_node_test_repeat_repeat_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/repeat/repeat_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node2 = BEHAVIAC_NEW Sequence;
				node2->SetClassNameString("Sequence");
				node2->SetId(2);
#if !BEHAVIAC_RELEASE
				node2->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node2);
				{
					Assignment_bt_node_test_repeat_repeat_ut_0_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_repeat_repeat_ut_0_node3;
					node3->SetClassNameString("Assignment");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node2->AddChild(node3);
					node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
				}
				{
					DecoratorRepeat_bt_node_test_repeat_repeat_ut_0_node0* node0 = BEHAVIAC_NEW DecoratorRepeat_bt_node_test_repeat_repeat_ut_0_node0;
					node0->SetClassNameString("DecoratorRepeat");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node2->AddChild(node0);
					{
						Compute_bt_node_test_repeat_repeat_ut_0_node1* node1 = BEHAVIAC_NEW Compute_bt_node_test_repeat_repeat_ut_0_node1;
						node1->SetClassNameString("Compute");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					node2->SetHasEvents(node2->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node2->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_child_agent_0

	class Action_bt_node_test_action_child_agent_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_child_agent_0_node3, Action);
		Action_bt_node_test_action_child_agent_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgent, void >();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_child_agent_0_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_child_agent_0_node2, Assignment);
		Assignment_bt_node_test_action_child_agent_0_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 666;
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "par_child_agent_1");
			BEHAVIAC_ASSERT(pAgent_opl);
			((AgentNodeTest*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class Action_bt_node_test_action_child_agent_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_child_agent_0_node1, Action);
		Action_bt_node_test_action_child_agent_0_node1()
		{
			method_p0 = 999;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "par_child_agent_1");
			BEHAVIAC_ASSERT(pAgent_method);
			((AgentNodeTest*)pAgent_method)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_action_child_agent_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_child_agent_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "AgentNodeTest", "par_child_agent", "null");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_action_child_agent_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_action_child_agent_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Assignment_bt_node_test_action_child_agent_0_node2* node2 = BEHAVIAC_NEW Assignment_bt_node_test_action_child_agent_0_node2;
					node2->SetClassNameString("Assignment");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_action_child_agent_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_action_child_agent_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_noop_ut_0

	class Assignment_bt_node_test_action_noop_ut_0_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_noop_ut_0_node4, Assignment);
		Assignment_bt_node_test_action_noop_ut_0_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 2;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class bt_node_test_action_noop_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_noop_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Noop* node2 = BEHAVIAC_NEW Noop;
					node2->SetClassNameString("Noop");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Noop* node1 = BEHAVIAC_NEW Noop;
					node1->SetClassNameString("Noop");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_node_test_action_noop_ut_0_node4* node4 = BEHAVIAC_NEW Assignment_bt_node_test_action_noop_ut_0_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Noop* node3 = BEHAVIAC_NEW Noop;
					node3->SetClassNameString("Noop");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_0

	class Assignment_bt_node_test_action_ut_0_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_0_node12, Assignment);
		Assignment_bt_node_test_action_ut_0_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "par_child");
			BEHAVIAC_ASSERT(pAgent_opr);
			int opr = ((AgentNodeTest*)pAgent_opr)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class Condition_bt_node_test_action_ut_0_node13 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_0_node13, Condition);
		Condition_bt_node_test_action_ut_0_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "par_child");
			BEHAVIAC_ASSERT(pAgent_opr);
			int& opr = ((AgentNodeTest*)pAgent_opr)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_node_test_action_ut_0_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_0_node10, Assignment);
		Assignment_bt_node_test_action_ut_0_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "par_child");
			BEHAVIAC_ASSERT(pAgent_opr);
			int opr = ((AgentNodeTest*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstOne, int >();
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class Condition_bt_node_test_action_ut_0_node11 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_0_node11, Condition);
		Condition_bt_node_test_action_ut_0_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_action_ut_0_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_0_node8, Condition);
		Condition_bt_node_test_action_ut_0_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "par_child");
			BEHAVIAC_ASSERT(pAgent_opl);
			float& opl = ((AgentNodeTest*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float& opr = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_3, float >();
			bool op = Details::Greater(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_action_ut_0_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_0_node9, Action);
		Action_bt_node_test_action_ut_0_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "par_child");
			BEHAVIAC_ASSERT(pAgent_method);
			((AgentNodeTest*)pAgent_method)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >();
			return BT_SUCCESS;
		}
	};

	class Compute_bt_node_test_action_ut_0_node1 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_0_node1, Compute);
		Compute_bt_node_test_action_ut_0_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr1 = 1000;
			int opr2 = 500;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			pAgent->SetVariable("par_int_type_0", (int)(opr1 + opr2), 4028995106u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_0_node2, Action);
		Action_bt_node_test_action_ut_0_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(4028995106u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_0_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_0_node3, Assignment);
		Assignment_bt_node_test_action_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_1") == 3913197411u);
			pAgent->SetVariable("par_int_type_1", opr, 3913197411u);
			return result;
		}
	};

	class Compute_bt_node_test_action_ut_0_node4 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_0_node4, Compute);
		Compute_bt_node_test_action_ut_0_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_1") == 3913197411u);
			int& opr1 = (int&)pAgent->GetVariable<int >(3913197411u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_2") == 3256087712u);
			int& opr2 = (int&)pAgent->GetVariable<int >(3256087712u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			pAgent->SetVariable("par_int_type_0", (int)(opr1 + opr2), 4028995106u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_0_node5, Action);
		Action_bt_node_test_action_ut_0_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(4028995106u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_action_ut_0_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_0_node7, Action);
		Action_bt_node_test_action_ut_0_node7()
		{
			method_p0 = NULL;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testGameObject, void, UnityEngine::GameObject* >(method_p0);
			return BT_SUCCESS;
		}
		UnityEngine::GameObject* method_p0;
	};

	class Action_bt_node_test_action_ut_0_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_0_node6, Action);
		Action_bt_node_test_action_ut_0_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method = Agent::GetInstance(pAgent, "StaticAgent");
			BEHAVIAC_ASSERT(pAgent_method);
			((StaticAgent*)pAgent_method)->_Execute_Method_<METHOD_TYPE_StaticAgent_sAction, void >();
			return BT_SUCCESS;
		}
	};

	class bt_node_test_action_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "par_int_type_0", "0");
			pBT->AddPar("AgentNodeTest", "int", "par_int_type_1", "0");
			pBT->AddPar("AgentNodeTest", "int", "par_int_type_2", "300");
			pBT->AddPar("AgentNodeTest", "UnityEngine::GameObject", "par_go", "null");
			pBT->AddPar("AgentNodeTest", "ChildNodeTest", "par_child", "null");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_node_test_action_ut_0_node12* node12 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_0_node12;
					node12->SetClassNameString("Assignment");
					node12->SetId(12);
#if !BEHAVIAC_RELEASE
					node12->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node12);
					node0->SetHasEvents(node0->HasEvents() | node12->HasEvents());
				}
				{
					Condition_bt_node_test_action_ut_0_node13* node13 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_0_node13;
					node13->SetClassNameString("Condition");
					node13->SetId(13);
#if !BEHAVIAC_RELEASE
					node13->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node13);
					node0->SetHasEvents(node0->HasEvents() | node13->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_0_node10* node10 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_0_node10;
					node10->SetClassNameString("Assignment");
					node10->SetId(10);
#if !BEHAVIAC_RELEASE
					node10->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node10);
					node0->SetHasEvents(node0->HasEvents() | node10->HasEvents());
				}
				{
					Condition_bt_node_test_action_ut_0_node11* node11 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_0_node11;
					node11->SetClassNameString("Condition");
					node11->SetId(11);
#if !BEHAVIAC_RELEASE
					node11->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node11);
					node0->SetHasEvents(node0->HasEvents() | node11->HasEvents());
				}
				{
					Condition_bt_node_test_action_ut_0_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_0_node8;
					node8->SetClassNameString("Condition");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_0_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_action_ut_0_node9;
					node9->SetClassNameString("Action");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Compute_bt_node_test_action_ut_0_node1* node1 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_0_node1;
					node1->SetClassNameString("Compute");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_action_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_0_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_0_node3;
					node3->SetClassNameString("Assignment");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Compute_bt_node_test_action_ut_0_node4* node4 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_0_node4;
					node4->SetClassNameString("Compute");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_action_ut_0_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_0_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_action_ut_0_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_0_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_action_ut_0_node6;
					node6->SetClassNameString("Action");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_1

	class Compute_bt_node_test_action_ut_1_node3 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_1_node3, Compute);
		Compute_bt_node_test_action_ut_1_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr1 = 0.5f;
			float opr2 = 1.3f;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			pAgent->SetVariable("par_float_type_0", (float)(opr1 + opr2), 569873069u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_1_node2, Action);
		Action_bt_node_test_action_ut_1_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(569873069u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_1_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_1_node1, Assignment);
		Assignment_bt_node_test_action_ut_1_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_1") == 955032556u);
			pAgent->SetVariable("par_float_type_1", opr, 955032556u);
			return result;
		}
	};

	class Compute_bt_node_test_action_ut_1_node4 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_1_node4, Compute);
		Compute_bt_node_test_action_ut_1_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_1") == 955032556u);
			float& opr1 = (float&)pAgent->GetVariable<float >(955032556u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_2") == 331477039u);
			float& opr2 = (float&)pAgent->GetVariable<float >(331477039u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			pAgent->SetVariable("par_float_type_0", (float)(opr1 + opr2), 569873069u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_1_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_1_node5, Action);
		Action_bt_node_test_action_ut_1_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(569873069u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_1_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_1_node7, Assignment);
		Assignment_bt_node_test_action_ut_1_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			UnityEngine::GameObject* opr = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createGameObject, UnityEngine::GameObject* >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_go") == 464621558u);
			pAgent->SetVariable("par_go", opr, 464621558u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_1_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_1_node6, Action);
		Action_bt_node_test_action_ut_1_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_go") == 464621558u);
			UnityEngine::GameObject*& method_p0 = (UnityEngine::GameObject*&)pAgent->GetVariable<UnityEngine::GameObject* >(464621558u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testGameObject, void, UnityEngine::GameObject* >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_1_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_1_node8, Assignment);
		Assignment_bt_node_test_action_ut_1_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TestNS::Node* opr = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_createExtendedNode, TestNS::Node* >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("local_node") == 3573395359u);
			pAgent->SetVariable("local_node", opr, 3573395359u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_1_node10 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_1_node10, Action);
		Action_bt_node_test_action_ut_1_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("local_node") == 3573395359u);
			TestNS::Node*& method_p0 = (TestNS::Node*&)pAgent->GetVariable<TestNS::Node* >(3573395359u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedRefType, void, TestNS::Node* >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_action_ut_1_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_1_node9, Action);
		Action_bt_node_test_action_ut_1_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("testFloat2") == 2452701783u);
			TestNS::Float2& method_p0 = (TestNS::Float2&)pAgent->GetVariable<TestNS::Float2 >(2452701783u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_testExtendedStruct, void, TestNS::Float2& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("testFloat2") == 2452701783u);
			pAgent->SetVariable("testFloat2", method_p0, 2452701783u);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_1_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_1_node11, Assignment);
		Assignment_bt_node_test_action_ut_1_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TestNS::Float2& opr = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getExtendedStruct, TestNS::Float2& >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ReturnFloat2") == 257770974u);
			pAgent->SetVariable("c_ReturnFloat2", opr, 257770974u);
			return result;
		}
	};

	class Assignment_bt_node_test_action_ut_1_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_1_node12, Assignment);
		Assignment_bt_node_test_action_ut_1_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			const TestNS::Float2& opr = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstExtendedStruct, const TestNS::Float2& >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ReturnFloat2Const") == 2482280992u);
			pAgent->SetVariable("c_ReturnFloat2Const", opr, 2482280992u);
			return result;
		}
	};

	class bt_node_test_action_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "UnityEngine::GameObject", "par_go", "null");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_0", "0");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_1", "0");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_2", "2.7");
			pBT->AddPar("AgentNodeTest", "TestNS::Node", "local_node", "null");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Compute_bt_node_test_action_ut_1_node3* node3 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_1_node3;
					node3->SetClassNameString("Compute");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_action_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_1_node1* node1 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_1_node1;
					node1->SetClassNameString("Assignment");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Compute_bt_node_test_action_ut_1_node4* node4 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_1_node4;
					node4->SetClassNameString("Compute");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_1_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_action_ut_1_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_1_node7* node7 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_1_node7;
					node7->SetClassNameString("Assignment");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_1_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_action_ut_1_node6;
					node6->SetClassNameString("Action");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_1_node8* node8 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_1_node8;
					node8->SetClassNameString("Assignment");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_1_node10* node10 = BEHAVIAC_NEW Action_bt_node_test_action_ut_1_node10;
					node10->SetClassNameString("Action");
					node10->SetId(10);
#if !BEHAVIAC_RELEASE
					node10->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node10);
					node0->SetHasEvents(node0->HasEvents() | node10->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_1_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_action_ut_1_node9;
					node9->SetClassNameString("Action");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_1_node11* node11 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_1_node11;
					node11->SetClassNameString("Assignment");
					node11->SetId(11);
#if !BEHAVIAC_RELEASE
					node11->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node11);
					node0->SetHasEvents(node0->HasEvents() | node11->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_1_node12* node12 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_1_node12;
					node12->SetClassNameString("Assignment");
					node12->SetId(12);
#if !BEHAVIAC_RELEASE
					node12->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node12);
					node0->SetHasEvents(node0->HasEvents() | node12->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_2

	class Assignment_bt_node_test_action_ut_2_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_2_node7, Assignment);
		Assignment_bt_node_test_action_ut_2_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 1;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			pAgent->SetVariable("par_int_type_0", opr, 4028995106u);
			return result;
		}
	};

	class Assignment_bt_node_test_action_ut_2_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_2_node6, Assignment);
		Assignment_bt_node_test_action_ut_2_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 5;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("test_int_array") == 4065205216u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& opl_index = (int&)pAgent->GetVariable<int >(4028995106u);
			((behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(4065205216u))[opl_index] = opr;
			return result;
		}
	};

	class Condition_bt_node_test_action_ut_2_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_2_node8, Condition);
		Condition_bt_node_test_action_ut_2_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("test_int_array") == 4065205216u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& opl_index = (int&)pAgent->GetVariable<int >(4028995106u);
			int& opl = ((behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(4065205216u))[opl_index];
			int opr = 5;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_action_ut_2_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_2_node9, Action);
		Action_bt_node_test_action_ut_2_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("test_int_array") == 4065205216u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& method_p0_index = (int&)pAgent->GetVariable<int >(4028995106u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(((behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(4065205216u))[method_p0_index]);
			return BT_SUCCESS;
		}
	};

	class Condition_bt_node_test_action_ut_2_node10 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_2_node10, Condition);
		Condition_bt_node_test_action_ut_2_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 5;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Compute_bt_node_test_action_ut_2_node1 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_2_node1, Compute);
		Compute_bt_node_test_action_ut_2_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr1 = 1000;
			int opr2 = 500;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			pAgent->SetVariable("par_int_type_0", (int)(opr1 * opr2), 4028995106u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_2_node2, Action);
		Action_bt_node_test_action_ut_2_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(4028995106u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_2_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_2_node3, Assignment);
		Assignment_bt_node_test_action_ut_2_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_1") == 3913197411u);
			pAgent->SetVariable("par_int_type_1", opr, 3913197411u);
			return result;
		}
	};

	class Compute_bt_node_test_action_ut_2_node4 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_2_node4, Compute);
		Compute_bt_node_test_action_ut_2_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_1") == 3913197411u);
			int& opr1 = (int&)pAgent->GetVariable<int >(3913197411u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_2") == 3256087712u);
			int& opr2 = (int&)pAgent->GetVariable<int >(3256087712u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			pAgent->SetVariable("par_int_type_0", (int)(opr1 / opr2), 4028995106u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_2_node5, Action);
		Action_bt_node_test_action_ut_2_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_int_type_0") == 4028995106u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(4028995106u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_action_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "par_int_type_0", "0");
			pBT->AddPar("AgentNodeTest", "int", "par_int_type_1", "0");
			pBT->AddPar("AgentNodeTest", "int", "par_int_type_2", "300");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_node_test_action_ut_2_node7* node7 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_2_node7;
					node7->SetClassNameString("Assignment");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_2_node6* node6 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_2_node6;
					node6->SetClassNameString("Assignment");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				{
					Condition_bt_node_test_action_ut_2_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_2_node8;
					node8->SetClassNameString("Condition");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_2_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_action_ut_2_node9;
					node9->SetClassNameString("Action");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Condition_bt_node_test_action_ut_2_node10* node10 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_2_node10;
					node10->SetClassNameString("Condition");
					node10->SetId(10);
#if !BEHAVIAC_RELEASE
					node10->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node10);
					node0->SetHasEvents(node0->HasEvents() | node10->HasEvents());
				}
				{
					Compute_bt_node_test_action_ut_2_node1* node1 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_2_node1;
					node1->SetClassNameString("Compute");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_action_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_2_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_2_node3;
					node3->SetClassNameString("Assignment");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Compute_bt_node_test_action_ut_2_node4* node4 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_2_node4;
					node4->SetClassNameString("Compute");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_action_ut_2_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_3

	class Compute_bt_node_test_action_ut_3_node3 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_3_node3, Compute);
		Compute_bt_node_test_action_ut_3_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr1 = 0.5f;
			float opr2 = 4.8f;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			pAgent->SetVariable("par_float_type_0", (float)(opr1 * opr2), 569873069u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_3_node2, Action);
		Action_bt_node_test_action_ut_3_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(569873069u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_action_ut_3_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_3_node1, Assignment);
		Assignment_bt_node_test_action_ut_3_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_1") == 955032556u);
			pAgent->SetVariable("par_float_type_1", opr, 955032556u);
			return result;
		}
	};

	class Compute_bt_node_test_action_ut_3_node4 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_action_ut_3_node4, Compute);
		Compute_bt_node_test_action_ut_3_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_1") == 955032556u);
			float& opr1 = (float&)pAgent->GetVariable<float >(955032556u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_2") == 331477039u);
			float& opr2 = (float&)pAgent->GetVariable<float >(331477039u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			pAgent->SetVariable("par_float_type_0", (float)(opr1 / opr2), 569873069u);
			return result;
		}
	};

	class Action_bt_node_test_action_ut_3_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_action_ut_3_node5, Action);
		Action_bt_node_test_action_ut_3_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_float_type_0") == 569873069u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(569873069u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_action_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_0", "0");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_1", "0");
			pBT->AddPar("AgentNodeTest", "float", "par_float_type_2", "0.6");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Compute_bt_node_test_action_ut_3_node3* node3 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_3_node3;
					node3->SetClassNameString("Compute");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_action_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_3_node1* node1 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_3_node1;
					node1->SetClassNameString("Assignment");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Compute_bt_node_test_action_ut_3_node4* node4 = BEHAVIAC_NEW Compute_bt_node_test_action_ut_3_node4;
					node4->SetClassNameString("Compute");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_action_ut_3_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_action_ut_3_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_waitforsignal_0

	class Condition_bt_node_test_action_ut_waitforsignal_0_node2 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_0_node2, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_0_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_node_test_action_ut_waitforsignal_0_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_waitforsignal_0_node3, Assignment);
		Assignment_bt_node_test_action_ut_waitforsignal_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_node_test_action_ut_waitforsignal_0_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_waitforsignal_0_node4, Assignment);
		Assignment_bt_node_test_action_ut_waitforsignal_0_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr = 2.3f;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >() = opr;
			return result;
		}
	};

	class bt_node_test_action_ut_waitforsignal_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_waitforsignal_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WaitforSignal* node1 = BEHAVIAC_NEW WaitforSignal;
					node1->SetClassNameString("WaitforSignal");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Condition_bt_node_test_action_ut_waitforsignal_0_node2* node2 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_0_node2;
						node2->SetClassNameString("Condition");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->SetCustomCondition(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_node_test_action_ut_waitforsignal_0_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_waitforsignal_0_node3;
						node3->SetClassNameString("Assignment");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_waitforsignal_0_node4* node4 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_waitforsignal_0_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_waitforsignal_1

	class Condition_bt_node_test_action_ut_waitforsignal_1_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_1_node6, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_1_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_action_ut_waitforsignal_1_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_1_node7, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_1_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_action_ut_waitforsignal_1_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_1_node8, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_1_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_node_test_action_ut_waitforsignal_1_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_waitforsignal_1_node3, Assignment);
		Assignment_bt_node_test_action_ut_waitforsignal_1_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_node_test_action_ut_waitforsignal_1_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_waitforsignal_1_node4, Assignment);
		Assignment_bt_node_test_action_ut_waitforsignal_1_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr = 2.3f;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >() = opr;
			return result;
		}
	};

	class bt_node_test_action_ut_waitforsignal_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_waitforsignal_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WaitforSignal* node1 = BEHAVIAC_NEW WaitforSignal;
					node1->SetClassNameString("WaitforSignal");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Or* node2 = BEHAVIAC_NEW Or;
						node2->SetClassNameString("Or");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->SetCustomCondition(node2);
						{
							And* node5 = BEHAVIAC_NEW And;
							node5->SetClassNameString("And");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node5);
							{
								Condition_bt_node_test_action_ut_waitforsignal_1_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_1_node6;
								node6->SetClassNameString("Condition");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("AgentNodeTest");
#endif
								node5->AddChild(node6);
								node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
							}
							{
								Condition_bt_node_test_action_ut_waitforsignal_1_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_1_node7;
								node7->SetClassNameString("Condition");
								node7->SetId(7);
#if !BEHAVIAC_RELEASE
								node7->SetAgentType("AgentNodeTest");
#endif
								node5->AddChild(node7);
								node5->SetHasEvents(node5->HasEvents() | node7->HasEvents());
							}
							node2->SetHasEvents(node2->HasEvents() | node5->HasEvents());
						}
						{
							Condition_bt_node_test_action_ut_waitforsignal_1_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_1_node8;
							node8->SetClassNameString("Condition");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node8);
							node2->SetHasEvents(node2->HasEvents() | node8->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_node_test_action_ut_waitforsignal_1_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_waitforsignal_1_node3;
						node3->SetClassNameString("Assignment");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_waitforsignal_1_node4* node4 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_waitforsignal_1_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_ut_waitforsignal_2

	class Condition_bt_node_test_action_ut_waitforsignal_2_node5 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_2_node5, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_2_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_action_ut_waitforsignal_2_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_2_node6, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_2_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_action_ut_waitforsignal_2_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_action_ut_waitforsignal_2_node7, Condition);
		Condition_bt_node_test_action_ut_waitforsignal_2_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_node_test_action_ut_waitforsignal_2_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_ut_waitforsignal_2_node4, Assignment);
		Assignment_bt_node_test_action_ut_waitforsignal_2_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr = 2.3f;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >() = opr;
			return result;
		}
	};

	class bt_node_test_action_ut_waitforsignal_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_ut_waitforsignal_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WaitforSignal* node1 = BEHAVIAC_NEW WaitforSignal;
					node1->SetClassNameString("WaitforSignal");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Or* node2 = BEHAVIAC_NEW Or;
						node2->SetClassNameString("Or");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->SetCustomCondition(node2);
						{
							And* node3 = BEHAVIAC_NEW And;
							node3->SetClassNameString("And");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node3);
							{
								Condition_bt_node_test_action_ut_waitforsignal_2_node5* node5 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_2_node5;
								node5->SetClassNameString("Condition");
								node5->SetId(5);
#if !BEHAVIAC_RELEASE
								node5->SetAgentType("AgentNodeTest");
#endif
								node3->AddChild(node5);
								node3->SetHasEvents(node3->HasEvents() | node5->HasEvents());
							}
							{
								Condition_bt_node_test_action_ut_waitforsignal_2_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_2_node6;
								node6->SetClassNameString("Condition");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("AgentNodeTest");
#endif
								node3->AddChild(node6);
								node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
							}
							node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
						}
						{
							Condition_bt_node_test_action_ut_waitforsignal_2_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_action_ut_waitforsignal_2_node7;
							node7->SetClassNameString("Condition");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node7);
							node2->SetHasEvents(node2->HasEvents() | node7->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_node_test_action_ut_waitforsignal_2_node4* node4 = BEHAVIAC_NEW Assignment_bt_node_test_action_ut_waitforsignal_2_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/action_waitframes_ut_0

	class Assignment_bt_node_test_action_waitframes_ut_0_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_waitframes_ut_0_node3, Assignment);
		Assignment_bt_node_test_action_waitframes_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class WaitFrames_bt_node_test_action_waitframes_ut_0_node1 : public WaitFrames
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(WaitFrames_bt_node_test_action_waitframes_ut_0_node1, WaitFrames);
		WaitFrames_bt_node_test_action_waitframes_ut_0_node1()
		{
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return (int&)pAgent->GetVariable<int >(4259617405u);
		}
	};

	class Assignment_bt_node_test_action_waitframes_ut_0_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_action_waitframes_ut_0_node4, Assignment);
		Assignment_bt_node_test_action_waitframes_ut_0_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 2;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class bt_node_test_action_waitframes_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/action_waitframes_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "par_frame_count", "5");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_node_test_action_waitframes_ut_0_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_action_waitframes_ut_0_node3;
					node3->SetClassNameString("Assignment");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					WaitFrames_bt_node_test_action_waitframes_ut_0_node1* node1 = BEHAVIAC_NEW WaitFrames_bt_node_test_action_waitframes_ut_0_node1;
					node1->SetClassNameString("WaitFrames");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_node_test_action_waitframes_ut_0_node4* node4 = BEHAVIAC_NEW Assignment_bt_node_test_action_waitframes_ut_0_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/circular_ut_0

	class Condition_bt_node_test_circular_ut_0_node5 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_circular_ut_0_node5, Condition);
		Condition_bt_node_test_circular_ut_0_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Assignment_bt_node_test_circular_ut_0_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_circular_ut_0_node3, Assignment);
		Assignment_bt_node_test_circular_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class ReferencedBehavior_bt_node_test_circular_ut_0_node6 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_circular_ut_0_node6, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_circular_ut_0_node6()
		{
			m_referencedBehaviorPath = "node_test/circular_ut_0";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
		}
	protected:
	};

	class Compute_bt_node_test_circular_ut_0_node1 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_circular_ut_0_node1, Compute);
		Compute_bt_node_test_circular_ut_0_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class bt_node_test_circular_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/circular_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node2 = BEHAVIAC_NEW Sequence;
					node2->SetClassNameString("Sequence");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						Condition_bt_node_test_circular_ut_0_node5* node5 = BEHAVIAC_NEW Condition_bt_node_test_circular_ut_0_node5;
						node5->SetClassNameString("Condition");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node5);
						node2->SetHasEvents(node2->HasEvents() | node5->HasEvents());
					}
					{
						Sequence* node4 = BEHAVIAC_NEW Sequence;
						node4->SetClassNameString("Sequence");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node4);
						{
							Assignment_bt_node_test_circular_ut_0_node3* node3 = BEHAVIAC_NEW Assignment_bt_node_test_circular_ut_0_node3;
							node3->SetClassNameString("Assignment");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node3);
							node4->SetHasEvents(node4->HasEvents() | node3->HasEvents());
						}
						{
							ReferencedBehavior_bt_node_test_circular_ut_0_node6* node6 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_circular_ut_0_node6;
							node6->SetClassNameString("ReferencedBehavior");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node6);
							node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
						}
						node2->SetHasEvents(node2->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Compute_bt_node_test_circular_ut_0_node1* node1 = BEHAVIAC_NEW Compute_bt_node_test_circular_ut_0_node1;
					node1->SetClassNameString("Compute");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/condition_ut_0

	class Condition_bt_node_test_condition_ut_0_node1 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_condition_ut_0_node1, Condition);
		Condition_bt_node_test_condition_ut_0_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_condition_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_0_node2, Action);
		Action_bt_node_test_condition_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Condition_bt_node_test_condition_ut_0_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_condition_ut_0_node3, Condition);
		Condition_bt_node_test_condition_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_getConstOne, int >();
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_condition_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_0_node4, Action);
		Action_bt_node_test_condition_ut_0_node4()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_condition_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/condition_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Condition_bt_node_test_condition_ut_0_node1* node1 = BEHAVIAC_NEW Condition_bt_node_test_condition_ut_0_node1;
					node1->SetClassNameString("Condition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Condition_bt_node_test_condition_ut_0_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_condition_ut_0_node3;
					node3->SetClassNameString("Condition");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_0_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/condition_ut_1

	class Condition_bt_node_test_condition_ut_1_node10 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_condition_ut_1_node10, Condition);
		Condition_bt_node_test_condition_ut_1_node10()
		{
			opr = NULL;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par_agent") == 239606442u);
			ParTestAgent*& opl = (ParTestAgent*&)pAgent->GetVariable<ParTestAgent* >(239606442u);
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
		ParTestAgent* opr;
	};

	class Action_bt_node_test_condition_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_1_node2, Action);
		Action_bt_node_test_condition_ut_1_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_condition_ut_1_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_1_node8, Action);
		Action_bt_node_test_condition_ut_1_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_condition_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/condition_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "ParTestAgent", "par_agent", "null");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Or* node9 = BEHAVIAC_NEW Or;
					node9->SetClassNameString("Or");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					{
						Condition_bt_node_test_condition_ut_1_node10* node10 = BEHAVIAC_NEW Condition_bt_node_test_condition_ut_1_node10;
						node10->SetClassNameString("Condition");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node10);
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					{
						True* node11 = BEHAVIAC_NEW True;
						node11->SetClassNameString("True");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node11);
						node9->SetHasEvents(node9->HasEvents() | node11->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Or* node1 = BEHAVIAC_NEW Or;
					node1->SetClassNameString("Or");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						True* node3 = BEHAVIAC_NEW True;
						node3->SetClassNameString("True");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					{
						False* node5 = BEHAVIAC_NEW False;
						node5->SetClassNameString("False");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Or* node4 = BEHAVIAC_NEW Or;
					node4->SetClassNameString("Or");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						False* node6 = BEHAVIAC_NEW False;
						node6->SetClassNameString("False");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node6);
						node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
					}
					{
						False* node7 = BEHAVIAC_NEW False;
						node7->SetClassNameString("False");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node7);
						node4->SetHasEvents(node4->HasEvents() | node7->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_1_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_1_node8;
					node8->SetClassNameString("Action");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/condition_ut_2

	class Action_bt_node_test_condition_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_2_node2, Action);
		Action_bt_node_test_condition_ut_2_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_condition_ut_2_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_2_node8, Action);
		Action_bt_node_test_condition_ut_2_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_condition_ut_2_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_2_node12, Action);
		Action_bt_node_test_condition_ut_2_node12()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_condition_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/condition_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					And* node9 = BEHAVIAC_NEW And;
					node9->SetClassNameString("And");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					{
						True* node10 = BEHAVIAC_NEW True;
						node10->SetClassNameString("True");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node10);
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					{
						True* node11 = BEHAVIAC_NEW True;
						node11->SetClassNameString("True");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node11);
						node9->SetHasEvents(node9->HasEvents() | node11->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					And* node1 = BEHAVIAC_NEW And;
					node1->SetClassNameString("And");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						True* node3 = BEHAVIAC_NEW True;
						node3->SetClassNameString("True");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					{
						False* node5 = BEHAVIAC_NEW False;
						node5->SetClassNameString("False");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_2_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_2_node8;
					node8->SetClassNameString("Action");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					And* node4 = BEHAVIAC_NEW And;
					node4->SetClassNameString("And");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						False* node6 = BEHAVIAC_NEW False;
						node6->SetClassNameString("False");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node6);
						node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
					}
					{
						False* node7 = BEHAVIAC_NEW False;
						node7->SetClassNameString("False");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node7);
						node4->SetHasEvents(node4->HasEvents() | node7->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_2_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_2_node12;
					node12->SetClassNameString("Action");
					node12->SetId(12);
#if !BEHAVIAC_RELEASE
					node12->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node12);
					node0->SetHasEvents(node0->HasEvents() | node12->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/condition_ut_3

	class Action_bt_node_test_condition_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_3_node2, Action);
		Action_bt_node_test_condition_ut_3_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_condition_ut_3_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_3_node8, Action);
		Action_bt_node_test_condition_ut_3_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_condition_ut_3_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_condition_ut_3_node12, Action);
		Action_bt_node_test_condition_ut_3_node12()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_condition_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/condition_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					And* node9 = BEHAVIAC_NEW And;
					node9->SetClassNameString("And");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					{
						Or* node13 = BEHAVIAC_NEW Or;
						node13->SetClassNameString("Or");
						node13->SetId(13);
#if !BEHAVIAC_RELEASE
						node13->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node13);
						{
							True* node10 = BEHAVIAC_NEW True;
							node10->SetClassNameString("True");
							node10->SetId(10);
#if !BEHAVIAC_RELEASE
							node10->SetAgentType("AgentNodeTest");
#endif
							node13->AddChild(node10);
							node13->SetHasEvents(node13->HasEvents() | node10->HasEvents());
						}
						{
							False* node14 = BEHAVIAC_NEW False;
							node14->SetClassNameString("False");
							node14->SetId(14);
#if !BEHAVIAC_RELEASE
							node14->SetAgentType("AgentNodeTest");
#endif
							node13->AddChild(node14);
							node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node13->HasEvents());
					}
					{
						True* node11 = BEHAVIAC_NEW True;
						node11->SetClassNameString("True");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node11);
						node9->SetHasEvents(node9->HasEvents() | node11->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Or* node1 = BEHAVIAC_NEW Or;
					node1->SetClassNameString("Or");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						And* node15 = BEHAVIAC_NEW And;
						node15->SetClassNameString("And");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node15);
						{
							True* node3 = BEHAVIAC_NEW True;
							node3->SetClassNameString("True");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("AgentNodeTest");
#endif
							node15->AddChild(node3);
							node15->SetHasEvents(node15->HasEvents() | node3->HasEvents());
						}
						{
							True* node16 = BEHAVIAC_NEW True;
							node16->SetClassNameString("True");
							node16->SetId(16);
#if !BEHAVIAC_RELEASE
							node16->SetAgentType("AgentNodeTest");
#endif
							node15->AddChild(node16);
							node15->SetHasEvents(node15->HasEvents() | node16->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node15->HasEvents());
					}
					{
						False* node5 = BEHAVIAC_NEW False;
						node5->SetClassNameString("False");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_3_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_3_node8;
					node8->SetClassNameString("Action");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					And* node4 = BEHAVIAC_NEW And;
					node4->SetClassNameString("And");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						Or* node18 = BEHAVIAC_NEW Or;
						node18->SetClassNameString("Or");
						node18->SetId(18);
#if !BEHAVIAC_RELEASE
						node18->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node18);
						{
							Or* node19 = BEHAVIAC_NEW Or;
							node19->SetClassNameString("Or");
							node19->SetId(19);
#if !BEHAVIAC_RELEASE
							node19->SetAgentType("AgentNodeTest");
#endif
							node18->AddChild(node19);
							{
								False* node6 = BEHAVIAC_NEW False;
								node6->SetClassNameString("False");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("AgentNodeTest");
#endif
								node19->AddChild(node6);
								node19->SetHasEvents(node19->HasEvents() | node6->HasEvents());
							}
							{
								True* node21 = BEHAVIAC_NEW True;
								node21->SetClassNameString("True");
								node21->SetId(21);
#if !BEHAVIAC_RELEASE
								node21->SetAgentType("AgentNodeTest");
#endif
								node19->AddChild(node21);
								node19->SetHasEvents(node19->HasEvents() | node21->HasEvents());
							}
							node18->SetHasEvents(node18->HasEvents() | node19->HasEvents());
						}
						{
							False* node22 = BEHAVIAC_NEW False;
							node22->SetClassNameString("False");
							node22->SetId(22);
#if !BEHAVIAC_RELEASE
							node22->SetAgentType("AgentNodeTest");
#endif
							node18->AddChild(node22);
							node18->SetHasEvents(node18->HasEvents() | node22->HasEvents());
						}
						node4->SetHasEvents(node4->HasEvents() | node18->HasEvents());
					}
					{
						And* node17 = BEHAVIAC_NEW And;
						node17->SetClassNameString("And");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node17);
						{
							True* node7 = BEHAVIAC_NEW True;
							node7->SetClassNameString("True");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node17->AddChild(node7);
							node17->SetHasEvents(node17->HasEvents() | node7->HasEvents());
						}
						{
							And* node20 = BEHAVIAC_NEW And;
							node20->SetClassNameString("And");
							node20->SetId(20);
#if !BEHAVIAC_RELEASE
							node20->SetAgentType("AgentNodeTest");
#endif
							node17->AddChild(node20);
							{
								True* node23 = BEHAVIAC_NEW True;
								node23->SetClassNameString("True");
								node23->SetId(23);
#if !BEHAVIAC_RELEASE
								node23->SetAgentType("AgentNodeTest");
#endif
								node20->AddChild(node23);
								node20->SetHasEvents(node20->HasEvents() | node23->HasEvents());
							}
							{
								True* node24 = BEHAVIAC_NEW True;
								node24->SetClassNameString("True");
								node24->SetId(24);
#if !BEHAVIAC_RELEASE
								node24->SetAgentType("AgentNodeTest");
#endif
								node20->AddChild(node24);
								node20->SetHasEvents(node20->HasEvents() | node24->HasEvents());
							}
							node17->SetHasEvents(node17->HasEvents() | node20->HasEvents());
						}
						node4->SetHasEvents(node4->HasEvents() | node17->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_condition_ut_3_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_condition_ut_3_node12;
					node12->SetClassNameString("Action");
					node12->SetId(12);
#if !BEHAVIAC_RELEASE
					node12->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node12);
					node0->SetHasEvents(node0->HasEvents() | node12->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_alwaysfailure_ut_0

	class DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node1 : public DecoratorAlwaysFailure
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node1, DecoratorAlwaysFailure);
		DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwaysfailure_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysfailure_ut_0_node5, Action);
		Action_bt_node_test_decoration_alwaysfailure_ut_0_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_alwaysfailure_ut_0_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysfailure_ut_0_node6, Action);
		Action_bt_node_test_decoration_alwaysfailure_ut_0_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node3 : public DecoratorAlwaysFailure
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node3, DecoratorAlwaysFailure);
		DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node3()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwaysfailure_ut_0_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysfailure_ut_0_node7, Action);
		Action_bt_node_test_decoration_alwaysfailure_ut_0_node7()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_alwaysfailure_ut_0_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysfailure_ut_0_node8, Action);
		Action_bt_node_test_decoration_alwaysfailure_ut_0_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node10 : public DecoratorAlwaysFailure
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node10, DecoratorAlwaysFailure);
		DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node10()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwaysfailure_ut_0_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysfailure_ut_0_node11, Action);
		Action_bt_node_test_decoration_alwaysfailure_ut_0_node11()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_RUNNING;
		}
		float method_p0;
	};

	class Action_bt_node_test_decoration_alwaysfailure_ut_0_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysfailure_ut_0_node12, Action);
		Action_bt_node_test_decoration_alwaysfailure_ut_0_node12()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_decoration_alwaysfailure_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_alwaysfailure_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Selector* node4 = BEHAVIAC_NEW Selector;
					node4->SetClassNameString("Selector");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node1;
						node1->SetClassNameString("DecoratorAlwaysFailure");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node1);
						{
							Action_bt_node_test_decoration_alwaysfailure_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysfailure_ut_0_node5;
							node5->SetClassNameString("Action");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node1->AddChild(node5);
							node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
						}
						node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwaysfailure_ut_0_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysfailure_ut_0_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node6);
						node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Selector* node2 = BEHAVIAC_NEW Selector;
					node2->SetClassNameString("Selector");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node3* node3 = BEHAVIAC_NEW DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node3;
						node3->SetClassNameString("DecoratorAlwaysFailure");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						{
							Action_bt_node_test_decoration_alwaysfailure_ut_0_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysfailure_ut_0_node7;
							node7->SetClassNameString("Action");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwaysfailure_ut_0_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysfailure_ut_0_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node8);
						node2->SetHasEvents(node2->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Selector* node9 = BEHAVIAC_NEW Selector;
					node9->SetClassNameString("Selector");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					{
						DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node10* node10 = BEHAVIAC_NEW DecoratorAlwaysFailure_bt_node_test_decoration_alwaysfailure_ut_0_node10;
						node10->SetClassNameString("DecoratorAlwaysFailure");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node10);
						{
							Action_bt_node_test_decoration_alwaysfailure_ut_0_node11* node11 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysfailure_ut_0_node11;
							node11->SetClassNameString("Action");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("AgentNodeTest");
#endif
							node10->AddChild(node11);
							node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwaysfailure_ut_0_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysfailure_ut_0_node12;
						node12->SetClassNameString("Action");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node12);
						node9->SetHasEvents(node9->HasEvents() | node12->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_alwaysrunning_ut_0

	class Parallel_bt_node_test_decoration_alwaysrunning_ut_0_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_decoration_alwaysrunning_ut_0_node0, Parallel);
		Parallel_bt_node_test_decoration_alwaysrunning_ut_0_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node1 : public DecoratorAlwaysRunning
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node1, DecoratorAlwaysRunning);
		DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwaysrunning_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysrunning_ut_0_node5, Action);
		Action_bt_node_test_decoration_alwaysrunning_ut_0_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_alwaysrunning_ut_0_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysrunning_ut_0_node6, Action);
		Action_bt_node_test_decoration_alwaysrunning_ut_0_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node3 : public DecoratorAlwaysRunning
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node3, DecoratorAlwaysRunning);
		DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node3()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwaysrunning_ut_0_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysrunning_ut_0_node7, Action);
		Action_bt_node_test_decoration_alwaysrunning_ut_0_node7()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_alwaysrunning_ut_0_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysrunning_ut_0_node8, Action);
		Action_bt_node_test_decoration_alwaysrunning_ut_0_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node10 : public DecoratorAlwaysRunning
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node10, DecoratorAlwaysRunning);
		DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node10()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwaysrunning_ut_0_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysrunning_ut_0_node11, Action);
		Action_bt_node_test_decoration_alwaysrunning_ut_0_node11()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_RUNNING;
		}
		float method_p0;
	};

	class Action_bt_node_test_decoration_alwaysrunning_ut_0_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwaysrunning_ut_0_node12, Action);
		Action_bt_node_test_decoration_alwaysrunning_ut_0_node12()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_decoration_alwaysrunning_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_alwaysrunning_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Parallel_bt_node_test_decoration_alwaysrunning_ut_0_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_decoration_alwaysrunning_ut_0_node0;
				node0->SetClassNameString("Parallel");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Selector* node4 = BEHAVIAC_NEW Selector;
					node4->SetClassNameString("Selector");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node1;
						node1->SetClassNameString("DecoratorAlwaysRunning");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node1);
						{
							Action_bt_node_test_decoration_alwaysrunning_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysrunning_ut_0_node5;
							node5->SetClassNameString("Action");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node1->AddChild(node5);
							node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
						}
						node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwaysrunning_ut_0_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysrunning_ut_0_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node6);
						node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Selector* node2 = BEHAVIAC_NEW Selector;
					node2->SetClassNameString("Selector");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node3* node3 = BEHAVIAC_NEW DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node3;
						node3->SetClassNameString("DecoratorAlwaysRunning");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						{
							Action_bt_node_test_decoration_alwaysrunning_ut_0_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysrunning_ut_0_node7;
							node7->SetClassNameString("Action");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwaysrunning_ut_0_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysrunning_ut_0_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node8);
						node2->SetHasEvents(node2->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Selector* node9 = BEHAVIAC_NEW Selector;
					node9->SetClassNameString("Selector");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					{
						DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node10* node10 = BEHAVIAC_NEW DecoratorAlwaysRunning_bt_node_test_decoration_alwaysrunning_ut_0_node10;
						node10->SetClassNameString("DecoratorAlwaysRunning");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node10);
						{
							Action_bt_node_test_decoration_alwaysrunning_ut_0_node11* node11 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysrunning_ut_0_node11;
							node11->SetClassNameString("Action");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("AgentNodeTest");
#endif
							node10->AddChild(node11);
							node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwaysrunning_ut_0_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwaysrunning_ut_0_node12;
						node12->SetClassNameString("Action");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node12);
						node9->SetHasEvents(node9->HasEvents() | node12->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_alwayssuccess_ut_0

	class DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node1 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node1, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwayssuccess_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwayssuccess_ut_0_node5, Action);
		Action_bt_node_test_decoration_alwayssuccess_ut_0_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_alwayssuccess_ut_0_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwayssuccess_ut_0_node6, Action);
		Action_bt_node_test_decoration_alwayssuccess_ut_0_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node3 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node3, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node3()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwayssuccess_ut_0_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwayssuccess_ut_0_node7, Action);
		Action_bt_node_test_decoration_alwayssuccess_ut_0_node7()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_alwayssuccess_ut_0_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwayssuccess_ut_0_node8, Action);
		Action_bt_node_test_decoration_alwayssuccess_ut_0_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node10 : public DecoratorAlwaysSuccess
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node10, DecoratorAlwaysSuccess);
		DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node10()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_alwayssuccess_ut_0_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwayssuccess_ut_0_node11, Action);
		Action_bt_node_test_decoration_alwayssuccess_ut_0_node11()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_RUNNING;
		}
		float method_p0;
	};

	class Action_bt_node_test_decoration_alwayssuccess_ut_0_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_alwayssuccess_ut_0_node12, Action);
		Action_bt_node_test_decoration_alwayssuccess_ut_0_node12()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_decoration_alwayssuccess_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_alwayssuccess_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Selector* node4 = BEHAVIAC_NEW Selector;
					node4->SetClassNameString("Selector");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node1;
						node1->SetClassNameString("DecoratorAlwaysSuccess");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node1);
						{
							Action_bt_node_test_decoration_alwayssuccess_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwayssuccess_ut_0_node5;
							node5->SetClassNameString("Action");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node1->AddChild(node5);
							node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
						}
						node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwayssuccess_ut_0_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwayssuccess_ut_0_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node6);
						node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Selector* node2 = BEHAVIAC_NEW Selector;
					node2->SetClassNameString("Selector");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node3* node3 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node3;
						node3->SetClassNameString("DecoratorAlwaysSuccess");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						{
							Action_bt_node_test_decoration_alwayssuccess_ut_0_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwayssuccess_ut_0_node7;
							node7->SetClassNameString("Action");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwayssuccess_ut_0_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwayssuccess_ut_0_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node8);
						node2->SetHasEvents(node2->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Selector* node9 = BEHAVIAC_NEW Selector;
					node9->SetClassNameString("Selector");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					{
						DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node10* node10 = BEHAVIAC_NEW DecoratorAlwaysSuccess_bt_node_test_decoration_alwayssuccess_ut_0_node10;
						node10->SetClassNameString("DecoratorAlwaysSuccess");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node10);
						{
							Action_bt_node_test_decoration_alwayssuccess_ut_0_node11* node11 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwayssuccess_ut_0_node11;
							node11->SetClassNameString("Action");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("AgentNodeTest");
#endif
							node10->AddChild(node11);
							node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					{
						Action_bt_node_test_decoration_alwayssuccess_ut_0_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_decoration_alwayssuccess_ut_0_node12;
						node12->SetClassNameString("Action");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node12);
						node9->SetHasEvents(node9->HasEvents() | node12->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_countlimit_ut_0

	class DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_0_node1 : public DecoratorCountLimit
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_0_node1, DecoratorCountLimit);
		DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class Action_bt_node_test_decoration_countlimit_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_0_node2, Action);
		Action_bt_node_test_decoration_countlimit_ut_0_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_countlimit_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_0_node3, Action);
		Action_bt_node_test_decoration_countlimit_ut_0_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_countlimit_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_countlimit_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_0_node1;
					node1->SetClassNameString("DecoratorCountLimit");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Action_bt_node_test_decoration_countlimit_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_0_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_countlimit_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_countlimit_ut_1

	class DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_1_node1 : public DecoratorCountLimit
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_1_node1, DecoratorCountLimit);
		DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_1_node1()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class Condition_bt_node_test_decoration_countlimit_ut_1_node4 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_decoration_countlimit_ut_1_node4, Condition);
		Condition_bt_node_test_decoration_countlimit_ut_1_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_decoration_countlimit_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_1_node2, Action);
		Action_bt_node_test_decoration_countlimit_ut_1_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_countlimit_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_1_node3, Action);
		Action_bt_node_test_decoration_countlimit_ut_1_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_countlimit_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_countlimit_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_1_node1* node1 = BEHAVIAC_NEW DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_1_node1;
					node1->SetClassNameString("DecoratorCountLimit");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Condition_bt_node_test_decoration_countlimit_ut_1_node4* node4 = BEHAVIAC_NEW Condition_bt_node_test_decoration_countlimit_ut_1_node4;
						node4->SetClassNameString("Condition");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->SetCustomCondition(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_decoration_countlimit_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_1_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_countlimit_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_1_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_countlimit_ut_2

	class DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_2_node1 : public DecoratorCountLimit
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_2_node1, DecoratorCountLimit);
		DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_2_node1()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class Condition_bt_node_test_decoration_countlimit_ut_2_node5 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_decoration_countlimit_ut_2_node5, Condition);
		Condition_bt_node_test_decoration_countlimit_ut_2_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_decoration_countlimit_ut_2_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_decoration_countlimit_ut_2_node6, Condition);
		Condition_bt_node_test_decoration_countlimit_ut_2_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_decoration_countlimit_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_2_node2, Action);
		Action_bt_node_test_decoration_countlimit_ut_2_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_countlimit_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_2_node3, Action);
		Action_bt_node_test_decoration_countlimit_ut_2_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_countlimit_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_countlimit_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_2_node1* node1 = BEHAVIAC_NEW DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_2_node1;
					node1->SetClassNameString("DecoratorCountLimit");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						And* node4 = BEHAVIAC_NEW And;
						node4->SetClassNameString("And");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->SetCustomCondition(node4);
						{
							Condition_bt_node_test_decoration_countlimit_ut_2_node5* node5 = BEHAVIAC_NEW Condition_bt_node_test_decoration_countlimit_ut_2_node5;
							node5->SetClassNameString("Condition");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node5);
							node4->SetHasEvents(node4->HasEvents() | node5->HasEvents());
						}
						{
							Condition_bt_node_test_decoration_countlimit_ut_2_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_decoration_countlimit_ut_2_node6;
							node6->SetClassNameString("Condition");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node6);
							node4->SetHasEvents(node4->HasEvents() | node6->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_decoration_countlimit_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_2_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_countlimit_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_2_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_countlimit_ut_3

	class DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_3_node1 : public DecoratorCountLimit
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_3_node1, DecoratorCountLimit);
		DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_3_node1()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class Condition_bt_node_test_decoration_countlimit_ut_3_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_decoration_countlimit_ut_3_node6, Condition);
		Condition_bt_node_test_decoration_countlimit_ut_3_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_decoration_countlimit_ut_3_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_decoration_countlimit_ut_3_node7, Condition);
		Condition_bt_node_test_decoration_countlimit_ut_3_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_decoration_countlimit_ut_3_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_decoration_countlimit_ut_3_node8, Condition);
		Condition_bt_node_test_decoration_countlimit_ut_3_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_3, float >();
			float opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_decoration_countlimit_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_3_node2, Action);
		Action_bt_node_test_decoration_countlimit_ut_3_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_countlimit_ut_3_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_countlimit_ut_3_node3, Action);
		Action_bt_node_test_decoration_countlimit_ut_3_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_countlimit_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_countlimit_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_3_node1* node1 = BEHAVIAC_NEW DecoratorCountLimit_bt_node_test_decoration_countlimit_ut_3_node1;
					node1->SetClassNameString("DecoratorCountLimit");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Or* node4 = BEHAVIAC_NEW Or;
						node4->SetClassNameString("Or");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->SetCustomCondition(node4);
						{
							And* node5 = BEHAVIAC_NEW And;
							node5->SetClassNameString("And");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node5);
							{
								Condition_bt_node_test_decoration_countlimit_ut_3_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_decoration_countlimit_ut_3_node6;
								node6->SetClassNameString("Condition");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("AgentNodeTest");
#endif
								node5->AddChild(node6);
								node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
							}
							{
								Condition_bt_node_test_decoration_countlimit_ut_3_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_decoration_countlimit_ut_3_node7;
								node7->SetClassNameString("Condition");
								node7->SetId(7);
#if !BEHAVIAC_RELEASE
								node7->SetAgentType("AgentNodeTest");
#endif
								node5->AddChild(node7);
								node5->SetHasEvents(node5->HasEvents() | node7->HasEvents());
							}
							node4->SetHasEvents(node4->HasEvents() | node5->HasEvents());
						}
						{
							Condition_bt_node_test_decoration_countlimit_ut_3_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_decoration_countlimit_ut_3_node8;
							node8->SetClassNameString("Condition");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node8);
							node4->SetHasEvents(node4->HasEvents() | node8->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_decoration_countlimit_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_3_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_countlimit_ut_3_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_countlimit_ut_3_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_failureuntil_ut_0

	class DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_0_node0 : public DecoratorFailureUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_0_node0, DecoratorFailureUntil);
		DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_0_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class bt_node_test_decoration_failureuntil_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_failureuntil_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_0_node0* node0 = BEHAVIAC_NEW DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_0_node0;
				node0->SetClassNameString("DecoratorFailureUntil");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					True* node1 = BEHAVIAC_NEW True;
					node1->SetClassNameString("True");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_failureuntil_ut_1

	class DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_1_node0 : public DecoratorFailureUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_1_node0, DecoratorFailureUntil);
		DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_1_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class bt_node_test_decoration_failureuntil_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_failureuntil_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_1_node0* node0 = BEHAVIAC_NEW DecoratorFailureUntil_bt_node_test_decoration_failureuntil_ut_1_node0;
				node0->SetClassNameString("DecoratorFailureUntil");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					True* node1 = BEHAVIAC_NEW True;
					node1->SetClassNameString("True");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_frames_ut_0

	class DecoratorFrames_bt_node_test_decoration_frames_ut_0_node1 : public DecoratorFrames
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorFrames_bt_node_test_decoration_frames_ut_0_node1, DecoratorFrames);
		DecoratorFrames_bt_node_test_decoration_frames_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 100;
		}
	};

	class Action_bt_node_test_decoration_frames_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_frames_ut_0_node2, Action);
		Action_bt_node_test_decoration_frames_ut_0_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_frames_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_frames_ut_0_node3, Action);
		Action_bt_node_test_decoration_frames_ut_0_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_frames_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_frames_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorFrames_bt_node_test_decoration_frames_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorFrames_bt_node_test_decoration_frames_ut_0_node1;
					node1->SetClassNameString("DecoratorFrames");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Action_bt_node_test_decoration_frames_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_frames_ut_0_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_frames_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_frames_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_log_ut_0

	class DecoratorLog_bt_node_test_decoration_log_ut_0_node1 : public DecoratorLog
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLog_bt_node_test_decoration_log_ut_0_node1, DecoratorLog);
		DecoratorLog_bt_node_test_decoration_log_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
			m_message = "This is a log node message 0! Child status is SUCCESS.";
		}
	protected:
	};

	class Action_bt_node_test_decoration_log_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_log_ut_0_node2, Action);
		Action_bt_node_test_decoration_log_ut_0_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_log_ut_0_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_log_ut_0_node8, Action);
		Action_bt_node_test_decoration_log_ut_0_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorLog_bt_node_test_decoration_log_ut_0_node3 : public DecoratorLog
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLog_bt_node_test_decoration_log_ut_0_node3, DecoratorLog);
		DecoratorLog_bt_node_test_decoration_log_ut_0_node3()
		{
			m_bDecorateWhenChildEnds = false;
			m_message = "This is a log node message 1! Child status is FAILURE.";
		}
	protected:
	};

	class Action_bt_node_test_decoration_log_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_log_ut_0_node4, Action);
		Action_bt_node_test_decoration_log_ut_0_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_log_ut_0_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_log_ut_0_node9, Action);
		Action_bt_node_test_decoration_log_ut_0_node9()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorLog_bt_node_test_decoration_log_ut_0_node10 : public DecoratorLog
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLog_bt_node_test_decoration_log_ut_0_node10, DecoratorLog);
		DecoratorLog_bt_node_test_decoration_log_ut_0_node10()
		{
			m_bDecorateWhenChildEnds = false;
			m_message = "This is a log node message 1! Child status is RUNNING.";
		}
	protected:
	};

	class Action_bt_node_test_decoration_log_ut_0_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_log_ut_0_node12, Action);
		Action_bt_node_test_decoration_log_ut_0_node12()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_RUNNING;
		}
		float method_p0;
	};

	class Action_bt_node_test_decoration_log_ut_0_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_log_ut_0_node11, Action);
		Action_bt_node_test_decoration_log_ut_0_node11()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_decoration_log_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_log_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Selector* node5 = BEHAVIAC_NEW Selector;
					node5->SetClassNameString("Selector");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					{
						DecoratorLog_bt_node_test_decoration_log_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorLog_bt_node_test_decoration_log_ut_0_node1;
						node1->SetClassNameString("DecoratorLog");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node5->AddChild(node1);
						{
							Action_bt_node_test_decoration_log_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_log_ut_0_node2;
							node2->SetClassNameString("Action");
							node2->SetId(2);
#if !BEHAVIAC_RELEASE
							node2->SetAgentType("AgentNodeTest");
#endif
							node1->AddChild(node2);
							node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
						}
						node5->SetHasEvents(node5->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_decoration_log_ut_0_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_decoration_log_ut_0_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node5->AddChild(node8);
						node5->SetHasEvents(node5->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Selector* node6 = BEHAVIAC_NEW Selector;
					node6->SetClassNameString("Selector");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						DecoratorLog_bt_node_test_decoration_log_ut_0_node3* node3 = BEHAVIAC_NEW DecoratorLog_bt_node_test_decoration_log_ut_0_node3;
						node3->SetClassNameString("DecoratorLog");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						{
							Action_bt_node_test_decoration_log_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_decoration_log_ut_0_node4;
							node4->SetClassNameString("Action");
							node4->SetId(4);
#if !BEHAVIAC_RELEASE
							node4->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node4);
							node3->SetHasEvents(node3->HasEvents() | node4->HasEvents());
						}
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_decoration_log_ut_0_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_decoration_log_ut_0_node9;
						node9->SetClassNameString("Action");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node9);
						node6->SetHasEvents(node6->HasEvents() | node9->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				{
					Selector* node7 = BEHAVIAC_NEW Selector;
					node7->SetClassNameString("Selector");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					{
						DecoratorLog_bt_node_test_decoration_log_ut_0_node10* node10 = BEHAVIAC_NEW DecoratorLog_bt_node_test_decoration_log_ut_0_node10;
						node10->SetClassNameString("DecoratorLog");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node7->AddChild(node10);
						{
							Action_bt_node_test_decoration_log_ut_0_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_decoration_log_ut_0_node12;
							node12->SetClassNameString("Action");
							node12->SetId(12);
#if !BEHAVIAC_RELEASE
							node12->SetAgentType("AgentNodeTest");
#endif
							node10->AddChild(node12);
							node10->SetHasEvents(node10->HasEvents() | node12->HasEvents());
						}
						node7->SetHasEvents(node7->HasEvents() | node10->HasEvents());
					}
					{
						Action_bt_node_test_decoration_log_ut_0_node11* node11 = BEHAVIAC_NEW Action_bt_node_test_decoration_log_ut_0_node11;
						node11->SetClassNameString("Action");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("AgentNodeTest");
#endif
						node7->AddChild(node11);
						node7->SetHasEvents(node7->HasEvents() | node11->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_loopuntil_ut_0

	class Action_bt_node_test_decoration_loopuntil_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loopuntil_ut_0_node4, Action);
		Action_bt_node_test_decoration_loopuntil_ut_0_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_0_node1 : public DecoratorLoopUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_0_node1, DecoratorLoopUntil);
		DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = true;
			m_until = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class DecoratorLoop_bt_node_test_decoration_loopuntil_ut_0_node2 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_decoration_loopuntil_ut_0_node2, DecoratorLoop);
		DecoratorLoop_bt_node_test_decoration_loopuntil_ut_0_node2()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 100;
		}
	};

	class Action_bt_node_test_decoration_loopuntil_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loopuntil_ut_0_node3, Action);
		Action_bt_node_test_decoration_loopuntil_ut_0_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_loopuntil_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_loopuntil_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_decoration_loopuntil_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_decoration_loopuntil_ut_0_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_0_node1;
					node1->SetClassNameString("DecoratorLoopUntil");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						DecoratorLoop_bt_node_test_decoration_loopuntil_ut_0_node2* node2 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_decoration_loopuntil_ut_0_node2;
						node2->SetClassNameString("DecoratorLoop");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						{
							True* node5 = BEHAVIAC_NEW True;
							node5->SetClassNameString("True");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node5);
							node2->SetHasEvents(node2->HasEvents() | node5->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_loopuntil_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_loopuntil_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_loopuntil_ut_1

	class Action_bt_node_test_decoration_loopuntil_ut_1_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loopuntil_ut_1_node4, Action);
		Action_bt_node_test_decoration_loopuntil_ut_1_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_1_node1 : public DecoratorLoopUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_1_node1, DecoratorLoopUntil);
		DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_1_node1()
		{
			m_bDecorateWhenChildEnds = true;
			m_until = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class DecoratorLoop_bt_node_test_decoration_loopuntil_ut_1_node2 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_decoration_loopuntil_ut_1_node2, DecoratorLoop);
		DecoratorLoop_bt_node_test_decoration_loopuntil_ut_1_node2()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 10;
		}
	};

	class Action_bt_node_test_decoration_loopuntil_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loopuntil_ut_1_node3, Action);
		Action_bt_node_test_decoration_loopuntil_ut_1_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_loopuntil_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_loopuntil_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_decoration_loopuntil_ut_1_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_decoration_loopuntil_ut_1_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_1_node1* node1 = BEHAVIAC_NEW DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_1_node1;
					node1->SetClassNameString("DecoratorLoopUntil");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						DecoratorLoop_bt_node_test_decoration_loopuntil_ut_1_node2* node2 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_decoration_loopuntil_ut_1_node2;
						node2->SetClassNameString("DecoratorLoop");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						{
							True* node5 = BEHAVIAC_NEW True;
							node5->SetClassNameString("True");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node5);
							node2->SetHasEvents(node2->HasEvents() | node5->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_loopuntil_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_loopuntil_ut_1_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_loopuntil_ut_2

	class Action_bt_node_test_decoration_loopuntil_ut_2_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loopuntil_ut_2_node4, Action);
		Action_bt_node_test_decoration_loopuntil_ut_2_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_2_node1 : public DecoratorLoopUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_2_node1, DecoratorLoopUntil);
		DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_2_node1()
		{
			m_bDecorateWhenChildEnds = true;
			m_until = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 50;
		}
	};

	class DecoratorAlwaysFailure_bt_node_test_decoration_loopuntil_ut_2_node6 : public DecoratorAlwaysFailure
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorAlwaysFailure_bt_node_test_decoration_loopuntil_ut_2_node6, DecoratorAlwaysFailure);
		DecoratorAlwaysFailure_bt_node_test_decoration_loopuntil_ut_2_node6()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_loopuntil_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loopuntil_ut_2_node3, Action);
		Action_bt_node_test_decoration_loopuntil_ut_2_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_loopuntil_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_loopuntil_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_decoration_loopuntil_ut_2_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_decoration_loopuntil_ut_2_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_2_node1* node1 = BEHAVIAC_NEW DecoratorLoopUntil_bt_node_test_decoration_loopuntil_ut_2_node1;
					node1->SetClassNameString("DecoratorLoopUntil");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						DecoratorAlwaysFailure_bt_node_test_decoration_loopuntil_ut_2_node6* node6 = BEHAVIAC_NEW DecoratorAlwaysFailure_bt_node_test_decoration_loopuntil_ut_2_node6;
						node6->SetClassNameString("DecoratorAlwaysFailure");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node6);
						{
							True* node5 = BEHAVIAC_NEW True;
							node5->SetClassNameString("True");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node6->AddChild(node5);
							node6->SetHasEvents(node6->HasEvents() | node5->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_loopuntil_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_loopuntil_ut_2_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_loop_ut_0

	class DecoratorLoop_bt_node_test_decoration_loop_ut_0_node0 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_decoration_loop_ut_0_node0, DecoratorLoop);
		DecoratorLoop_bt_node_test_decoration_loop_ut_0_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Action_bt_node_test_decoration_loop_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loop_ut_0_node3, Action);
		Action_bt_node_test_decoration_loop_ut_0_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_loop_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loop_ut_0_node2, Action);
		Action_bt_node_test_decoration_loop_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_loop_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_loop_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					DecoratorLoop_bt_node_test_decoration_loop_ut_0_node0* node0 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_decoration_loop_ut_0_node0;
					node0->SetClassNameString("DecoratorLoop");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_decoration_loop_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_loop_ut_0_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_decoration_loop_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_loop_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_loop_ut_1

	class DecoratorLoop_bt_node_test_decoration_loop_ut_1_node0 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_decoration_loop_ut_1_node0, DecoratorLoop);
		DecoratorLoop_bt_node_test_decoration_loop_ut_1_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 500;
		}
	};

	class Action_bt_node_test_decoration_loop_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loop_ut_1_node3, Action);
		Action_bt_node_test_decoration_loop_ut_1_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_loop_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_loop_ut_1_node2, Action);
		Action_bt_node_test_decoration_loop_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_loop_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_loop_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					DecoratorLoop_bt_node_test_decoration_loop_ut_1_node0* node0 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_decoration_loop_ut_1_node0;
					node0->SetClassNameString("DecoratorLoop");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_decoration_loop_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_loop_ut_1_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_decoration_loop_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_loop_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_not_ut_0

	class DecoratorNot_bt_node_test_decoration_not_ut_0_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_decoration_not_ut_0_node1, DecoratorNot);
		DecoratorNot_bt_node_test_decoration_not_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_not_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_not_ut_0_node2, Action);
		Action_bt_node_test_decoration_not_ut_0_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_not_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_not_ut_0_node3, Action);
		Action_bt_node_test_decoration_not_ut_0_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_not_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_not_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_decoration_not_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_decoration_not_ut_0_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Action_bt_node_test_decoration_not_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_not_ut_0_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_not_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_not_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_not_ut_1

	class DecoratorNot_bt_node_test_decoration_not_ut_1_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_decoration_not_ut_1_node1, DecoratorNot);
		DecoratorNot_bt_node_test_decoration_not_ut_1_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_not_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_not_ut_1_node2, Action);
		Action_bt_node_test_decoration_not_ut_1_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_not_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_not_ut_1_node3, Action);
		Action_bt_node_test_decoration_not_ut_1_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_not_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_not_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_decoration_not_ut_1_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_decoration_not_ut_1_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Action_bt_node_test_decoration_not_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_not_ut_1_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_not_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_not_ut_1_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_not_ut_2

	class DecoratorNot_bt_node_test_decoration_not_ut_2_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_decoration_not_ut_2_node1, DecoratorNot);
		DecoratorNot_bt_node_test_decoration_not_ut_2_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Action_bt_node_test_decoration_not_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_not_ut_2_node2, Action);
		Action_bt_node_test_decoration_not_ut_2_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Action_bt_node_test_decoration_not_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_decoration_not_ut_2_node3, Action);
		Action_bt_node_test_decoration_not_ut_2_node3()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_decoration_not_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_not_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_decoration_not_ut_2_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_decoration_not_ut_2_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Action_bt_node_test_decoration_not_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_decoration_not_ut_2_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_decoration_not_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_decoration_not_ut_2_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_successuntil_ut_0

	class DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_0_node0 : public DecoratorSuccessUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_0_node0, DecoratorSuccessUntil);
		DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_0_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class bt_node_test_decoration_successuntil_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_successuntil_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_0_node0* node0 = BEHAVIAC_NEW DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_0_node0;
				node0->SetClassNameString("DecoratorSuccessUntil");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					False* node1 = BEHAVIAC_NEW False;
					node1->SetClassNameString("False");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/decoration_successuntil_ut_1

	class DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_1_node0 : public DecoratorSuccessUntil
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_1_node0, DecoratorSuccessUntil);
		DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_1_node0()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class bt_node_test_decoration_successuntil_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/decoration_successuntil_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_1_node0* node0 = BEHAVIAC_NEW DecoratorSuccessUntil_bt_node_test_decoration_successuntil_ut_1_node0;
				node0->SetClassNameString("DecoratorSuccessUntil");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					False* node1 = BEHAVIAC_NEW False;
					node1->SetClassNameString("False");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/enter_exit_action_ut_0

	class Precondition_bt_node_test_enter_exit_action_ut_0_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_0_attach1, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_0_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_enter_exit_action_ut_0_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_0_attach2, Effector);
		Effector_bt_node_test_enter_exit_action_ut_0_attach2()
		{
			opl_p0 = 0;
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1, void, float >(opl_p0);
			return result;
		}
		float opl_p0;
	};

	class Precondition_bt_node_test_enter_exit_action_ut_0_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_0_attach3, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_0_attach3()
		{
			opl_p0 = 0;
			opl_p1 = (char*)("enter_test");
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2, bool, int, string >(opl_p0, opl_p1);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Effector_bt_node_test_enter_exit_action_ut_0_attach4 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_0_attach4, Effector);
		Effector_bt_node_test_enter_exit_action_ut_0_attach4()
		{
			opl_p0 = 0;
			opl_p1 = (char*)("exit_test");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Condition_bt_node_test_enter_exit_action_ut_0_node5 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_enter_exit_action_ut_0_node5, Condition);
		Condition_bt_node_test_enter_exit_action_ut_0_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class bt_node_test_enter_exit_action_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/enter_exit_action_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_enter_exit_action_ut_0_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_0_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_enter_exit_action_ut_0_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_0_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					Selector* node6 = BEHAVIAC_NEW Selector;
					node6->SetClassNameString("Selector");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_enter_exit_action_ut_0_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_0_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("AgentNodeTest");
#endif
						node6->Attach(attach3, true, false, false);
						node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					{
						Effector_bt_node_test_enter_exit_action_ut_0_attach4* attach4 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_0_attach4;
						attach4->SetClassNameString("Effector");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("AgentNodeTest");
#endif
						node6->Attach(attach4, false, true, false);
						node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					node0->AddChild(node6);
					{
						WaitforSignal* node7 = BEHAVIAC_NEW WaitforSignal;
						node7->SetClassNameString("WaitforSignal");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node7);
						{
							Condition_bt_node_test_enter_exit_action_ut_0_node5* node5 = BEHAVIAC_NEW Condition_bt_node_test_enter_exit_action_ut_0_node5;
							node5->SetClassNameString("Condition");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node7->SetCustomCondition(node5);
							node7->SetHasEvents(node7->HasEvents() | node5->HasEvents());
						}
						node6->SetHasEvents(node6->HasEvents() | node7->HasEvents());
					}
					{
						True* node8 = BEHAVIAC_NEW True;
						node8->SetClassNameString("True");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node8);
						node6->SetHasEvents(node6->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				{
					True* node9 = BEHAVIAC_NEW True;
					node9->SetClassNameString("True");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node9);
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/enter_exit_action_ut_1

	class Parallel_bt_node_test_enter_exit_action_ut_1_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_enter_exit_action_ut_1_node0, Parallel);
		Parallel_bt_node_test_enter_exit_action_ut_1_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Precondition_bt_node_test_enter_exit_action_ut_1_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_1_attach1, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_1_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_enter_exit_action_ut_1_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_1_attach2, Effector);
		Effector_bt_node_test_enter_exit_action_ut_1_attach2()
		{
			opl_p0 = 0;
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1, void, float >(opl_p0);
			return result;
		}
		float opl_p0;
	};

	class Precondition_bt_node_test_enter_exit_action_ut_1_attach4 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_1_attach4, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_1_attach4()
		{
			opl_p0 = 3;
			opl_p1 = (char*)("hello");
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2, bool, int, string >(opl_p0, opl_p1);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Effector_bt_node_test_enter_exit_action_ut_1_attach5 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_1_attach5, Effector);
		Effector_bt_node_test_enter_exit_action_ut_1_attach5()
		{
			opl_p0 = 5;
			opl_p1 = (char*)("world");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Condition_bt_node_test_enter_exit_action_ut_1_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_enter_exit_action_ut_1_node6, Condition);
		Condition_bt_node_test_enter_exit_action_ut_1_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class bt_node_test_enter_exit_action_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/enter_exit_action_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Parallel_bt_node_test_enter_exit_action_ut_1_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_enter_exit_action_ut_1_node0;
				node0->SetClassNameString("Parallel");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_enter_exit_action_ut_1_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_1_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_enter_exit_action_ut_1_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_1_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					WaitforSignal* node3 = BEHAVIAC_NEW WaitforSignal;
					node3->SetClassNameString("WaitforSignal");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_enter_exit_action_ut_1_attach4* attach4 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_1_attach4;
						attach4->SetClassNameString("Precondition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("AgentNodeTest");
#endif
						node3->Attach(attach4, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					{
						Effector_bt_node_test_enter_exit_action_ut_1_attach5* attach5 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_1_attach5;
						attach5->SetClassNameString("Effector");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("AgentNodeTest");
#endif
						node3->Attach(attach5, false, true, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					node0->AddChild(node3);
					{
						Condition_bt_node_test_enter_exit_action_ut_1_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_enter_exit_action_ut_1_node6;
						node6->SetClassNameString("Condition");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node3->SetCustomCondition(node6);
						node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					True* node7 = BEHAVIAC_NEW True;
					node7->SetClassNameString("True");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/enter_exit_action_ut_2

	class Parallel_bt_node_test_enter_exit_action_ut_2_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_enter_exit_action_ut_2_node0, Parallel);
		Parallel_bt_node_test_enter_exit_action_ut_2_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Precondition_bt_node_test_enter_exit_action_ut_2_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_2_attach1, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_2_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_enter_exit_action_ut_2_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_2_attach2, Effector);
		Effector_bt_node_test_enter_exit_action_ut_2_attach2()
		{
			opl_p0 = 0;
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_1, void, float >(opl_p0);
			return result;
		}
		float opl_p0;
	};

	class Precondition_bt_node_test_enter_exit_action_ut_2_attach4 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_2_attach4, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_2_attach4()
		{
			opl_p0 = 3;
			opl_p1 = (char*)("hello");
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_2, bool, int, string >(opl_p0, opl_p1);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Effector_bt_node_test_enter_exit_action_ut_2_attach5 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_2_attach5, Effector);
		Effector_bt_node_test_enter_exit_action_ut_2_attach5()
		{
			opl_p0 = 5;
			opl_p1 = (char*)("world");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Condition_bt_node_test_enter_exit_action_ut_2_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_enter_exit_action_ut_2_node8, Condition);
		Condition_bt_node_test_enter_exit_action_ut_2_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_enter_exit_action_ut_2_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_enter_exit_action_ut_2_node9, Action);
		Action_bt_node_test_enter_exit_action_ut_2_node9()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_3, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class Precondition_bt_node_test_enter_exit_action_ut_2_attach6 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_enter_exit_action_ut_2_attach6, Precondition);
		Precondition_bt_node_test_enter_exit_action_ut_2_attach6()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_0, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Effector_bt_node_test_enter_exit_action_ut_2_attach7 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_enter_exit_action_ut_2_attach7, Effector);
		Effector_bt_node_test_enter_exit_action_ut_2_attach7()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_0, void >();
			return result;
		}
	};

	class bt_node_test_enter_exit_action_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/enter_exit_action_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Parallel_bt_node_test_enter_exit_action_ut_2_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_enter_exit_action_ut_2_node0;
				node0->SetClassNameString("Parallel");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_enter_exit_action_ut_2_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_2_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_enter_exit_action_ut_2_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_2_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					WaitforSignal* node3 = BEHAVIAC_NEW WaitforSignal;
					node3->SetClassNameString("WaitforSignal");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_enter_exit_action_ut_2_attach4* attach4 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_2_attach4;
						attach4->SetClassNameString("Precondition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("AgentNodeTest");
#endif
						node3->Attach(attach4, true, false, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					{
						Effector_bt_node_test_enter_exit_action_ut_2_attach5* attach5 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_2_attach5;
						attach5->SetClassNameString("Effector");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("AgentNodeTest");
#endif
						node3->Attach(attach5, false, true, false);
						node3->SetHasEvents(node3->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					node0->AddChild(node3);
					{
						Condition_bt_node_test_enter_exit_action_ut_2_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_enter_exit_action_ut_2_node8;
						node8->SetClassNameString("Condition");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node3->SetCustomCondition(node8);
						node3->SetHasEvents(node3->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_node_test_enter_exit_action_ut_2_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_enter_exit_action_ut_2_node9;
					node9->SetClassNameString("Action");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_enter_exit_action_ut_2_attach6* attach6 = BEHAVIAC_NEW Precondition_bt_node_test_enter_exit_action_ut_2_attach6;
						attach6->SetClassNameString("Precondition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("AgentNodeTest");
#endif
						node9->Attach(attach6, true, false, false);
						node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					{
						Effector_bt_node_test_enter_exit_action_ut_2_attach7* attach7 = BEHAVIAC_NEW Effector_bt_node_test_enter_exit_action_ut_2_attach7;
						attach7->SetClassNameString("Effector");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("AgentNodeTest");
#endif
						node9->Attach(attach7, false, true, false);
						node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					node0->AddChild(node9);
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_subtree_0

	class Task_bt_node_test_event_subtree_0_node6 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_event_subtree_0_node6, Task);
		Task_bt_node_test_event_subtree_0_node6()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::event_test_void()");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Action_bt_node_test_event_subtree_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_0_node2, Action);
		Action_bt_node_test_event_subtree_0_node2()
		{
			method_p0 = true;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool, void, bool >(method_p0);
			return BT_SUCCESS;
		}
		bool method_p0;
	};

	class bt_node_test_event_subtree_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_subtree_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Task_bt_node_test_event_subtree_0_node6* node6 = BEHAVIAC_NEW Task_bt_node_test_event_subtree_0_node6;
				node6->SetClassNameString("Task");
				node6->SetId(6);
#if !BEHAVIAC_RELEASE
				node6->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node6);
				{
					Sequence* node0 = BEHAVIAC_NEW Sequence;
					node0->SetClassNameString("Sequence");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node6->AddChild(node0);
					{
						True* node1 = BEHAVIAC_NEW True;
						node1->SetClassNameString("True");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_event_subtree_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_0_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					node6->SetHasEvents(node6->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node6->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_subtree_1

	class Task_bt_node_test_event_subtree_1_node6 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_event_subtree_1_node6, Task);
		Task_bt_node_test_event_subtree_1_node6()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::event_test_int(0)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Action_bt_node_test_event_subtree_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_1_node2, Action);
		Action_bt_node_test_event_subtree_1_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_event_subtree_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_subtree_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "_$local_task_param_$_0", "0");
			// children
			{
				Task_bt_node_test_event_subtree_1_node6* node6 = BEHAVIAC_NEW Task_bt_node_test_event_subtree_1_node6;
				node6->SetClassNameString("Task");
				node6->SetId(6);
#if !BEHAVIAC_RELEASE
				node6->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node6);
				{
					Sequence* node0 = BEHAVIAC_NEW Sequence;
					node0->SetClassNameString("Sequence");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node6->AddChild(node0);
					{
						True* node1 = BEHAVIAC_NEW True;
						node1->SetClassNameString("True");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_event_subtree_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_1_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					node6->SetHasEvents(node6->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node6->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_subtree_2

	class Task_bt_node_test_event_subtree_2_node6 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_event_subtree_2_node6, Task);
		Task_bt_node_test_event_subtree_2_node6()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::event_test_int_bool(0,false)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Action_bt_node_test_event_subtree_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_2_node1, Action);
		Action_bt_node_test_event_subtree_2_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_event_subtree_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_2_node2, Action);
		Action_bt_node_test_event_subtree_2_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			bool& method_p0 = (bool&)pAgent->GetVariable<bool >(1859309333u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool, void, bool >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_event_subtree_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_subtree_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "_$local_task_param_$_0", "0");
			pBT->AddPar("AgentNodeTest", "bool", "_$local_task_param_$_1", "false");
			// children
			{
				Task_bt_node_test_event_subtree_2_node6* node6 = BEHAVIAC_NEW Task_bt_node_test_event_subtree_2_node6;
				node6->SetClassNameString("Task");
				node6->SetId(6);
#if !BEHAVIAC_RELEASE
				node6->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node6);
				{
					Sequence* node0 = BEHAVIAC_NEW Sequence;
					node0->SetClassNameString("Sequence");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node6->AddChild(node0);
					{
						Action_bt_node_test_event_subtree_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_2_node1;
						node1->SetClassNameString("Action");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_event_subtree_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_2_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					node6->SetHasEvents(node6->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node6->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_subtree_3

	class Task_bt_node_test_event_subtree_3_node7 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_event_subtree_3_node7, Task);
		Task_bt_node_test_event_subtree_3_node7()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::event_test_int_bool_float(0,false,0)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Action_bt_node_test_event_subtree_3_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_3_node1, Action);
		Action_bt_node_test_event_subtree_3_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(2009726548u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarInt, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_event_subtree_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_3_node2, Action);
		Action_bt_node_test_event_subtree_3_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			bool& method_p0 = (bool&)pAgent->GetVariable<bool >(1859309333u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarBool, void, bool >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_node_test_event_subtree_3_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_3_node4, Action);
		Action_bt_node_test_event_subtree_3_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_2") == 1174379734u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(1174379734u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarFloat, void, float >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_event_subtree_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_subtree_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "_$local_task_param_$_0", "0");
			pBT->AddPar("AgentNodeTest", "bool", "_$local_task_param_$_1", "false");
			pBT->AddPar("AgentNodeTest", "float", "_$local_task_param_$_2", "0");
			// children
			{
				Task_bt_node_test_event_subtree_3_node7* node7 = BEHAVIAC_NEW Task_bt_node_test_event_subtree_3_node7;
				node7->SetClassNameString("Task");
				node7->SetId(7);
#if !BEHAVIAC_RELEASE
				node7->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node7);
				{
					Sequence* node0 = BEHAVIAC_NEW Sequence;
					node0->SetClassNameString("Sequence");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node7->AddChild(node0);
					{
						Action_bt_node_test_event_subtree_3_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_3_node1;
						node1->SetClassNameString("Action");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						Action_bt_node_test_event_subtree_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_3_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					{
						Action_bt_node_test_event_subtree_3_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_3_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					node7->SetHasEvents(node7->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node7->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_subtree_4

	class Task_bt_node_test_event_subtree_4_node0 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_event_subtree_4_node0, Task);
		Task_bt_node_test_event_subtree_4_node0()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::event_test_agent(null)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Action_bt_node_test_event_subtree_4_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_subtree_4_node2, Action);
		Action_bt_node_test_event_subtree_4_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			AgentNodeTest*& method_p0 = (AgentNodeTest*&)pAgent->GetVariable<AgentNodeTest* >(2009726548u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setEventVarAgent, void, AgentNodeTest* >(method_p0);
			return BT_SUCCESS;
		}
	};

	class bt_node_test_event_subtree_4
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_subtree_4");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "AgentNodeTest", "_$local_task_param_$_0", "null");
			// children
			{
				Task_bt_node_test_event_subtree_4_node0* node0 = BEHAVIAC_NEW Task_bt_node_test_event_subtree_4_node0;
				node0->SetClassNameString("Task");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						Action_bt_node_test_event_subtree_4_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_event_subtree_4_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_ut_0

	class Event_bt_node_test_event_ut_0_attach1 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_node_test_event_ut_0_attach1, Event);
		Event_bt_node_test_event_ut_0_attach1()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = Action::LoadMethod(eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Event_bt_node_test_event_ut_0_attach2 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_node_test_event_ut_0_attach2, Event);
		Event_bt_node_test_event_ut_0_attach2()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = Action::LoadMethod(eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Event_bt_node_test_event_ut_0_attach3 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_node_test_event_ut_0_attach3, Event);
		Event_bt_node_test_event_ut_0_attach3()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = Action::LoadMethod(eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Event_bt_node_test_event_ut_0_attach4 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_node_test_event_ut_0_attach4, Event);
		Event_bt_node_test_event_ut_0_attach4()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = Action::LoadMethod(eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Event_bt_node_test_event_ut_0_attach8 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_node_test_event_ut_0_attach8, Event);
		Event_bt_node_test_event_ut_0_attach8()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = Action::LoadMethod(eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Condition_bt_node_test_event_ut_0_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_event_ut_0_node6, Condition);
		Condition_bt_node_test_event_ut_0_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_event_ut_0_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_ut_0_node7, Action);
		Action_bt_node_test_event_ut_0_node7()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_event_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Event_bt_node_test_event_ut_0_attach1* attach1 = BEHAVIAC_NEW Event_bt_node_test_event_ut_0_attach1;
					attach1->SetClassNameString("Event");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					attach1->Initialize("Self.AgentNodeTest::event_test_void()", "node_test/event_subtree_0", TM_Return, false);
					node0->Attach(attach1, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Event_bt_node_test_event_ut_0_attach2* attach2 = BEHAVIAC_NEW Event_bt_node_test_event_ut_0_attach2;
					attach2->SetClassNameString("Event");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					attach2->Initialize("Self.AgentNodeTest::event_test_int(0)", "node_test/event_subtree_1", TM_Return, false);
					node0->Attach(attach2, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				{
					Event_bt_node_test_event_ut_0_attach3* attach3 = BEHAVIAC_NEW Event_bt_node_test_event_ut_0_attach3;
					attach3->SetClassNameString("Event");
					attach3->SetId(3);
#if !BEHAVIAC_RELEASE
					attach3->SetAgentType("AgentNodeTest");
#endif
					attach3->Initialize("Self.AgentNodeTest::event_test_int_bool(0,false)", "node_test/event_subtree_2", TM_Return, false);
					node0->Attach(attach3, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach3) != 0));
				}
				{
					Event_bt_node_test_event_ut_0_attach4* attach4 = BEHAVIAC_NEW Event_bt_node_test_event_ut_0_attach4;
					attach4->SetClassNameString("Event");
					attach4->SetId(4);
#if !BEHAVIAC_RELEASE
					attach4->SetAgentType("AgentNodeTest");
#endif
					attach4->Initialize("Self.AgentNodeTest::event_test_int_bool_float(0,false,0)", "node_test/event_subtree_3", TM_Return, false);
					node0->Attach(attach4, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach4) != 0));
				}
				{
					Event_bt_node_test_event_ut_0_attach8* attach8 = BEHAVIAC_NEW Event_bt_node_test_event_ut_0_attach8;
					attach8->SetClassNameString("Event");
					attach8->SetId(8);
#if !BEHAVIAC_RELEASE
					attach8->SetAgentType("AgentNodeTest");
#endif
					attach8->Initialize("Self.AgentNodeTest::event_test_agent(null)", "node_test/event_subtree_4", TM_Transfer, false);
					node0->Attach(attach8, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach8) != 0));
				}
				pBT->AddChild(node0);
				{
					WaitforSignal* node5 = BEHAVIAC_NEW WaitforSignal;
					node5->SetClassNameString("WaitforSignal");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					{
						Condition_bt_node_test_event_ut_0_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_event_ut_0_node6;
						node6->SetClassNameString("Condition");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node5->SetCustomCondition(node6);
						node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_event_ut_0_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_event_ut_0_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_ut_1

	class ReferencedBehavior_bt_node_test_event_ut_1_node2 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_event_ut_1_node2, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_event_ut_1_node2()
		{
			m_referencedBehaviorPath = "node_test/event_ut_0";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
		}
	protected:
	};

	class Action_bt_node_test_event_ut_1_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_ut_1_node7, Action);
		Action_bt_node_test_event_ut_1_node7()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_event_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					ReferencedBehavior_bt_node_test_event_ut_1_node2* node2 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_event_ut_1_node2;
					node2->SetClassNameString("ReferencedBehavior");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_event_ut_1_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_event_ut_1_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/event_ut_2

	class Event_bt_node_test_event_ut_2_attach1 : public Event
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Event_bt_node_test_event_ut_2_attach1, Event);
		Event_bt_node_test_event_ut_2_attach1()
		{
		}
	public:
		void Initialize(const char* eventName, const char* referencedBehavior, TriggerMode mode, bool once)
		{
			this->m_event = Action::LoadMethod(eventName);
			this->m_referencedBehaviorPath = referencedBehavior;
			this->m_triggerMode = mode;
			this->m_bTriggeredOnce = once;
		}
	};

	class Condition_bt_node_test_event_ut_2_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_event_ut_2_node6, Condition);
		Condition_bt_node_test_event_ut_2_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_event_ut_2_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_event_ut_2_node7, Action);
		Action_bt_node_test_event_ut_2_node7()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_event_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/event_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("ChildNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("ChildNodeTest");
#endif
				// attachments
				{
					Event_bt_node_test_event_ut_2_attach1* attach1 = BEHAVIAC_NEW Event_bt_node_test_event_ut_2_attach1;
					attach1->SetClassNameString("Event");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("ChildNodeTest");
#endif
					attach1->Initialize("Self.AgentNodeTest::event_test_int_bool(0,false)", "node_test/event_subtree_2", TM_Transfer, false);
					node0->Attach(attach1, false, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				pBT->AddChild(node0);
				{
					WaitforSignal* node5 = BEHAVIAC_NEW WaitforSignal;
					node5->SetClassNameString("WaitforSignal");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("ChildNodeTest");
#endif
					node0->AddChild(node5);
					{
						Condition_bt_node_test_event_ut_2_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_event_ut_2_node6;
						node6->SetClassNameString("Condition");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("ChildNodeTest");
#endif
						node5->SetCustomCondition(node6);
						node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_event_ut_2_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_event_ut_2_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("ChildNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/frames_ut_0

	class DecoratorFrames_bt_node_test_frames_ut_0_node23 : public DecoratorFrames
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorFrames_bt_node_test_frames_ut_0_node23, DecoratorFrames);
		DecoratorFrames_bt_node_test_frames_ut_0_node23()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetFrames(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 5;
		}
	};

	class Action_bt_node_test_frames_ut_0_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_frames_ut_0_node16, Action);
		Action_bt_node_test_frames_ut_0_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_frames_ut_0_node21 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_frames_ut_0_node21, Assignment);
		Assignment_bt_node_test_frames_ut_0_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class Action_bt_node_test_frames_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_frames_ut_0_node5, Action);
		Action_bt_node_test_frames_ut_0_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_frames_ut_0_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_frames_ut_0_attach7, Precondition);
		Precondition_bt_node_test_frames_ut_0_attach7()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class Assignment_bt_node_test_frames_ut_0_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_frames_ut_0_node0, Assignment);
		Assignment_bt_node_test_frames_ut_0_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 2;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_node_test_frames_ut_0_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_frames_ut_0_node2, Assignment);
		Assignment_bt_node_test_frames_ut_0_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 3;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class bt_node_test_frames_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/frames_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					DecoratorFrames_bt_node_test_frames_ut_0_node23* node23 = BEHAVIAC_NEW DecoratorFrames_bt_node_test_frames_ut_0_node23;
					node23->SetClassNameString("DecoratorFrames");
					node23->SetId(23);
#if !BEHAVIAC_RELEASE
					node23->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node23);
					{
						Sequence* node15 = BEHAVIAC_NEW Sequence;
						node15->SetClassNameString("Sequence");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("AgentNodeTest");
#endif
						node23->AddChild(node15);
						{
							Action_bt_node_test_frames_ut_0_node16* node16 = BEHAVIAC_NEW Action_bt_node_test_frames_ut_0_node16;
							node16->SetClassNameString("Action");
							node16->SetId(16);
#if !BEHAVIAC_RELEASE
							node16->SetAgentType("AgentNodeTest");
#endif
							node15->AddChild(node16);
							node15->SetHasEvents(node15->HasEvents() | node16->HasEvents());
						}
						{
							Assignment_bt_node_test_frames_ut_0_node21* node21 = BEHAVIAC_NEW Assignment_bt_node_test_frames_ut_0_node21;
							node21->SetClassNameString("Assignment");
							node21->SetId(21);
#if !BEHAVIAC_RELEASE
							node21->SetAgentType("AgentNodeTest");
#endif
							node15->AddChild(node21);
							node15->SetHasEvents(node15->HasEvents() | node21->HasEvents());
						}
						{
							Action_bt_node_test_frames_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_frames_ut_0_node5;
							node5->SetClassNameString("Action");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_frames_ut_0_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_node_test_frames_ut_0_attach7;
								attach7->SetClassNameString("Precondition");
								attach7->SetId(7);
#if !BEHAVIAC_RELEASE
								attach7->SetAgentType("AgentNodeTest");
#endif
								node5->Attach(attach7, true, false, false);
								node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach7) != 0));
							}
							node15->AddChild(node5);
							node15->SetHasEvents(node15->HasEvents() | node5->HasEvents());
						}
						{
							Assignment_bt_node_test_frames_ut_0_node0* node0 = BEHAVIAC_NEW Assignment_bt_node_test_frames_ut_0_node0;
							node0->SetClassNameString("Assignment");
							node0->SetId(0);
#if !BEHAVIAC_RELEASE
							node0->SetAgentType("AgentNodeTest");
#endif
							node15->AddChild(node0);
							node15->SetHasEvents(node15->HasEvents() | node0->HasEvents());
						}
						node23->SetHasEvents(node23->HasEvents() | node15->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node23->HasEvents());
				}
				{
					Assignment_bt_node_test_frames_ut_0_node2* node2 = BEHAVIAC_NEW Assignment_bt_node_test_frames_ut_0_node2;
					node2->SetClassNameString("Assignment");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/if_else_ut_0

	class Action_bt_node_test_if_else_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_if_else_ut_0_node2, Action);
		Action_bt_node_test_if_else_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_if_else_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_if_else_ut_0_node3, Action);
		Action_bt_node_test_if_else_ut_0_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_if_else_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/if_else_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				IfElse* node0 = BEHAVIAC_NEW IfElse;
				node0->SetClassNameString("IfElse");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					True* node1 = BEHAVIAC_NEW True;
					node1->SetClassNameString("True");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_if_else_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_if_else_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_if_else_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_if_else_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/if_else_ut_1

	class Action_bt_node_test_if_else_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_if_else_ut_1_node2, Action);
		Action_bt_node_test_if_else_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_if_else_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_if_else_ut_1_node3, Action);
		Action_bt_node_test_if_else_ut_1_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_if_else_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/if_else_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				IfElse* node0 = BEHAVIAC_NEW IfElse;
				node0->SetClassNameString("IfElse");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					False* node1 = BEHAVIAC_NEW False;
					node1->SetClassNameString("False");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_if_else_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_if_else_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_if_else_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_if_else_ut_1_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/parallel_ut_0

	class Parallel_bt_node_test_parallel_ut_0_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_parallel_ut_0_node0, Parallel);
		Parallel_bt_node_test_parallel_ut_0_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_parallel_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_0_node3, Action);
		Action_bt_node_test_parallel_ut_0_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_0_node4, Action);
		Action_bt_node_test_parallel_ut_0_node4()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_0_node5, Action);
		Action_bt_node_test_parallel_ut_0_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_0_node2, Action);
		Action_bt_node_test_parallel_ut_0_node2()
		{
			method_p0 = 3;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_parallel_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/parallel_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					Parallel_bt_node_test_parallel_ut_0_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_parallel_ut_0_node0;
					node0->SetClassNameString("Parallel");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_parallel_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_0_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_0_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_0_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node5);
						node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_parallel_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/parallel_ut_1

	class Parallel_bt_node_test_parallel_ut_1_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_parallel_ut_1_node0, Parallel);
		Parallel_bt_node_test_parallel_ut_1_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_parallel_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_1_node3, Action);
		Action_bt_node_test_parallel_ut_1_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_1_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_1_node4, Action);
		Action_bt_node_test_parallel_ut_1_node4()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_1_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_1_node5, Action);
		Action_bt_node_test_parallel_ut_1_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_1_node2, Action);
		Action_bt_node_test_parallel_ut_1_node2()
		{
			method_p0 = 3;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_parallel_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/parallel_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					Parallel_bt_node_test_parallel_ut_1_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_parallel_ut_1_node0;
					node0->SetClassNameString("Parallel");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_parallel_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_1_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_1_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_1_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_1_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_1_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node5);
						node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_parallel_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/parallel_ut_2

	class Parallel_bt_node_test_parallel_ut_2_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_parallel_ut_2_node0, Parallel);
		Parallel_bt_node_test_parallel_ut_2_node0()
		{
			m_failPolicy = FAIL_ON_ALL;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_parallel_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_2_node3, Action);
		Action_bt_node_test_parallel_ut_2_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_2_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_2_node4, Action);
		Action_bt_node_test_parallel_ut_2_node4()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_2_node5, Action);
		Action_bt_node_test_parallel_ut_2_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_2_node2, Action);
		Action_bt_node_test_parallel_ut_2_node2()
		{
			method_p0 = 3;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_parallel_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/parallel_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					Parallel_bt_node_test_parallel_ut_2_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_parallel_ut_2_node0;
					node0->SetClassNameString("Parallel");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_parallel_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_2_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_2_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_2_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_2_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node5);
						node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_parallel_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/parallel_ut_3

	class Parallel_bt_node_test_parallel_ut_3_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_parallel_ut_3_node0, Parallel);
		Parallel_bt_node_test_parallel_ut_3_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_ONCE;
		}
	protected:
	};

	class Action_bt_node_test_parallel_ut_3_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_3_node3, Action);
		Action_bt_node_test_parallel_ut_3_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_3_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_3_node4, Action);
		Action_bt_node_test_parallel_ut_3_node4()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_3_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_3_node5, Action);
		Action_bt_node_test_parallel_ut_3_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_3_node2, Action);
		Action_bt_node_test_parallel_ut_3_node2()
		{
			method_p0 = 3;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_parallel_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/parallel_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					Parallel_bt_node_test_parallel_ut_3_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_parallel_ut_3_node0;
					node0->SetClassNameString("Parallel");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_parallel_ut_3_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_3_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_3_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_3_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_3_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_3_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node5);
						node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_parallel_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/parallel_ut_4

	class Parallel_bt_node_test_parallel_ut_4_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_node_test_parallel_ut_4_node0, Parallel);
		Parallel_bt_node_test_parallel_ut_4_node0()
		{
			m_failPolicy = FAIL_ON_ONE;
			m_succeedPolicy = SUCCEED_ON_ALL;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_node_test_parallel_ut_4_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_4_node3, Action);
		Action_bt_node_test_parallel_ut_4_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_4_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_4_node4, Action);
		Action_bt_node_test_parallel_ut_4_node4()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_4_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_4_node5, Action);
		Action_bt_node_test_parallel_ut_4_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_parallel_ut_4_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_parallel_ut_4_node2, Action);
		Action_bt_node_test_parallel_ut_4_node2()
		{
			method_p0 = 3;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_parallel_ut_4
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/parallel_ut_4");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node1 = BEHAVIAC_NEW Sequence;
				node1->SetClassNameString("Sequence");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				{
					Parallel_bt_node_test_parallel_ut_4_node0* node0 = BEHAVIAC_NEW Parallel_bt_node_test_parallel_ut_4_node0;
					node0->SetClassNameString("Parallel");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node0);
					{
						Action_bt_node_test_parallel_ut_4_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_4_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_4_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_4_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_parallel_ut_4_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_4_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node5);
						node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
					}
					node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
				}
				{
					Action_bt_node_test_parallel_ut_4_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_parallel_ut_4_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node1->AddChild(node2);
					node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_action_ut_0

	class Action_bt_node_test_predicate_action_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_0_node1, Action);
		Action_bt_node_test_predicate_action_ut_0_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_0_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_0_attach2, Precondition);
		Precondition_bt_node_test_predicate_action_ut_0_attach2()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Action_bt_node_test_predicate_action_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_0_node4, Action);
		Action_bt_node_test_predicate_action_ut_0_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_0_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_0_attach3, Precondition);
		Precondition_bt_node_test_predicate_action_ut_0_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_node_test_predicate_action_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_action_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_predicate_action_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_predicate_action_ut_0_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_0_attach2;
						attach2->SetClassNameString("Precondition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach2, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_action_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_0_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_predicate_action_ut_0_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_0_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("AgentNodeTest");
#endif
						node4->Attach(attach3, true, false, false);
						node4->SetHasEvents(node4->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_action_ut_1

	class Action_bt_node_test_predicate_action_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_1_node1, Action);
		Action_bt_node_test_predicate_action_ut_1_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_1_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_1_attach2, Precondition);
		Precondition_bt_node_test_predicate_action_ut_1_attach2()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_predicate_action_ut_1_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_1_attach3, Precondition);
		Precondition_bt_node_test_predicate_action_ut_1_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(false);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Action_bt_node_test_predicate_action_ut_1_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_1_node6, Action);
		Action_bt_node_test_predicate_action_ut_1_node6()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_1_attach4 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_1_attach4, Precondition);
		Precondition_bt_node_test_predicate_action_ut_1_attach4()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_predicate_action_ut_1_attach5 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_1_attach5, Precondition);
		Precondition_bt_node_test_predicate_action_ut_1_attach5()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_node_test_predicate_action_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_action_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_predicate_action_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_predicate_action_ut_1_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_1_attach2;
						attach2->SetClassNameString("Precondition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach2, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					{
						Precondition_bt_node_test_predicate_action_ut_1_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_1_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach3, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_action_ut_1_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_1_node6;
					node6->SetClassNameString("Action");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_predicate_action_ut_1_attach4* attach4 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_1_attach4;
						attach4->SetClassNameString("Precondition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("AgentNodeTest");
#endif
						node6->Attach(attach4, true, false, false);
						node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					{
						Precondition_bt_node_test_predicate_action_ut_1_attach5* attach5 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_1_attach5;
						attach5->SetClassNameString("Precondition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("AgentNodeTest");
#endif
						node6->Attach(attach5, true, false, false);
						node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					node0->AddChild(node6);
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_action_ut_2

	class Action_bt_node_test_predicate_action_ut_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_2_node1, Action);
		Action_bt_node_test_predicate_action_ut_2_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_2_attach2 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_2_attach2, Precondition);
		Precondition_bt_node_test_predicate_action_ut_2_attach2()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_predicate_action_ut_2_attach3 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_2_attach3, Precondition);
		Precondition_bt_node_test_predicate_action_ut_2_attach3()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(false);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_predicate_action_ut_2_attach4 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_2_attach4, Precondition);
		Precondition_bt_node_test_predicate_action_ut_2_attach4()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Action_bt_node_test_predicate_action_ut_2_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_2_node8, Action);
		Action_bt_node_test_predicate_action_ut_2_node8()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_2_attach5 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_2_attach5, Precondition);
		Precondition_bt_node_test_predicate_action_ut_2_attach5()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 0;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_predicate_action_ut_2_attach6 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_2_attach6, Precondition);
		Precondition_bt_node_test_predicate_action_ut_2_attach6()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_predicate_action_ut_2_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_2_attach7, Precondition);
		Precondition_bt_node_test_predicate_action_ut_2_attach7()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_node_test_predicate_action_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_action_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_predicate_action_ut_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_2_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_predicate_action_ut_2_attach2* attach2 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_2_attach2;
						attach2->SetClassNameString("Precondition");
						attach2->SetId(2);
#if !BEHAVIAC_RELEASE
						attach2->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach2, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach2) != 0));
					}
					{
						Precondition_bt_node_test_predicate_action_ut_2_attach3* attach3 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_2_attach3;
						attach3->SetClassNameString("Precondition");
						attach3->SetId(3);
#if !BEHAVIAC_RELEASE
						attach3->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach3, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach3) != 0));
					}
					{
						Precondition_bt_node_test_predicate_action_ut_2_attach4* attach4 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_2_attach4;
						attach4->SetClassNameString("Precondition");
						attach4->SetId(4);
#if !BEHAVIAC_RELEASE
						attach4->SetAgentType("AgentNodeTest");
#endif
						node1->Attach(attach4, true, false, false);
						node1->SetHasEvents(node1->HasEvents() | (Event::DynamicCast(attach4) != 0));
					}
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_action_ut_2_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_2_node8;
					node8->SetClassNameString("Action");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("AgentNodeTest");
#endif
					// attachments
					{
						Precondition_bt_node_test_predicate_action_ut_2_attach5* attach5 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_2_attach5;
						attach5->SetClassNameString("Precondition");
						attach5->SetId(5);
#if !BEHAVIAC_RELEASE
						attach5->SetAgentType("AgentNodeTest");
#endif
						node8->Attach(attach5, true, false, false);
						node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach5) != 0));
					}
					{
						Precondition_bt_node_test_predicate_action_ut_2_attach6* attach6 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_2_attach6;
						attach6->SetClassNameString("Precondition");
						attach6->SetId(6);
#if !BEHAVIAC_RELEASE
						attach6->SetAgentType("AgentNodeTest");
#endif
						node8->Attach(attach6, true, false, false);
						node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach6) != 0));
					}
					{
						Precondition_bt_node_test_predicate_action_ut_2_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_2_attach7;
						attach7->SetClassNameString("Precondition");
						attach7->SetId(7);
#if !BEHAVIAC_RELEASE
						attach7->SetAgentType("AgentNodeTest");
#endif
						node8->Attach(attach7, true, false, false);
						node8->SetHasEvents(node8->HasEvents() | (Event::DynamicCast(attach7) != 0));
					}
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_action_ut_3

	class Action_bt_node_test_predicate_action_ut_3_node0 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_action_ut_3_node0, Action);
		Action_bt_node_test_predicate_action_ut_3_node0()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Precondition_bt_node_test_predicate_action_ut_3_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_predicate_action_ut_3_attach1, Precondition);
		Precondition_bt_node_test_predicate_action_ut_3_attach1()
		{
			this->SetPhase(Precondition::E_BOTH);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = -1;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class bt_node_test_predicate_action_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_action_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Action_bt_node_test_predicate_action_ut_3_node0* node0 = BEHAVIAC_NEW Action_bt_node_test_predicate_action_ut_3_node0;
				node0->SetClassNameString("Action");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_predicate_action_ut_3_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_predicate_action_ut_3_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				pBT->AddChild(node0);
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_selector_ut_0

	class DecoratorNot_bt_node_test_predicate_selector_ut_0_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_selector_ut_0_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_selector_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_selector_ut_0_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_0_node3, Condition);
		Condition_bt_node_test_predicate_selector_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_selector_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_0_node2, Action);
		Action_bt_node_test_predicate_selector_ut_0_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_0_node4, Action);
		Action_bt_node_test_predicate_selector_ut_0_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_0_node5, Action);
		Action_bt_node_test_predicate_selector_ut_0_node5()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_predicate_selector_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_selector_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_selector_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_selector_ut_0_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Condition_bt_node_test_predicate_selector_ut_0_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_0_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_0_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_0_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_selector_ut_1

	class DecoratorNot_bt_node_test_predicate_selector_ut_1_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_selector_ut_1_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_selector_ut_1_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_selector_ut_1_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_1_node3, Condition);
		Condition_bt_node_test_predicate_selector_ut_1_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_selector_ut_1_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_1_node4, Action);
		Action_bt_node_test_predicate_selector_ut_1_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_1_node2, Action);
		Action_bt_node_test_predicate_selector_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_1_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_1_node5, Action);
		Action_bt_node_test_predicate_selector_ut_1_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_predicate_selector_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_selector_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_selector_ut_1_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_selector_ut_1_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Condition_bt_node_test_predicate_selector_ut_1_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_1_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_1_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_1_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_1_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_1_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_selector_ut_2

	class DecoratorNot_bt_node_test_predicate_selector_ut_2_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_selector_ut_2_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_selector_ut_2_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_selector_ut_2_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_2_node3, Condition);
		Condition_bt_node_test_predicate_selector_ut_2_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_selector_ut_2_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_2_node4, Action);
		Action_bt_node_test_predicate_selector_ut_2_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_2_node2, Action);
		Action_bt_node_test_predicate_selector_ut_2_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_FAILURE;
		}
		float method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_2_node5, Action);
		Action_bt_node_test_predicate_selector_ut_2_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_predicate_selector_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_selector_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_selector_ut_2_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_selector_ut_2_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Condition_bt_node_test_predicate_selector_ut_2_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_2_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_2_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_2_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_2_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_selector_ut_3

	class DecoratorNot_bt_node_test_predicate_selector_ut_3_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_selector_ut_3_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_selector_ut_3_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_selector_ut_3_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_3_node6, Condition);
		Condition_bt_node_test_predicate_selector_ut_3_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_selector_ut_3_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_3_node7, Condition);
		Condition_bt_node_test_predicate_selector_ut_3_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_selector_ut_3_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_3_node5, Action);
		Action_bt_node_test_predicate_selector_ut_3_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_3_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_3_node4, Action);
		Action_bt_node_test_predicate_selector_ut_3_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_3_node2, Action);
		Action_bt_node_test_predicate_selector_ut_3_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_predicate_selector_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_selector_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_selector_ut_3_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_selector_ut_3_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Sequence* node3 = BEHAVIAC_NEW Sequence;
						node3->SetClassNameString("Sequence");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						{
							Condition_bt_node_test_predicate_selector_ut_3_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_3_node6;
							node6->SetClassNameString("Condition");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node6);
							node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
						}
						{
							Condition_bt_node_test_predicate_selector_ut_3_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_3_node7;
							node7->SetClassNameString("Condition");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_3_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_3_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_3_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_3_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_selector_ut_4

	class DecoratorNot_bt_node_test_predicate_selector_ut_4_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_selector_ut_4_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_selector_ut_4_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_selector_ut_4_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_4_node6, Condition);
		Condition_bt_node_test_predicate_selector_ut_4_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_selector_ut_4_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_4_node7, Condition);
		Condition_bt_node_test_predicate_selector_ut_4_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_selector_ut_4_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_4_node5, Action);
		Action_bt_node_test_predicate_selector_ut_4_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_4_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_4_node4, Action);
		Action_bt_node_test_predicate_selector_ut_4_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_4_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_4_node2, Action);
		Action_bt_node_test_predicate_selector_ut_4_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_predicate_selector_ut_4
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_selector_ut_4");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_selector_ut_4_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_selector_ut_4_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Selector* node3 = BEHAVIAC_NEW Selector;
						node3->SetClassNameString("Selector");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						{
							Condition_bt_node_test_predicate_selector_ut_4_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_4_node6;
							node6->SetClassNameString("Condition");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node6);
							node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
						}
						{
							Condition_bt_node_test_predicate_selector_ut_4_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_4_node7;
							node7->SetClassNameString("Condition");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_4_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_4_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_4_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_4_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_4_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_4_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_selector_ut_5

	class DecoratorNot_bt_node_test_predicate_selector_ut_5_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_selector_ut_5_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_selector_ut_5_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_selector_ut_5_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_5_node8, Condition);
		Condition_bt_node_test_predicate_selector_ut_5_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_selector_ut_5_node9 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_5_node9, Condition);
		Condition_bt_node_test_predicate_selector_ut_5_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_selector_ut_5_node10 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_selector_ut_5_node10, Condition);
		Condition_bt_node_test_predicate_selector_ut_5_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_selector_ut_5_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_5_node5, Action);
		Action_bt_node_test_predicate_selector_ut_5_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_5_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_5_node4, Action);
		Action_bt_node_test_predicate_selector_ut_5_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_5_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_5_node2, Action);
		Action_bt_node_test_predicate_selector_ut_5_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_FAILURE;
		}
		float method_p0;
	};

	class Action_bt_node_test_predicate_selector_ut_5_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_selector_ut_5_node7, Action);
		Action_bt_node_test_predicate_selector_ut_5_node7()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_predicate_selector_ut_5
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_selector_ut_5");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_selector_ut_5_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_selector_ut_5_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Selector* node3 = BEHAVIAC_NEW Selector;
						node3->SetClassNameString("Selector");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						{
							Sequence* node6 = BEHAVIAC_NEW Sequence;
							node6->SetClassNameString("Sequence");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node6);
							{
								Condition_bt_node_test_predicate_selector_ut_5_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_5_node8;
								node8->SetClassNameString("Condition");
								node8->SetId(8);
#if !BEHAVIAC_RELEASE
								node8->SetAgentType("AgentNodeTest");
#endif
								node6->AddChild(node8);
								node6->SetHasEvents(node6->HasEvents() | node8->HasEvents());
							}
							{
								Condition_bt_node_test_predicate_selector_ut_5_node9* node9 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_5_node9;
								node9->SetClassNameString("Condition");
								node9->SetId(9);
#if !BEHAVIAC_RELEASE
								node9->SetAgentType("AgentNodeTest");
#endif
								node6->AddChild(node9);
								node6->SetHasEvents(node6->HasEvents() | node9->HasEvents());
							}
							node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
						}
						{
							Condition_bt_node_test_predicate_selector_ut_5_node10* node10 = BEHAVIAC_NEW Condition_bt_node_test_predicate_selector_ut_5_node10;
							node10->SetClassNameString("Condition");
							node10->SetId(10);
#if !BEHAVIAC_RELEASE
							node10->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node10);
							node3->SetHasEvents(node3->HasEvents() | node10->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_5_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_5_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_5_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_5_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_5_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_5_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_selector_ut_5_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_predicate_selector_ut_5_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_sequence_ut_0

	class DecoratorNot_bt_node_test_predicate_sequence_ut_0_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_sequence_ut_0_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_sequence_ut_0_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_sequence_ut_0_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_0_node3, Condition);
		Condition_bt_node_test_predicate_sequence_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_sequence_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_0_node2, Action);
		Action_bt_node_test_predicate_sequence_ut_0_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_0_node4, Action);
		Action_bt_node_test_predicate_sequence_ut_0_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_0_node5, Action);
		Action_bt_node_test_predicate_sequence_ut_0_node5()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_predicate_sequence_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_sequence_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_sequence_ut_0_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_sequence_ut_0_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Condition_bt_node_test_predicate_sequence_ut_0_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_0_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_0_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_0_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_sequence_ut_1

	class DecoratorNot_bt_node_test_predicate_sequence_ut_1_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_sequence_ut_1_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_sequence_ut_1_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_sequence_ut_1_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_1_node3, Condition);
		Condition_bt_node_test_predicate_sequence_ut_1_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_sequence_ut_1_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_1_node4, Action);
		Action_bt_node_test_predicate_sequence_ut_1_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_1_node2, Action);
		Action_bt_node_test_predicate_sequence_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_1_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_1_node5, Action);
		Action_bt_node_test_predicate_sequence_ut_1_node5()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_predicate_sequence_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_sequence_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_sequence_ut_1_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_sequence_ut_1_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Condition_bt_node_test_predicate_sequence_ut_1_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_1_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_1_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_1_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_1_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_1_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_sequence_ut_2

	class DecoratorNot_bt_node_test_predicate_sequence_ut_2_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_sequence_ut_2_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_sequence_ut_2_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_sequence_ut_2_node3 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_2_node3, Condition);
		Condition_bt_node_test_predicate_sequence_ut_2_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_sequence_ut_2_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_2_node4, Action);
		Action_bt_node_test_predicate_sequence_ut_2_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_2_node2, Action);
		Action_bt_node_test_predicate_sequence_ut_2_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_2_node5, Action);
		Action_bt_node_test_predicate_sequence_ut_2_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_predicate_sequence_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_sequence_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_sequence_ut_2_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_sequence_ut_2_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Condition_bt_node_test_predicate_sequence_ut_2_node3* node3 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_2_node3;
						node3->SetClassNameString("Condition");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_2_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_2_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_2_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_sequence_ut_3

	class DecoratorNot_bt_node_test_predicate_sequence_ut_3_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_sequence_ut_3_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_sequence_ut_3_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_sequence_ut_3_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_3_node6, Condition);
		Condition_bt_node_test_predicate_sequence_ut_3_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_sequence_ut_3_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_3_node7, Condition);
		Condition_bt_node_test_predicate_sequence_ut_3_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_sequence_ut_3_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_3_node5, Action);
		Action_bt_node_test_predicate_sequence_ut_3_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_3_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_3_node4, Action);
		Action_bt_node_test_predicate_sequence_ut_3_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_3_node2, Action);
		Action_bt_node_test_predicate_sequence_ut_3_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_predicate_sequence_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_sequence_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_sequence_ut_3_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_sequence_ut_3_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Sequence* node3 = BEHAVIAC_NEW Sequence;
						node3->SetClassNameString("Sequence");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						{
							Condition_bt_node_test_predicate_sequence_ut_3_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_3_node6;
							node6->SetClassNameString("Condition");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node6);
							node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
						}
						{
							Condition_bt_node_test_predicate_sequence_ut_3_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_3_node7;
							node7->SetClassNameString("Condition");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_3_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_3_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_3_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_3_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_sequence_ut_4

	class DecoratorNot_bt_node_test_predicate_sequence_ut_4_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_sequence_ut_4_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_sequence_ut_4_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_sequence_ut_4_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_4_node6, Condition);
		Condition_bt_node_test_predicate_sequence_ut_4_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_sequence_ut_4_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_4_node7, Condition);
		Condition_bt_node_test_predicate_sequence_ut_4_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_sequence_ut_4_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_4_node5, Action);
		Action_bt_node_test_predicate_sequence_ut_4_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_4_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_4_node4, Action);
		Action_bt_node_test_predicate_sequence_ut_4_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_4_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_4_node2, Action);
		Action_bt_node_test_predicate_sequence_ut_4_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_predicate_sequence_ut_4
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_sequence_ut_4");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_sequence_ut_4_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_sequence_ut_4_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Selector* node3 = BEHAVIAC_NEW Selector;
						node3->SetClassNameString("Selector");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						{
							Condition_bt_node_test_predicate_sequence_ut_4_node6* node6 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_4_node6;
							node6->SetClassNameString("Condition");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node6);
							node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
						}
						{
							Condition_bt_node_test_predicate_sequence_ut_4_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_4_node7;
							node7->SetClassNameString("Condition");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node7);
							node3->SetHasEvents(node3->HasEvents() | node7->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_4_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_4_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_4_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_4_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_4_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_4_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/predicate_sequence_ut_5

	class DecoratorNot_bt_node_test_predicate_sequence_ut_5_node1 : public DecoratorNot
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorNot_bt_node_test_predicate_sequence_ut_5_node1, DecoratorNot);
		DecoratorNot_bt_node_test_predicate_sequence_ut_5_node1()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
	};

	class Condition_bt_node_test_predicate_sequence_ut_5_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_5_node8, Condition);
		Condition_bt_node_test_predicate_sequence_ut_5_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_sequence_ut_5_node9 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_5_node9, Condition);
		Condition_bt_node_test_predicate_sequence_ut_5_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr = 0;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_node_test_predicate_sequence_ut_5_node10 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_predicate_sequence_ut_5_node10, Condition);
		Condition_bt_node_test_predicate_sequence_ut_5_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >();
			float opr = -1;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_predicate_sequence_ut_5_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_5_node5, Action);
		Action_bt_node_test_predicate_sequence_ut_5_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_5_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_5_node4, Action);
		Action_bt_node_test_predicate_sequence_ut_5_node4()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_5_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_5_node2, Action);
		Action_bt_node_test_predicate_sequence_ut_5_node2()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class Action_bt_node_test_predicate_sequence_ut_5_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_predicate_sequence_ut_5_node7, Action);
		Action_bt_node_test_predicate_sequence_ut_5_node7()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_2, void, float >(method_p0);
			return BT_SUCCESS;
		}
		float method_p0;
	};

	class bt_node_test_predicate_sequence_ut_5
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/predicate_sequence_ut_5");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorNot_bt_node_test_predicate_sequence_ut_5_node1* node1 = BEHAVIAC_NEW DecoratorNot_bt_node_test_predicate_sequence_ut_5_node1;
					node1->SetClassNameString("DecoratorNot");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->SetCustomCondition(node1);
					{
						Sequence* node3 = BEHAVIAC_NEW Sequence;
						node3->SetClassNameString("Sequence");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node3);
						{
							Selector* node6 = BEHAVIAC_NEW Selector;
							node6->SetClassNameString("Selector");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node6);
							{
								Condition_bt_node_test_predicate_sequence_ut_5_node8* node8 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_5_node8;
								node8->SetClassNameString("Condition");
								node8->SetId(8);
#if !BEHAVIAC_RELEASE
								node8->SetAgentType("AgentNodeTest");
#endif
								node6->AddChild(node8);
								node6->SetHasEvents(node6->HasEvents() | node8->HasEvents());
							}
							{
								Condition_bt_node_test_predicate_sequence_ut_5_node9* node9 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_5_node9;
								node9->SetClassNameString("Condition");
								node9->SetId(9);
#if !BEHAVIAC_RELEASE
								node9->SetAgentType("AgentNodeTest");
#endif
								node6->AddChild(node9);
								node6->SetHasEvents(node6->HasEvents() | node9->HasEvents());
							}
							node3->SetHasEvents(node3->HasEvents() | node6->HasEvents());
						}
						{
							Condition_bt_node_test_predicate_sequence_ut_5_node10* node10 = BEHAVIAC_NEW Condition_bt_node_test_predicate_sequence_ut_5_node10;
							node10->SetClassNameString("Condition");
							node10->SetId(10);
#if !BEHAVIAC_RELEASE
							node10->SetAgentType("AgentNodeTest");
#endif
							node3->AddChild(node10);
							node3->SetHasEvents(node3->HasEvents() | node10->HasEvents());
						}
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_5_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_5_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_5_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_5_node4;
					node4->SetClassNameString("Action");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_5_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_5_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_predicate_sequence_ut_5_node7* node7 = BEHAVIAC_NEW Action_bt_node_test_predicate_sequence_ut_5_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_subtree_0

	class Action_bt_node_test_query_subtree_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_query_subtree_0_node3, Action);
		Action_bt_node_test_query_subtree_0_node3()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_query_subtree_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_subtree_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			pBT->SetDomains("test subtree0");
			pBT->SetDescriptors("1:{Descriptor=int Self.AgentNodeTest::testVar_1;Reference=const int 20;}");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_query_subtree_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_query_subtree_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					True* node2 = BEHAVIAC_NEW True;
					node2->SetClassNameString("True");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_subtree_1

	class Action_bt_node_test_query_subtree_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_query_subtree_1_node1, Action);
		Action_bt_node_test_query_subtree_1_node1()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_query_subtree_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_subtree_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			pBT->SetDomains("test subtree1");
			pBT->SetDescriptors("1:{Descriptor=int Self.AgentNodeTest::testVar_1;Reference=const int 50;}");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_query_subtree_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_query_subtree_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					True* node2 = BEHAVIAC_NEW True;
					node2->SetClassNameString("True");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_subtree_2

	class Action_bt_node_test_query_subtree_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_query_subtree_2_node1, Action);
		Action_bt_node_test_query_subtree_2_node1()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_query_subtree_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_subtree_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			pBT->SetDomains("test subtree2");
			pBT->SetDescriptors("1:{Descriptor=int Self.AgentNodeTest::testVar_1;Reference=const int 80;}");
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_query_subtree_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_query_subtree_2_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					True* node2 = BEHAVIAC_NEW True;
					node2->SetClassNameString("True");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_ut_0

	class Precondition_bt_node_test_query_ut_0_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_query_ut_0_attach1, Precondition);
		Precondition_bt_node_test_query_ut_0_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_query_ut_0_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_query_ut_0_attach2, Effector);
		Effector_bt_node_test_query_ut_0_attach2()
		{
			opl_p0 = 0;
			opl_p1 = (char*)("");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Query_bt_node_test_query_ut_0_node5 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_0_node5, Query);
		Query_bt_node_test_query_ut_0_node5()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 0;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_0_node3 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_0_node3, Query);
		Query_bt_node_test_query_ut_0_node3()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 50;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_0_node4 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_0_node4, Query);
		Query_bt_node_test_query_ut_0_node4()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 100;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class bt_node_test_query_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_query_ut_0_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_query_ut_0_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_query_ut_0_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_query_ut_0_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					Query_bt_node_test_query_ut_0_node5* node5 = BEHAVIAC_NEW Query_bt_node_test_query_ut_0_node5;
					node5->SetClassNameString("Query");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Selector* node6 = BEHAVIAC_NEW Selector;
					node6->SetClassNameString("Selector");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Query_bt_node_test_query_ut_0_node3* node3 = BEHAVIAC_NEW Query_bt_node_test_query_ut_0_node3;
						node3->SetClassNameString("Query");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					{
						Query_bt_node_test_query_ut_0_node4* node4 = BEHAVIAC_NEW Query_bt_node_test_query_ut_0_node4;
						node4->SetClassNameString("Query");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node4);
						node6->SetHasEvents(node6->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_ut_1

	class Precondition_bt_node_test_query_ut_1_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_query_ut_1_attach1, Precondition);
		Precondition_bt_node_test_query_ut_1_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_query_ut_1_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_query_ut_1_attach2, Effector);
		Effector_bt_node_test_query_ut_1_attach2()
		{
			opl_p0 = 0;
			opl_p1 = (char*)("");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Query_bt_node_test_query_ut_1_node5 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_1_node5, Query);
		Query_bt_node_test_query_ut_1_node5()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 0;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_1_node3 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_1_node3, Query);
		Query_bt_node_test_query_ut_1_node3()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 50;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_1_node4 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_1_node4, Query);
		Query_bt_node_test_query_ut_1_node4()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 100;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class bt_node_test_query_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_query_ut_1_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_query_ut_1_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_query_ut_1_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_query_ut_1_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					Query_bt_node_test_query_ut_1_node5* node5 = BEHAVIAC_NEW Query_bt_node_test_query_ut_1_node5;
					node5->SetClassNameString("Query");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Sequence* node6 = BEHAVIAC_NEW Sequence;
					node6->SetClassNameString("Sequence");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Query_bt_node_test_query_ut_1_node3* node3 = BEHAVIAC_NEW Query_bt_node_test_query_ut_1_node3;
						node3->SetClassNameString("Query");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					{
						Query_bt_node_test_query_ut_1_node4* node4 = BEHAVIAC_NEW Query_bt_node_test_query_ut_1_node4;
						node4->SetClassNameString("Query");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node4);
						node6->SetHasEvents(node6->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_ut_2

	class Precondition_bt_node_test_query_ut_2_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_query_ut_2_attach1, Precondition);
		Precondition_bt_node_test_query_ut_2_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_query_ut_2_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_query_ut_2_attach2, Effector);
		Effector_bt_node_test_query_ut_2_attach2()
		{
			opl_p0 = 0;
			opl_p1 = (char*)("");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Query_bt_node_test_query_ut_2_node5 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_2_node5, Query);
		Query_bt_node_test_query_ut_2_node5()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 0;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_2_node3 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_2_node3, Query);
		Query_bt_node_test_query_ut_2_node3()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 50;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_2_node4 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_2_node4, Query);
		Query_bt_node_test_query_ut_2_node4()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 100;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class bt_node_test_query_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_query_ut_2_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_query_ut_2_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_query_ut_2_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_query_ut_2_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					Query_bt_node_test_query_ut_2_node5* node5 = BEHAVIAC_NEW Query_bt_node_test_query_ut_2_node5;
					node5->SetClassNameString("Query");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Sequence* node6 = BEHAVIAC_NEW Sequence;
					node6->SetClassNameString("Sequence");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Query_bt_node_test_query_ut_2_node3* node3 = BEHAVIAC_NEW Query_bt_node_test_query_ut_2_node3;
						node3->SetClassNameString("Query");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					{
						Query_bt_node_test_query_ut_2_node4* node4 = BEHAVIAC_NEW Query_bt_node_test_query_ut_2_node4;
						node4->SetClassNameString("Query");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node4);
						node6->SetHasEvents(node6->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/query_ut_3

	class Precondition_bt_node_test_query_ut_3_attach1 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_query_ut_3_attach1, Precondition);
		Precondition_bt_node_test_query_ut_3_attach1()
		{
			opl_p0 = 0;
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_enter_action_1, bool, float >(opl_p0);
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
		float opl_p0;
	};

	class Effector_bt_node_test_query_ut_3_attach2 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_query_ut_3_attach2, Effector);
		Effector_bt_node_test_query_ut_3_attach2()
		{
			opl_p0 = 0;
			opl_p1 = (char*)("");
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_exit_action_2, void, int, string >(opl_p0, opl_p1);
			return result;
		}
		int opl_p0;
		string opl_p1;
	};

	class Query_bt_node_test_query_ut_3_node5 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_3_node5, Query);
		Query_bt_node_test_query_ut_3_node5()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 0;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_3_node3 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_3_node3, Query);
		Query_bt_node_test_query_ut_3_node3()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 0;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class Query_bt_node_test_query_ut_3_node4 : public Query
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Query_bt_node_test_query_ut_3_node4, Query);
		Query_bt_node_test_query_ut_3_node4()
		{
			this->Initialize("test", "1:{Attribute=int Self.AgentNodeTest::testVar_1;Reference=const int 0;Weight=100;}");
		}
	public:
		void Initialize(const char* domain, const char* descriptors)
		{
			this->m_domain = domain;
			this->SetDescriptors(descriptors);
		}
	};

	class bt_node_test_query_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/query_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				// attachments
				{
					Precondition_bt_node_test_query_ut_3_attach1* attach1 = BEHAVIAC_NEW Precondition_bt_node_test_query_ut_3_attach1;
					attach1->SetClassNameString("Precondition");
					attach1->SetId(1);
#if !BEHAVIAC_RELEASE
					attach1->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach1, true, false, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach1) != 0));
				}
				{
					Effector_bt_node_test_query_ut_3_attach2* attach2 = BEHAVIAC_NEW Effector_bt_node_test_query_ut_3_attach2;
					attach2->SetClassNameString("Effector");
					attach2->SetId(2);
#if !BEHAVIAC_RELEASE
					attach2->SetAgentType("AgentNodeTest");
#endif
					node0->Attach(attach2, false, true, false);
					node0->SetHasEvents(node0->HasEvents() | (Event::DynamicCast(attach2) != 0));
				}
				pBT->AddChild(node0);
				{
					Query_bt_node_test_query_ut_3_node5* node5 = BEHAVIAC_NEW Query_bt_node_test_query_ut_3_node5;
					node5->SetClassNameString("Query");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Sequence* node6 = BEHAVIAC_NEW Sequence;
					node6->SetClassNameString("Sequence");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Query_bt_node_test_query_ut_3_node3* node3 = BEHAVIAC_NEW Query_bt_node_test_query_ut_3_node3;
						node3->SetClassNameString("Query");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					{
						Query_bt_node_test_query_ut_3_node4* node4 = BEHAVIAC_NEW Query_bt_node_test_query_ut_3_node4;
						node4->SetClassNameString("Query");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node4);
						node6->SetHasEvents(node6->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/reference_sub_0

	class Task_bt_node_test_reference_sub_0_node7 : public Task
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Task_bt_node_test_reference_sub_0_node7, Task);
		Task_bt_node_test_reference_sub_0_node7()
		{
			this->m_task = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::task_test(0,0)");
			BEHAVIAC_ASSERT(this->m_task != NULL);
			this->m_bHTN = false;
		}
	protected:
	};

	class Assignment_bt_node_test_reference_sub_0_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_reference_sub_0_node1, Assignment);
		Assignment_bt_node_test_reference_sub_0_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_0") == 2009726548u);
			int& opr = (int&)pAgent->GetVariable<int >(2009726548u);
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_node_test_reference_sub_0_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_reference_sub_0_node2, Assignment);
		Assignment_bt_node_test_reference_sub_0_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("_$local_task_param_$_1") == 1859309333u);
			float& opr = (float&)pAgent->GetVariable<float >(1859309333u);
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_2, float >() = opr;
			return result;
		}
	};

	class bt_node_test_reference_sub_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/reference_sub_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "_$local_task_param_$_0", "0");
			pBT->AddPar("AgentNodeTest", "float", "_$local_task_param_$_1", "0");
			// children
			{
				Task_bt_node_test_reference_sub_0_node7* node7 = BEHAVIAC_NEW Task_bt_node_test_reference_sub_0_node7;
				node7->SetClassNameString("Task");
				node7->SetId(7);
#if !BEHAVIAC_RELEASE
				node7->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node7);
				{
					Sequence* node0 = BEHAVIAC_NEW Sequence;
					node0->SetClassNameString("Sequence");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node7->AddChild(node0);
					{
						Assignment_bt_node_test_reference_sub_0_node1* node1 = BEHAVIAC_NEW Assignment_bt_node_test_reference_sub_0_node1;
						node1->SetClassNameString("Assignment");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						Assignment_bt_node_test_reference_sub_0_node2* node2 = BEHAVIAC_NEW Assignment_bt_node_test_reference_sub_0_node2;
						node2->SetClassNameString("Assignment");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					node7->SetHasEvents(node7->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node7->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/reference_sub_1

	class bt_node_test_reference_sub_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/reference_sub_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "_$local_task_param_$_0", "0");
			pBT->AddPar("AgentNodeTest", "float", "_$local_task_param_$_1", "0");
			// children
			{
				False* node0 = BEHAVIAC_NEW False;
				node0->SetClassNameString("False");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/reference_ut_0

	class ReferencedBehavior_bt_node_test_reference_ut_0_node1 : public ReferencedBehavior
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(ReferencedBehavior_bt_node_test_reference_ut_0_node1, ReferencedBehavior);
		ReferencedBehavior_bt_node_test_reference_ut_0_node1()
		{
			m_referencedBehaviorPath = "node_test/reference_sub_0";
			BehaviorTree* behaviorTree = Workspace::GetInstance()->LoadBehaviorTree(this->m_referencedBehaviorPath.c_str());
			BEHAVIAC_ASSERT(behaviorTree);
			if (behaviorTree)
			{
				this->m_bHasEvents |= behaviorTree->HasEvents();
			}
			m_taskMethod = (CTaskMethod*)Action::LoadMethod("Self.AgentNodeTest::task_test(1,1)");
			BEHAVIAC_ASSERT(m_taskMethod);
		}
	protected:
	};

	class bt_node_test_reference_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/reference_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				ReferencedBehavior_bt_node_test_reference_ut_0_node1* node1 = BEHAVIAC_NEW ReferencedBehavior_bt_node_test_reference_ut_0_node1;
				node1->SetClassNameString("ReferencedBehavior");
				node1->SetId(1);
#if !BEHAVIAC_RELEASE
				node1->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node1);
				pBT->SetHasEvents(pBT->HasEvents() | node1->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_0

	class Action_bt_node_test_selector_loop_ut_0_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_0_node5, Action);
		Action_bt_node_test_selector_loop_ut_0_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_0_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_0_node6, Action);
		Action_bt_node_test_selector_loop_ut_0_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_loop_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
				node0->SetClassNameString("SelectorLoop");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
					node1->SetClassNameString("WithPrecondition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						True* node4 = BEHAVIAC_NEW True;
						node4->SetClassNameString("True");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_0_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_0_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
					node2->SetClassNameString("WithPrecondition");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						True* node3 = BEHAVIAC_NEW True;
						node3->SetClassNameString("True");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_0_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_0_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node6);
						node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_1

	class Action_bt_node_test_selector_loop_ut_1_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_1_node5, Action);
		Action_bt_node_test_selector_loop_ut_1_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_1_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_1_node6, Action);
		Action_bt_node_test_selector_loop_ut_1_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_loop_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
				node0->SetClassNameString("SelectorLoop");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
					node1->SetClassNameString("WithPrecondition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						True* node4 = BEHAVIAC_NEW True;
						node4->SetClassNameString("True");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_1_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_1_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
					node2->SetClassNameString("WithPrecondition");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						True* node3 = BEHAVIAC_NEW True;
						node3->SetClassNameString("True");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_1_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_1_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node6);
						node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_2

	class Action_bt_node_test_selector_loop_ut_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_2_node5, Action);
		Action_bt_node_test_selector_loop_ut_2_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_2_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_2_node6, Action);
		Action_bt_node_test_selector_loop_ut_2_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_loop_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
				node0->SetClassNameString("SelectorLoop");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
					node1->SetClassNameString("WithPrecondition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						True* node4 = BEHAVIAC_NEW True;
						node4->SetClassNameString("True");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_2_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
					node2->SetClassNameString("WithPrecondition");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						False* node3 = BEHAVIAC_NEW False;
						node3->SetClassNameString("False");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_2_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_2_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node6);
						node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_3

	class Action_bt_node_test_selector_loop_ut_3_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_3_node5, Action);
		Action_bt_node_test_selector_loop_ut_3_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_3_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_3_node6, Action);
		Action_bt_node_test_selector_loop_ut_3_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_loop_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
				node0->SetClassNameString("SelectorLoop");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
					node1->SetClassNameString("WithPrecondition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						False* node4 = BEHAVIAC_NEW False;
						node4->SetClassNameString("False");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_3_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_3_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
					node2->SetClassNameString("WithPrecondition");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						False* node3 = BEHAVIAC_NEW False;
						node3->SetClassNameString("False");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_3_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_3_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node6);
						node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_4

	class Action_bt_node_test_selector_loop_ut_4_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_4_node5, Action);
		Action_bt_node_test_selector_loop_ut_4_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_4_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_4_node6, Action);
		Action_bt_node_test_selector_loop_ut_4_node6()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class bt_node_test_selector_loop_ut_4
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_4");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
				node0->SetClassNameString("SelectorLoop");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
					node1->SetClassNameString("WithPrecondition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						True* node4 = BEHAVIAC_NEW True;
						node4->SetClassNameString("True");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_4_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_4_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
					node2->SetClassNameString("WithPrecondition");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						True* node3 = BEHAVIAC_NEW True;
						node3->SetClassNameString("True");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_4_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_4_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node6);
						node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_5

	class Action_bt_node_test_selector_loop_ut_5_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_5_node5, Action);
		Action_bt_node_test_selector_loop_ut_5_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_RUNNING;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_5_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_5_node6, Action);
		Action_bt_node_test_selector_loop_ut_5_node6()
		{
			method_p0 = (char*)("node_test/reference_sub_1");
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_switchRef, behaviac::EBTStatus, string& >(method_p0);
			return result;
		}
		string method_p0;
	};

	class Action_bt_node_test_selector_loop_ut_5_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_5_node9, Action);
		Action_bt_node_test_selector_loop_ut_5_node9()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_loop_ut_5
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_5");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
				node0->SetClassNameString("SelectorLoop");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
					node1->SetClassNameString("WithPrecondition");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					{
						False* node4 = BEHAVIAC_NEW False;
						node4->SetClassNameString("False");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_5_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_5_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("AgentNodeTest");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
					node2->SetClassNameString("WithPrecondition");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					{
						True* node3 = BEHAVIAC_NEW True;
						node3->SetClassNameString("True");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node3);
						node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_5_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_5_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node2->AddChild(node6);
						node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					WithPrecondition* node7 = BEHAVIAC_NEW WithPrecondition;
					node7->SetClassNameString("WithPrecondition");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node7);
					{
						True* node8 = BEHAVIAC_NEW True;
						node8->SetClassNameString("True");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("AgentNodeTest");
#endif
						node7->AddChild(node8);
						node7->SetHasEvents(node7->HasEvents() | node8->HasEvents());
					}
					{
						Action_bt_node_test_selector_loop_ut_5_node9* node9 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_5_node9;
						node9->SetClassNameString("Action");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("AgentNodeTest");
#endif
						node7->AddChild(node9);
						node7->SetHasEvents(node7->HasEvents() | node9->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_6

	class DecoratorLoop_bt_node_test_selector_loop_ut_6_node9 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_selector_loop_ut_6_node9, DecoratorLoop);
		DecoratorLoop_bt_node_test_selector_loop_ut_6_node9()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 10;
		}
	};

	class Condition_bt_node_test_selector_loop_ut_6_node4 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_loop_ut_6_node4, Condition);
		Condition_bt_node_test_selector_loop_ut_6_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy, bool >();
			bool opr = true;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_loop_ut_6_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_6_node5, Action);
		Action_bt_node_test_selector_loop_ut_6_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_6_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_6_attach7, Precondition);
		Precondition_bt_node_test_selector_loop_ut_6_attach7()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_6_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_6_node6, Action);
		Action_bt_node_test_selector_loop_ut_6_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_6_attach8 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_6_attach8, Precondition);
		Precondition_bt_node_test_selector_loop_ut_6_attach8()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 2;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class bt_node_test_selector_loop_ut_6
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_6");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				DecoratorLoop_bt_node_test_selector_loop_ut_6_node9* node9 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_selector_loop_ut_6_node9;
				node9->SetClassNameString("DecoratorLoop");
				node9->SetId(9);
#if !BEHAVIAC_RELEASE
				node9->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node9);
				{
					SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
					node0->SetClassNameString("SelectorLoop");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node9->AddChild(node0);
					{
						WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
						node1->SetClassNameString("WithPrecondition");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node1);
						{
							Condition_bt_node_test_selector_loop_ut_6_node4* node4 = BEHAVIAC_NEW Condition_bt_node_test_selector_loop_ut_6_node4;
							node4->SetClassNameString("Condition");
							node4->SetId(4);
#if !BEHAVIAC_RELEASE
							node4->SetAgentType("AgentNodeTest");
#endif
							node1->AddChild(node4);
							node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
						}
						{
							Action_bt_node_test_selector_loop_ut_6_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_6_node5;
							node5->SetClassNameString("Action");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_selector_loop_ut_6_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_6_attach7;
								attach7->SetClassNameString("Precondition");
								attach7->SetId(7);
#if !BEHAVIAC_RELEASE
								attach7->SetAgentType("AgentNodeTest");
#endif
								node5->Attach(attach7, true, false, false);
								node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach7) != 0));
							}
							node1->AddChild(node5);
							node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
						}
						node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
					}
					{
						WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
						node2->SetClassNameString("WithPrecondition");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node2);
						{
							True* node3 = BEHAVIAC_NEW True;
							node3->SetClassNameString("True");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("AgentNodeTest");
#endif
							node2->AddChild(node3);
							node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
						}
						{
							Action_bt_node_test_selector_loop_ut_6_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_6_node6;
							node6->SetClassNameString("Action");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_selector_loop_ut_6_attach8* attach8 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_6_attach8;
								attach8->SetClassNameString("Precondition");
								attach8->SetId(8);
#if !BEHAVIAC_RELEASE
								attach8->SetAgentType("AgentNodeTest");
#endif
								node6->Attach(attach8, true, false, false);
								node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach8) != 0));
							}
							node2->AddChild(node6);
							node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
						}
						node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
					}
					node9->SetHasEvents(node9->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node9->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_7

	class Action_bt_node_test_selector_loop_ut_7_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_7_node16, Action);
		Action_bt_node_test_selector_loop_ut_7_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_selector_loop_ut_7_node21 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_selector_loop_ut_7_node21, Assignment);
		Assignment_bt_node_test_selector_loop_ut_7_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr;
			return result;
		}
	};

	class DecoratorLoop_bt_node_test_selector_loop_ut_7_node9 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_selector_loop_ut_7_node9, DecoratorLoop);
		DecoratorLoop_bt_node_test_selector_loop_ut_7_node9()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach14 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach14, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach14()
		{
			this->SetPhase(Precondition::E_BOTH);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_IsTargetValid, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach17 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach17, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach17()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Effector_bt_node_test_selector_loop_ut_7_attach18 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_selector_loop_ut_7_attach18, Effector);
		Effector_bt_node_test_selector_loop_ut_7_attach18()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr2;
			return result;
		}
	};

	class Condition_bt_node_test_selector_loop_ut_7_node4 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_loop_ut_7_node4, Condition);
		Condition_bt_node_test_selector_loop_ut_7_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy, bool >();
			bool opr = true;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_loop_ut_7_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_7_node5, Action);
		Action_bt_node_test_selector_loop_ut_7_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach7, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach7()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_7_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_7_node6, Action);
		Action_bt_node_test_selector_loop_ut_7_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach8 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach8, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach8()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 2;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach19 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach19, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach19()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr2;
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_7_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_7_node12, Action);
		Action_bt_node_test_selector_loop_ut_7_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Stop, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach20 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach20, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach20()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_7_node13 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_7_node13, Action);
		Action_bt_node_test_selector_loop_ut_7_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_7_attach22 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_7_attach22, Precondition);
		Precondition_bt_node_test_selector_loop_ut_7_attach22()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class bt_node_test_selector_loop_ut_7
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_7");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node15 = BEHAVIAC_NEW Sequence;
				node15->SetClassNameString("Sequence");
				node15->SetId(15);
#if !BEHAVIAC_RELEASE
				node15->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node15);
				{
					Action_bt_node_test_selector_loop_ut_7_node16* node16 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_7_node16;
					node16->SetClassNameString("Action");
					node16->SetId(16);
#if !BEHAVIAC_RELEASE
					node16->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node16);
					node15->SetHasEvents(node15->HasEvents() | node16->HasEvents());
				}
				{
					Assignment_bt_node_test_selector_loop_ut_7_node21* node21 = BEHAVIAC_NEW Assignment_bt_node_test_selector_loop_ut_7_node21;
					node21->SetClassNameString("Assignment");
					node21->SetId(21);
#if !BEHAVIAC_RELEASE
					node21->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node21);
					node15->SetHasEvents(node15->HasEvents() | node21->HasEvents());
				}
				{
					Selector* node10 = BEHAVIAC_NEW Selector;
					node10->SetClassNameString("Selector");
					node10->SetId(10);
#if !BEHAVIAC_RELEASE
					node10->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node10);
					{
						DecoratorLoop_bt_node_test_selector_loop_ut_7_node9* node9 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_selector_loop_ut_7_node9;
						node9->SetClassNameString("DecoratorLoop");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("AgentNodeTest");
#endif
						// attachments
						{
							Precondition_bt_node_test_selector_loop_ut_7_attach14* attach14 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach14;
							attach14->SetClassNameString("Precondition");
							attach14->SetId(14);
#if !BEHAVIAC_RELEASE
							attach14->SetAgentType("AgentNodeTest");
#endif
							node9->Attach(attach14, true, false, false);
							node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach14) != 0));
						}
						{
							Precondition_bt_node_test_selector_loop_ut_7_attach17* attach17 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach17;
							attach17->SetClassNameString("Precondition");
							attach17->SetId(17);
#if !BEHAVIAC_RELEASE
							attach17->SetAgentType("AgentNodeTest");
#endif
							node9->Attach(attach17, true, false, false);
							node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach17) != 0));
						}
						{
							Effector_bt_node_test_selector_loop_ut_7_attach18* attach18 = BEHAVIAC_NEW Effector_bt_node_test_selector_loop_ut_7_attach18;
							attach18->SetClassNameString("Effector");
							attach18->SetId(18);
#if !BEHAVIAC_RELEASE
							attach18->SetAgentType("AgentNodeTest");
#endif
							node9->Attach(attach18, false, true, false);
							node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach18) != 0));
						}
						node10->AddChild(node9);
						{
							SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
							node0->SetClassNameString("SelectorLoop");
							node0->SetId(0);
#if !BEHAVIAC_RELEASE
							node0->SetAgentType("AgentNodeTest");
#endif
							node9->AddChild(node0);
							{
								WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
								node1->SetClassNameString("WithPrecondition");
								node1->SetId(1);
#if !BEHAVIAC_RELEASE
								node1->SetAgentType("AgentNodeTest");
#endif
								node0->AddChild(node1);
								{
									Condition_bt_node_test_selector_loop_ut_7_node4* node4 = BEHAVIAC_NEW Condition_bt_node_test_selector_loop_ut_7_node4;
									node4->SetClassNameString("Condition");
									node4->SetId(4);
#if !BEHAVIAC_RELEASE
									node4->SetAgentType("AgentNodeTest");
#endif
									node1->AddChild(node4);
									node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
								}
								{
									Action_bt_node_test_selector_loop_ut_7_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_7_node5;
									node5->SetClassNameString("Action");
									node5->SetId(5);
#if !BEHAVIAC_RELEASE
									node5->SetAgentType("AgentNodeTest");
#endif
									// attachments
									{
										Precondition_bt_node_test_selector_loop_ut_7_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach7;
										attach7->SetClassNameString("Precondition");
										attach7->SetId(7);
#if !BEHAVIAC_RELEASE
										attach7->SetAgentType("AgentNodeTest");
#endif
										node5->Attach(attach7, true, false, false);
										node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach7) != 0));
									}
									node1->AddChild(node5);
									node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
								}
								node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
							}
							{
								WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
								node2->SetClassNameString("WithPrecondition");
								node2->SetId(2);
#if !BEHAVIAC_RELEASE
								node2->SetAgentType("AgentNodeTest");
#endif
								node0->AddChild(node2);
								{
									True* node3 = BEHAVIAC_NEW True;
									node3->SetClassNameString("True");
									node3->SetId(3);
#if !BEHAVIAC_RELEASE
									node3->SetAgentType("AgentNodeTest");
#endif
									node2->AddChild(node3);
									node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
								}
								{
									Action_bt_node_test_selector_loop_ut_7_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_7_node6;
									node6->SetClassNameString("Action");
									node6->SetId(6);
#if !BEHAVIAC_RELEASE
									node6->SetAgentType("AgentNodeTest");
#endif
									// attachments
									{
										Precondition_bt_node_test_selector_loop_ut_7_attach8* attach8 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach8;
										attach8->SetClassNameString("Precondition");
										attach8->SetId(8);
#if !BEHAVIAC_RELEASE
										attach8->SetAgentType("AgentNodeTest");
#endif
										node6->Attach(attach8, true, false, false);
										node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach8) != 0));
									}
									node2->AddChild(node6);
									node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
								}
								node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
							}
							node9->SetHasEvents(node9->HasEvents() | node0->HasEvents());
						}
						node10->SetHasEvents(node10->HasEvents() | node9->HasEvents());
					}
					{
						Sequence* node11 = BEHAVIAC_NEW Sequence;
						node11->SetClassNameString("Sequence");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("AgentNodeTest");
#endif
						// attachments
						{
							Precondition_bt_node_test_selector_loop_ut_7_attach19* attach19 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach19;
							attach19->SetClassNameString("Precondition");
							attach19->SetId(19);
#if !BEHAVIAC_RELEASE
							attach19->SetAgentType("AgentNodeTest");
#endif
							node11->Attach(attach19, true, false, false);
							node11->SetHasEvents(node11->HasEvents() | (Event::DynamicCast(attach19) != 0));
						}
						node10->AddChild(node11);
						{
							Action_bt_node_test_selector_loop_ut_7_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_7_node12;
							node12->SetClassNameString("Action");
							node12->SetId(12);
#if !BEHAVIAC_RELEASE
							node12->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_selector_loop_ut_7_attach20* attach20 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach20;
								attach20->SetClassNameString("Precondition");
								attach20->SetId(20);
#if !BEHAVIAC_RELEASE
								attach20->SetAgentType("AgentNodeTest");
#endif
								node12->Attach(attach20, true, false, false);
								node12->SetHasEvents(node12->HasEvents() | (Event::DynamicCast(attach20) != 0));
							}
							node11->AddChild(node12);
							node11->SetHasEvents(node11->HasEvents() | node12->HasEvents());
						}
						{
							Action_bt_node_test_selector_loop_ut_7_node13* node13 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_7_node13;
							node13->SetClassNameString("Action");
							node13->SetId(13);
#if !BEHAVIAC_RELEASE
							node13->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_selector_loop_ut_7_attach22* attach22 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_7_attach22;
								attach22->SetClassNameString("Precondition");
								attach22->SetId(22);
#if !BEHAVIAC_RELEASE
								attach22->SetAgentType("AgentNodeTest");
#endif
								node13->Attach(attach22, true, false, false);
								node13->SetHasEvents(node13->HasEvents() | (Event::DynamicCast(attach22) != 0));
							}
							node11->AddChild(node13);
							node11->SetHasEvents(node11->HasEvents() | node13->HasEvents());
						}
						node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
					}
					node15->SetHasEvents(node15->HasEvents() | node10->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node15->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_loop_ut_8

	class Action_bt_node_test_selector_loop_ut_8_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_8_node16, Action);
		Action_bt_node_test_selector_loop_ut_8_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >();
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_node_test_selector_loop_ut_8_node21 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_selector_loop_ut_8_node21, Assignment);
		Assignment_bt_node_test_selector_loop_ut_8_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr;
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach24 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach24, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach24()
		{
			this->SetPhase(Precondition::E_BOTH);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >();
			int opr2 = 10;
			bool op = Details::GreaterEqual(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class DecoratorLoop_bt_node_test_selector_loop_ut_8_node9 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_node_test_selector_loop_ut_8_node9, DecoratorLoop);
		DecoratorLoop_bt_node_test_selector_loop_ut_8_node9()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach14 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach14, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach14()
		{
			this->SetPhase(Precondition::E_BOTH);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_IsTargetValid, bool >();
			bool opr2 = true;
			bool op = Details::Equal(opl, opr2);
			if (!op)
				result = BT_FAILURE;
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach17 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach17, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach17()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Effector_bt_node_test_selector_loop_ut_8_attach18 : public Effector
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Effector_bt_node_test_selector_loop_ut_8_attach18, Effector);
		Effector_bt_node_test_selector_loop_ut_8_attach18()
		{
			this->SetPhase(Effector::E_SUCCESS);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 0;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr2;
			return result;
		}
	};

	class Condition_bt_node_test_selector_loop_ut_8_node4 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_loop_ut_8_node4, Condition);
		Condition_bt_node_test_selector_loop_ut_8_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_CanSeeEnemy, bool >();
			bool opr = true;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_loop_ut_8_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_8_node5, Action);
		Action_bt_node_test_selector_loop_ut_8_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Move, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach7 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach7, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach7()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_8_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_8_node6, Action);
		Action_bt_node_test_selector_loop_ut_8_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_MoveToTarget, behaviac::EBTStatus >();
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach8 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach8, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach8()
		{
			this->SetPhase(Precondition::E_UPDATE);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 2;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_0, int >() = opr2;
			return result;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach19 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach19, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach19()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr2;
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_8_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_8_node12, Action);
		Action_bt_node_test_selector_loop_ut_8_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_Stop, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach20 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach20, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach20()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Action_bt_node_test_selector_loop_ut_8_node13 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_loop_ut_8_node13, Action);
		Action_bt_node_test_selector_loop_ut_8_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_SelectTarget, void >();
			return BT_SUCCESS;
		}
	};

	class Precondition_bt_node_test_selector_loop_ut_8_attach22 : public Precondition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Precondition_bt_node_test_selector_loop_ut_8_attach22, Precondition);
		Precondition_bt_node_test_selector_loop_ut_8_attach22()
		{
			this->SetPhase(Precondition::E_ENTER);
			this->SetIsAnd(true);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class Assignment_bt_node_test_selector_loop_ut_8_node25 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_node_test_selector_loop_ut_8_node25, Assignment);
		Assignment_bt_node_test_selector_loop_ut_8_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 100;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = opr;
			return result;
		}
	};

	class Compute_bt_node_test_selector_loop_ut_8_node26 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_node_test_selector_loop_ut_8_node26, Compute);
		Compute_bt_node_test_selector_loop_ut_8_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >();
			int opr2 = 1;
			((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testVar_1, int >() = (int)(opr1 + opr2);
			return result;
		}
	};

	class bt_node_test_selector_loop_ut_8
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_loop_ut_8");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node15 = BEHAVIAC_NEW Sequence;
				node15->SetClassNameString("Sequence");
				node15->SetId(15);
#if !BEHAVIAC_RELEASE
				node15->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node15);
				{
					Action_bt_node_test_selector_loop_ut_8_node16* node16 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_8_node16;
					node16->SetClassNameString("Action");
					node16->SetId(16);
#if !BEHAVIAC_RELEASE
					node16->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node16);
					node15->SetHasEvents(node15->HasEvents() | node16->HasEvents());
				}
				{
					Assignment_bt_node_test_selector_loop_ut_8_node21* node21 = BEHAVIAC_NEW Assignment_bt_node_test_selector_loop_ut_8_node21;
					node21->SetClassNameString("Assignment");
					node21->SetId(21);
#if !BEHAVIAC_RELEASE
					node21->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node21);
					node15->SetHasEvents(node15->HasEvents() | node21->HasEvents());
				}
				{
					Selector* node23 = BEHAVIAC_NEW Selector;
					node23->SetClassNameString("Selector");
					node23->SetId(23);
#if !BEHAVIAC_RELEASE
					node23->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node23);
					{
						Selector* node10 = BEHAVIAC_NEW Selector;
						node10->SetClassNameString("Selector");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						// attachments
						{
							Precondition_bt_node_test_selector_loop_ut_8_attach24* attach24 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach24;
							attach24->SetClassNameString("Precondition");
							attach24->SetId(24);
#if !BEHAVIAC_RELEASE
							attach24->SetAgentType("AgentNodeTest");
#endif
							node10->Attach(attach24, true, false, false);
							node10->SetHasEvents(node10->HasEvents() | (Event::DynamicCast(attach24) != 0));
						}
						node23->AddChild(node10);
						{
							DecoratorLoop_bt_node_test_selector_loop_ut_8_node9* node9 = BEHAVIAC_NEW DecoratorLoop_bt_node_test_selector_loop_ut_8_node9;
							node9->SetClassNameString("DecoratorLoop");
							node9->SetId(9);
#if !BEHAVIAC_RELEASE
							node9->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_selector_loop_ut_8_attach14* attach14 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach14;
								attach14->SetClassNameString("Precondition");
								attach14->SetId(14);
#if !BEHAVIAC_RELEASE
								attach14->SetAgentType("AgentNodeTest");
#endif
								node9->Attach(attach14, true, false, false);
								node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach14) != 0));
							}
							{
								Precondition_bt_node_test_selector_loop_ut_8_attach17* attach17 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach17;
								attach17->SetClassNameString("Precondition");
								attach17->SetId(17);
#if !BEHAVIAC_RELEASE
								attach17->SetAgentType("AgentNodeTest");
#endif
								node9->Attach(attach17, true, false, false);
								node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach17) != 0));
							}
							{
								Effector_bt_node_test_selector_loop_ut_8_attach18* attach18 = BEHAVIAC_NEW Effector_bt_node_test_selector_loop_ut_8_attach18;
								attach18->SetClassNameString("Effector");
								attach18->SetId(18);
#if !BEHAVIAC_RELEASE
								attach18->SetAgentType("AgentNodeTest");
#endif
								node9->Attach(attach18, false, true, false);
								node9->SetHasEvents(node9->HasEvents() | (Event::DynamicCast(attach18) != 0));
							}
							node10->AddChild(node9);
							{
								SelectorLoop* node0 = BEHAVIAC_NEW SelectorLoop;
								node0->SetClassNameString("SelectorLoop");
								node0->SetId(0);
#if !BEHAVIAC_RELEASE
								node0->SetAgentType("AgentNodeTest");
#endif
								node9->AddChild(node0);
								{
									WithPrecondition* node1 = BEHAVIAC_NEW WithPrecondition;
									node1->SetClassNameString("WithPrecondition");
									node1->SetId(1);
#if !BEHAVIAC_RELEASE
									node1->SetAgentType("AgentNodeTest");
#endif
									node0->AddChild(node1);
									{
										Condition_bt_node_test_selector_loop_ut_8_node4* node4 = BEHAVIAC_NEW Condition_bt_node_test_selector_loop_ut_8_node4;
										node4->SetClassNameString("Condition");
										node4->SetId(4);
#if !BEHAVIAC_RELEASE
										node4->SetAgentType("AgentNodeTest");
#endif
										node1->AddChild(node4);
										node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
									}
									{
										Action_bt_node_test_selector_loop_ut_8_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_8_node5;
										node5->SetClassNameString("Action");
										node5->SetId(5);
#if !BEHAVIAC_RELEASE
										node5->SetAgentType("AgentNodeTest");
#endif
										// attachments
										{
											Precondition_bt_node_test_selector_loop_ut_8_attach7* attach7 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach7;
											attach7->SetClassNameString("Precondition");
											attach7->SetId(7);
#if !BEHAVIAC_RELEASE
											attach7->SetAgentType("AgentNodeTest");
#endif
											node5->Attach(attach7, true, false, false);
											node5->SetHasEvents(node5->HasEvents() | (Event::DynamicCast(attach7) != 0));
										}
										node1->AddChild(node5);
										node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
									}
									node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
								}
								{
									WithPrecondition* node2 = BEHAVIAC_NEW WithPrecondition;
									node2->SetClassNameString("WithPrecondition");
									node2->SetId(2);
#if !BEHAVIAC_RELEASE
									node2->SetAgentType("AgentNodeTest");
#endif
									node0->AddChild(node2);
									{
										True* node3 = BEHAVIAC_NEW True;
										node3->SetClassNameString("True");
										node3->SetId(3);
#if !BEHAVIAC_RELEASE
										node3->SetAgentType("AgentNodeTest");
#endif
										node2->AddChild(node3);
										node2->SetHasEvents(node2->HasEvents() | node3->HasEvents());
									}
									{
										Action_bt_node_test_selector_loop_ut_8_node6* node6 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_8_node6;
										node6->SetClassNameString("Action");
										node6->SetId(6);
#if !BEHAVIAC_RELEASE
										node6->SetAgentType("AgentNodeTest");
#endif
										// attachments
										{
											Precondition_bt_node_test_selector_loop_ut_8_attach8* attach8 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach8;
											attach8->SetClassNameString("Precondition");
											attach8->SetId(8);
#if !BEHAVIAC_RELEASE
											attach8->SetAgentType("AgentNodeTest");
#endif
											node6->Attach(attach8, true, false, false);
											node6->SetHasEvents(node6->HasEvents() | (Event::DynamicCast(attach8) != 0));
										}
										node2->AddChild(node6);
										node2->SetHasEvents(node2->HasEvents() | node6->HasEvents());
									}
									node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
								}
								node9->SetHasEvents(node9->HasEvents() | node0->HasEvents());
							}
							node10->SetHasEvents(node10->HasEvents() | node9->HasEvents());
						}
						{
							Sequence* node11 = BEHAVIAC_NEW Sequence;
							node11->SetClassNameString("Sequence");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("AgentNodeTest");
#endif
							// attachments
							{
								Precondition_bt_node_test_selector_loop_ut_8_attach19* attach19 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach19;
								attach19->SetClassNameString("Precondition");
								attach19->SetId(19);
#if !BEHAVIAC_RELEASE
								attach19->SetAgentType("AgentNodeTest");
#endif
								node11->Attach(attach19, true, false, false);
								node11->SetHasEvents(node11->HasEvents() | (Event::DynamicCast(attach19) != 0));
							}
							node10->AddChild(node11);
							{
								Action_bt_node_test_selector_loop_ut_8_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_8_node12;
								node12->SetClassNameString("Action");
								node12->SetId(12);
#if !BEHAVIAC_RELEASE
								node12->SetAgentType("AgentNodeTest");
#endif
								// attachments
								{
									Precondition_bt_node_test_selector_loop_ut_8_attach20* attach20 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach20;
									attach20->SetClassNameString("Precondition");
									attach20->SetId(20);
#if !BEHAVIAC_RELEASE
									attach20->SetAgentType("AgentNodeTest");
#endif
									node12->Attach(attach20, true, false, false);
									node12->SetHasEvents(node12->HasEvents() | (Event::DynamicCast(attach20) != 0));
								}
								node11->AddChild(node12);
								node11->SetHasEvents(node11->HasEvents() | node12->HasEvents());
							}
							{
								Action_bt_node_test_selector_loop_ut_8_node13* node13 = BEHAVIAC_NEW Action_bt_node_test_selector_loop_ut_8_node13;
								node13->SetClassNameString("Action");
								node13->SetId(13);
#if !BEHAVIAC_RELEASE
								node13->SetAgentType("AgentNodeTest");
#endif
								// attachments
								{
									Precondition_bt_node_test_selector_loop_ut_8_attach22* attach22 = BEHAVIAC_NEW Precondition_bt_node_test_selector_loop_ut_8_attach22;
									attach22->SetClassNameString("Precondition");
									attach22->SetId(22);
#if !BEHAVIAC_RELEASE
									attach22->SetAgentType("AgentNodeTest");
#endif
									node13->Attach(attach22, true, false, false);
									node13->SetHasEvents(node13->HasEvents() | (Event::DynamicCast(attach22) != 0));
								}
								node11->AddChild(node13);
								node11->SetHasEvents(node11->HasEvents() | node13->HasEvents());
							}
							node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
						}
						node23->SetHasEvents(node23->HasEvents() | node10->HasEvents());
					}
					{
						Assignment_bt_node_test_selector_loop_ut_8_node25* node25 = BEHAVIAC_NEW Assignment_bt_node_test_selector_loop_ut_8_node25;
						node25->SetClassNameString("Assignment");
						node25->SetId(25);
#if !BEHAVIAC_RELEASE
						node25->SetAgentType("AgentNodeTest");
#endif
						node23->AddChild(node25);
						node23->SetHasEvents(node23->HasEvents() | node25->HasEvents());
					}
					node15->SetHasEvents(node15->HasEvents() | node23->HasEvents());
				}
				{
					Compute_bt_node_test_selector_loop_ut_8_node26* node26 = BEHAVIAC_NEW Compute_bt_node_test_selector_loop_ut_8_node26;
					node26->SetClassNameString("Compute");
					node26->SetId(26);
#if !BEHAVIAC_RELEASE
					node26->SetAgentType("AgentNodeTest");
#endif
					node15->AddChild(node26);
					node15->SetHasEvents(node15->HasEvents() | node26->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node15->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_probability_ut_0

	class SelectorProbability_bt_node_test_selector_probability_ut_0_node0 : public SelectorProbability
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SelectorProbability_bt_node_test_selector_probability_ut_0_node0, SelectorProbability);
		SelectorProbability_bt_node_test_selector_probability_ut_0_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_0_node3 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_0_node3, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_0_node3()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 20;
		}
	};

	class Action_bt_node_test_selector_probability_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_0_node1, Action);
		Action_bt_node_test_selector_probability_ut_0_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_0_node5 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_0_node5, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_0_node5()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 30;
		}
	};

	class Action_bt_node_test_selector_probability_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_0_node2, Action);
		Action_bt_node_test_selector_probability_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_0_node6 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_0_node6, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_0_node6()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 50;
		}
	};

	class Action_bt_node_test_selector_probability_ut_0_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_0_node4, Action);
		Action_bt_node_test_selector_probability_ut_0_node4()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_probability_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_probability_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorProbability_bt_node_test_selector_probability_ut_0_node0* node0 = BEHAVIAC_NEW SelectorProbability_bt_node_test_selector_probability_ut_0_node0;
				node0->SetClassNameString("SelectorProbability");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_0_node3* node3 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_0_node3;
					node3->SetClassNameString("DecoratorWeight");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					{
						Action_bt_node_test_selector_probability_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_0_node1;
						node1->SetClassNameString("Action");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node3->AddChild(node1);
						node3->SetHasEvents(node3->HasEvents() | node1->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_0_node5* node5 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_0_node5;
					node5->SetClassNameString("DecoratorWeight");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					{
						Action_bt_node_test_selector_probability_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_0_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node5->AddChild(node2);
						node5->SetHasEvents(node5->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_0_node6* node6 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_0_node6;
					node6->SetClassNameString("DecoratorWeight");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Action_bt_node_test_selector_probability_ut_0_node4* node4 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_0_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node4);
						node6->SetHasEvents(node6->HasEvents() | node4->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_probability_ut_1

	class SelectorProbability_bt_node_test_selector_probability_ut_1_node0 : public SelectorProbability
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SelectorProbability_bt_node_test_selector_probability_ut_1_node0, SelectorProbability);
		SelectorProbability_bt_node_test_selector_probability_ut_1_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_1_node4 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_1_node4, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_1_node4()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 0;
		}
	};

	class Action_bt_node_test_selector_probability_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_1_node1, Action);
		Action_bt_node_test_selector_probability_ut_1_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_1_node5 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_1_node5, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_1_node5()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 1;
		}
	};

	class Action_bt_node_test_selector_probability_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_1_node2, Action);
		Action_bt_node_test_selector_probability_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_1_node6 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_1_node6, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_1_node6()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 1;
		}
	};

	class Action_bt_node_test_selector_probability_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_1_node3, Action);
		Action_bt_node_test_selector_probability_ut_1_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_probability_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_probability_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorProbability_bt_node_test_selector_probability_ut_1_node0* node0 = BEHAVIAC_NEW SelectorProbability_bt_node_test_selector_probability_ut_1_node0;
				node0->SetClassNameString("SelectorProbability");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_1_node4* node4 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_1_node4;
					node4->SetClassNameString("DecoratorWeight");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						Action_bt_node_test_selector_probability_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_1_node1;
						node1->SetClassNameString("Action");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node1);
						node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_1_node5* node5 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_1_node5;
					node5->SetClassNameString("DecoratorWeight");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					{
						Action_bt_node_test_selector_probability_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_1_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node5->AddChild(node2);
						node5->SetHasEvents(node5->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_1_node6* node6 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_1_node6;
					node6->SetClassNameString("DecoratorWeight");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Action_bt_node_test_selector_probability_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_1_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_probability_ut_2

	class SelectorProbability_bt_node_test_selector_probability_ut_2_node0 : public SelectorProbability
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SelectorProbability_bt_node_test_selector_probability_ut_2_node0, SelectorProbability);
		SelectorProbability_bt_node_test_selector_probability_ut_2_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_2_node4 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_2_node4, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_2_node4()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 0;
		}
	};

	class Action_bt_node_test_selector_probability_ut_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_2_node1, Action);
		Action_bt_node_test_selector_probability_ut_2_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_2_node5 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_2_node5, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_2_node5()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 0;
		}
	};

	class Action_bt_node_test_selector_probability_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_2_node2, Action);
		Action_bt_node_test_selector_probability_ut_2_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class DecoratorWeight_bt_node_test_selector_probability_ut_2_node6 : public DecoratorWeight
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorWeight_bt_node_test_selector_probability_ut_2_node6, DecoratorWeight);
		DecoratorWeight_bt_node_test_selector_probability_ut_2_node6()
		{
			m_bDecorateWhenChildEnds = false;
		}
	protected:
		virtual int GetWeight(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 0;
		}
	};

	class Action_bt_node_test_selector_probability_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_probability_ut_2_node3, Action);
		Action_bt_node_test_selector_probability_ut_2_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_probability_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_probability_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorProbability_bt_node_test_selector_probability_ut_2_node0* node0 = BEHAVIAC_NEW SelectorProbability_bt_node_test_selector_probability_ut_2_node0;
				node0->SetClassNameString("SelectorProbability");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_2_node4* node4 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_2_node4;
					node4->SetClassNameString("DecoratorWeight");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node4);
					{
						Action_bt_node_test_selector_probability_ut_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_2_node1;
						node1->SetClassNameString("Action");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("AgentNodeTest");
#endif
						node4->AddChild(node1);
						node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_2_node5* node5 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_2_node5;
					node5->SetClassNameString("DecoratorWeight");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node5);
					{
						Action_bt_node_test_selector_probability_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_2_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("AgentNodeTest");
#endif
						node5->AddChild(node2);
						node5->SetHasEvents(node5->HasEvents() | node2->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					DecoratorWeight_bt_node_test_selector_probability_ut_2_node6* node6 = BEHAVIAC_NEW DecoratorWeight_bt_node_test_selector_probability_ut_2_node6;
					node6->SetClassNameString("DecoratorWeight");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node6);
					{
						Action_bt_node_test_selector_probability_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_probability_ut_2_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node6->AddChild(node3);
						node6->SetHasEvents(node6->HasEvents() | node3->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_stochastic_ut_0

	class SelectorStochastic_bt_node_test_selector_stochastic_ut_0_node0 : public SelectorStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SelectorStochastic_bt_node_test_selector_stochastic_ut_0_node0, SelectorStochastic);
		SelectorStochastic_bt_node_test_selector_stochastic_ut_0_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_selector_stochastic_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_stochastic_ut_0_node1, Action);
		Action_bt_node_test_selector_stochastic_ut_0_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_stochastic_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_stochastic_ut_0_node2, Action);
		Action_bt_node_test_selector_stochastic_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_stochastic_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_stochastic_ut_0_node3, Action);
		Action_bt_node_test_selector_stochastic_ut_0_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_stochastic_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_stochastic_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorStochastic_bt_node_test_selector_stochastic_ut_0_node0* node0 = BEHAVIAC_NEW SelectorStochastic_bt_node_test_selector_stochastic_ut_0_node0;
				node0->SetClassNameString("SelectorStochastic");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_stochastic_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_stochastic_ut_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_selector_stochastic_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_stochastic_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_selector_stochastic_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_stochastic_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_stochastic_ut_1

	class SelectorStochastic_bt_node_test_selector_stochastic_ut_1_node0 : public SelectorStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SelectorStochastic_bt_node_test_selector_stochastic_ut_1_node0, SelectorStochastic);
		SelectorStochastic_bt_node_test_selector_stochastic_ut_1_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_selector_stochastic_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_stochastic_ut_1_node1, Action);
		Action_bt_node_test_selector_stochastic_ut_1_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_stochastic_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_stochastic_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorStochastic_bt_node_test_selector_stochastic_ut_1_node0* node0 = BEHAVIAC_NEW SelectorStochastic_bt_node_test_selector_stochastic_ut_1_node0;
				node0->SetClassNameString("SelectorStochastic");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_stochastic_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_stochastic_ut_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					True* node2 = BEHAVIAC_NEW True;
					node2->SetClassNameString("True");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					True* node3 = BEHAVIAC_NEW True;
					node3->SetClassNameString("True");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_stochastic_ut_2

	class SelectorStochastic_bt_node_test_selector_stochastic_ut_2_node4 : public SelectorStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SelectorStochastic_bt_node_test_selector_stochastic_ut_2_node4, SelectorStochastic);
		SelectorStochastic_bt_node_test_selector_stochastic_ut_2_node4()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_selector_stochastic_ut_2_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_stochastic_ut_2_node5, Action);
		Action_bt_node_test_selector_stochastic_ut_2_node5()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_stochastic_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_stochastic_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SelectorStochastic_bt_node_test_selector_stochastic_ut_2_node4* node4 = BEHAVIAC_NEW SelectorStochastic_bt_node_test_selector_stochastic_ut_2_node4;
				node4->SetClassNameString("SelectorStochastic");
				node4->SetId(4);
#if !BEHAVIAC_RELEASE
				node4->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node4);
				{
					Action_bt_node_test_selector_stochastic_ut_2_node5* node5 = BEHAVIAC_NEW Action_bt_node_test_selector_stochastic_ut_2_node5;
					node5->SetClassNameString("Action");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("AgentNodeTest");
#endif
					node4->AddChild(node5);
					node4->SetHasEvents(node4->HasEvents() | node5->HasEvents());
				}
				{
					False* node0 = BEHAVIAC_NEW False;
					node0->SetClassNameString("False");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node4->AddChild(node0);
					node4->SetHasEvents(node4->HasEvents() | node0->HasEvents());
				}
				{
					True* node2 = BEHAVIAC_NEW True;
					node2->SetClassNameString("True");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node4->AddChild(node2);
					node4->SetHasEvents(node4->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node4->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_ut_0

	class Action_bt_node_test_selector_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_0_node1, Action);
		Action_bt_node_test_selector_ut_0_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_0_node2, Action);
		Action_bt_node_test_selector_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_0_node3, Action);
		Action_bt_node_test_selector_ut_0_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_selector_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_ut_1

	class Action_bt_node_test_selector_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_1_node1, Action);
		Action_bt_node_test_selector_ut_1_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_1_node2, Action);
		Action_bt_node_test_selector_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_1_node3, Action);
		Action_bt_node_test_selector_ut_1_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_selector_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_1_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_ut_2

	class Action_bt_node_test_selector_ut_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_2_node1, Action);
		Action_bt_node_test_selector_ut_2_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_2_node2, Action);
		Action_bt_node_test_selector_ut_2_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_2_node3, Action);
		Action_bt_node_test_selector_ut_2_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_ut_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_2_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_2_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_ut_3

	class Action_bt_node_test_selector_ut_3_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_3_node1, Action);
		Action_bt_node_test_selector_ut_3_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_3_node2, Action);
		Action_bt_node_test_selector_ut_3_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_3_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_3_node3, Action);
		Action_bt_node_test_selector_ut_3_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_selector_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_ut_3_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_3_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_3_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_3_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_ut_4

	class Action_bt_node_test_selector_ut_4_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_4_node1, Action);
		Action_bt_node_test_selector_ut_4_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_4_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_4_node2, Action);
		Action_bt_node_test_selector_ut_4_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_4_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_4_node3, Action);
		Action_bt_node_test_selector_ut_4_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_ut_4
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_ut_4");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node0 = BEHAVIAC_NEW Selector;
				node0->SetClassNameString("Selector");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_selector_ut_4_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_4_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_4_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_4_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_selector_ut_4_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_4_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/selector_ut_5

	class Condition_bt_node_test_selector_ut_5_node5 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_ut_5_node5, Condition);
		Condition_bt_node_test_selector_ut_5_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EnumTest& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor, EnumTest >();
			EnumTest opr = EnumTest_One;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_ut_5_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_5_node1, Action);
		Action_bt_node_test_selector_ut_5_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Condition_bt_node_test_selector_ut_5_node7 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_ut_5_node7, Condition);
		Condition_bt_node_test_selector_ut_5_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EnumTest& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor, EnumTest >();
			EnumTest opr = EnumTest_OneAfterOne;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_ut_5_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_5_node8, Action);
		Action_bt_node_test_selector_ut_5_node8()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_5_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_5_node3, Action);
		Action_bt_node_test_selector_ut_5_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Condition_bt_node_test_selector_ut_5_node11 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_ut_5_node11, Condition);
		Condition_bt_node_test_selector_ut_5_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EnumTest& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor, EnumTest >();
			EnumTest opr = EnumTest_One;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_ut_5_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_5_node12, Action);
		Action_bt_node_test_selector_ut_5_node12()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Condition_bt_node_test_selector_ut_5_node14 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_node_test_selector_ut_5_node14, Condition);
		Condition_bt_node_test_selector_ut_5_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EnumTest& opl = ((AgentNodeTest*)pAgent)->_Get_Property_<PROPERTY_TYPE_AgentNodeTest_testColor, EnumTest >();
			EnumTest opr = EnumTest_OneAfterOne;
			bool op = Details::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_node_test_selector_ut_5_node15 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_5_node15, Action);
		Action_bt_node_test_selector_ut_5_node15()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_selector_ut_5_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_selector_ut_5_node16, Action);
		Action_bt_node_test_selector_ut_5_node16()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_selector_ut_5
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/selector_ut_5");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Selector* node2 = BEHAVIAC_NEW Selector;
				node2->SetClassNameString("Selector");
				node2->SetId(2);
#if !BEHAVIAC_RELEASE
				node2->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node2);
				{
					Selector* node0 = BEHAVIAC_NEW Selector;
					node0->SetClassNameString("Selector");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node2->AddChild(node0);
					{
						Sequence* node4 = BEHAVIAC_NEW Sequence;
						node4->SetClassNameString("Sequence");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node4);
						{
							Condition_bt_node_test_selector_ut_5_node5* node5 = BEHAVIAC_NEW Condition_bt_node_test_selector_ut_5_node5;
							node5->SetClassNameString("Condition");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node5);
							node4->SetHasEvents(node4->HasEvents() | node5->HasEvents());
						}
						{
							Action_bt_node_test_selector_ut_5_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_5_node1;
							node1->SetClassNameString("Action");
							node1->SetId(1);
#if !BEHAVIAC_RELEASE
							node1->SetAgentType("AgentNodeTest");
#endif
							node4->AddChild(node1);
							node4->SetHasEvents(node4->HasEvents() | node1->HasEvents());
						}
						node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
					}
					{
						Sequence* node6 = BEHAVIAC_NEW Sequence;
						node6->SetClassNameString("Sequence");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node6);
						{
							Condition_bt_node_test_selector_ut_5_node7* node7 = BEHAVIAC_NEW Condition_bt_node_test_selector_ut_5_node7;
							node7->SetClassNameString("Condition");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("AgentNodeTest");
#endif
							node6->AddChild(node7);
							node6->SetHasEvents(node6->HasEvents() | node7->HasEvents());
						}
						{
							Action_bt_node_test_selector_ut_5_node8* node8 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_5_node8;
							node8->SetClassNameString("Action");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("AgentNodeTest");
#endif
							node6->AddChild(node8);
							node6->SetHasEvents(node6->HasEvents() | node8->HasEvents());
						}
						node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
					}
					{
						Action_bt_node_test_selector_ut_5_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_5_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("AgentNodeTest");
#endif
						node0->AddChild(node3);
						node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
					}
					node2->SetHasEvents(node2->HasEvents() | node0->HasEvents());
				}
				{
					Selector* node9 = BEHAVIAC_NEW Selector;
					node9->SetClassNameString("Selector");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("AgentNodeTest");
#endif
					node2->AddChild(node9);
					{
						Sequence* node10 = BEHAVIAC_NEW Sequence;
						node10->SetClassNameString("Sequence");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node10);
						{
							Condition_bt_node_test_selector_ut_5_node11* node11 = BEHAVIAC_NEW Condition_bt_node_test_selector_ut_5_node11;
							node11->SetClassNameString("Condition");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("AgentNodeTest");
#endif
							node10->AddChild(node11);
							node10->SetHasEvents(node10->HasEvents() | node11->HasEvents());
						}
						{
							Action_bt_node_test_selector_ut_5_node12* node12 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_5_node12;
							node12->SetClassNameString("Action");
							node12->SetId(12);
#if !BEHAVIAC_RELEASE
							node12->SetAgentType("AgentNodeTest");
#endif
							node10->AddChild(node12);
							node10->SetHasEvents(node10->HasEvents() | node12->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node10->HasEvents());
					}
					{
						Sequence* node13 = BEHAVIAC_NEW Sequence;
						node13->SetClassNameString("Sequence");
						node13->SetId(13);
#if !BEHAVIAC_RELEASE
						node13->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node13);
						{
							Condition_bt_node_test_selector_ut_5_node14* node14 = BEHAVIAC_NEW Condition_bt_node_test_selector_ut_5_node14;
							node14->SetClassNameString("Condition");
							node14->SetId(14);
#if !BEHAVIAC_RELEASE
							node14->SetAgentType("AgentNodeTest");
#endif
							node13->AddChild(node14);
							node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
						}
						{
							Action_bt_node_test_selector_ut_5_node15* node15 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_5_node15;
							node15->SetClassNameString("Action");
							node15->SetId(15);
#if !BEHAVIAC_RELEASE
							node15->SetAgentType("AgentNodeTest");
#endif
							node13->AddChild(node15);
							node13->SetHasEvents(node13->HasEvents() | node15->HasEvents());
						}
						node9->SetHasEvents(node9->HasEvents() | node13->HasEvents());
					}
					{
						Action_bt_node_test_selector_ut_5_node16* node16 = BEHAVIAC_NEW Action_bt_node_test_selector_ut_5_node16;
						node16->SetClassNameString("Action");
						node16->SetId(16);
#if !BEHAVIAC_RELEASE
						node16->SetAgentType("AgentNodeTest");
#endif
						node9->AddChild(node16);
						node9->SetHasEvents(node9->HasEvents() | node16->HasEvents());
					}
					node2->SetHasEvents(node2->HasEvents() | node9->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node2->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_stochastic_ut_0

	class SequenceStochastic_bt_node_test_sequence_stochastic_ut_0_node0 : public SequenceStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SequenceStochastic_bt_node_test_sequence_stochastic_ut_0_node0, SequenceStochastic);
		SequenceStochastic_bt_node_test_sequence_stochastic_ut_0_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_sequence_stochastic_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_stochastic_ut_0_node1, Action);
		Action_bt_node_test_sequence_stochastic_ut_0_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_stochastic_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_stochastic_ut_0_node2, Action);
		Action_bt_node_test_sequence_stochastic_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_stochastic_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_stochastic_ut_0_node3, Action);
		Action_bt_node_test_sequence_stochastic_ut_0_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_sequence_stochastic_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_stochastic_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SequenceStochastic_bt_node_test_sequence_stochastic_ut_0_node0* node0 = BEHAVIAC_NEW SequenceStochastic_bt_node_test_sequence_stochastic_ut_0_node0;
				node0->SetClassNameString("SequenceStochastic");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_sequence_stochastic_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_stochastic_ut_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_sequence_stochastic_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_sequence_stochastic_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_sequence_stochastic_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_sequence_stochastic_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_stochastic_ut_1

	class SequenceStochastic_bt_node_test_sequence_stochastic_ut_1_node0 : public SequenceStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SequenceStochastic_bt_node_test_sequence_stochastic_ut_1_node0, SequenceStochastic);
		SequenceStochastic_bt_node_test_sequence_stochastic_ut_1_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_sequence_stochastic_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_stochastic_ut_1_node1, Action);
		Action_bt_node_test_sequence_stochastic_ut_1_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_sequence_stochastic_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_stochastic_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SequenceStochastic_bt_node_test_sequence_stochastic_ut_1_node0* node0 = BEHAVIAC_NEW SequenceStochastic_bt_node_test_sequence_stochastic_ut_1_node0;
				node0->SetClassNameString("SequenceStochastic");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_sequence_stochastic_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_stochastic_ut_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					False* node2 = BEHAVIAC_NEW False;
					node2->SetClassNameString("False");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					False* node3 = BEHAVIAC_NEW False;
					node3->SetClassNameString("False");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_stochastic_ut_2

	class SequenceStochastic_bt_node_test_sequence_stochastic_ut_2_node0 : public SequenceStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SequenceStochastic_bt_node_test_sequence_stochastic_ut_2_node0, SequenceStochastic);
		SequenceStochastic_bt_node_test_sequence_stochastic_ut_2_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_sequence_stochastic_ut_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_stochastic_ut_2_node1, Action);
		Action_bt_node_test_sequence_stochastic_ut_2_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_sequence_stochastic_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_stochastic_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SequenceStochastic_bt_node_test_sequence_stochastic_ut_2_node0* node0 = BEHAVIAC_NEW SequenceStochastic_bt_node_test_sequence_stochastic_ut_2_node0;
				node0->SetClassNameString("SequenceStochastic");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					False* node2 = BEHAVIAC_NEW False;
					node2->SetClassNameString("False");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_sequence_stochastic_ut_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_stochastic_ut_2_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					False* node3 = BEHAVIAC_NEW False;
					node3->SetClassNameString("False");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_stochastic_ut_3

	class SequenceStochastic_bt_node_test_sequence_stochastic_ut_3_node0 : public SequenceStochastic
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(SequenceStochastic_bt_node_test_sequence_stochastic_ut_3_node0, SequenceStochastic);
		SequenceStochastic_bt_node_test_sequence_stochastic_ut_3_node0()
		{
		}
	public:
		void Initialize(const char* method)
		{
			this->m_method = Action::LoadMethod(method);
		}
	};

	class Action_bt_node_test_sequence_stochastic_ut_3_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_stochastic_ut_3_node1, Action);
		Action_bt_node_test_sequence_stochastic_ut_3_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class bt_node_test_sequence_stochastic_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_stochastic_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				SequenceStochastic_bt_node_test_sequence_stochastic_ut_3_node0* node0 = BEHAVIAC_NEW SequenceStochastic_bt_node_test_sequence_stochastic_ut_3_node0;
				node0->SetClassNameString("SequenceStochastic");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					False* node2 = BEHAVIAC_NEW False;
					node2->SetClassNameString("False");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					False* node3 = BEHAVIAC_NEW False;
					node3->SetClassNameString("False");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_node_test_sequence_stochastic_ut_3_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_stochastic_ut_3_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_ut_0

	class Action_bt_node_test_sequence_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_0_node1, Action);
		Action_bt_node_test_sequence_ut_0_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_0_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_0_node2, Action);
		Action_bt_node_test_sequence_ut_0_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_0_node3, Action);
		Action_bt_node_test_sequence_ut_0_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_sequence_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_sequence_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_0_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_0_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_ut_1

	class Action_bt_node_test_sequence_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_1_node1, Action);
		Action_bt_node_test_sequence_ut_1_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_1_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_1_node2, Action);
		Action_bt_node_test_sequence_ut_1_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_1_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_1_node3, Action);
		Action_bt_node_test_sequence_ut_1_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_sequence_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_sequence_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_1_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_1_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_1_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_1_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_ut_2

	class Action_bt_node_test_sequence_ut_2_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_2_node1, Action);
		Action_bt_node_test_sequence_ut_2_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_2_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_2_node2, Action);
		Action_bt_node_test_sequence_ut_2_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_2_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_2_node3, Action);
		Action_bt_node_test_sequence_ut_2_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_sequence_ut_2
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_ut_2");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_sequence_ut_2_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_2_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_2_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_2_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_2_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_2_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/sequence_ut_3

	class Action_bt_node_test_sequence_ut_3_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_3_node1, Action);
		Action_bt_node_test_sequence_ut_3_node1()
		{
			method_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_3_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_3_node2, Action);
		Action_bt_node_test_sequence_ut_3_node2()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_sequence_ut_3_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_sequence_ut_3_node3, Action);
		Action_bt_node_test_sequence_ut_3_node3()
		{
			method_p0 = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_FAILURE;
		}
		int method_p0;
	};

	class bt_node_test_sequence_ut_3
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/sequence_ut_3");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_sequence_ut_3_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_3_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_3_node2* node2 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_3_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Action_bt_node_test_sequence_ut_3_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_sequence_ut_3_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/wait_ut_0

	class Action_bt_node_test_wait_ut_0_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_wait_ut_0_node1, Action);
		Action_bt_node_test_wait_ut_0_node1()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Action_bt_node_test_wait_ut_0_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_wait_ut_0_node3, Action);
		Action_bt_node_test_wait_ut_0_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_initChildAgentTest, void >();
			return BT_SUCCESS;
		}
	};

	class Wait_bt_node_test_wait_ut_0_node2 : public Wait
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Wait_bt_node_test_wait_ut_0_node2, Wait);
		Wait_bt_node_test_wait_ut_0_node2()
		{
		}
	protected:
		virtual double GetTime(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			Agent* pAgent_Time = Agent::GetInstance(pAgent, "par_child_agent_1");
			BEHAVIAC_ASSERT(pAgent_Time);
			return ((ChildNodeTest*)pAgent_Time)->_Execute_Method_<METHOD_TYPE_ChildNodeTest_GetConstDoubleValue, double >();
		}
	};

	class bt_node_test_wait_ut_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/wait_ut_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_wait_ut_0_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_wait_ut_0_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_node_test_wait_ut_0_node3* node3 = BEHAVIAC_NEW Action_bt_node_test_wait_ut_0_node3;
					node3->SetClassNameString("Action");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Wait_bt_node_test_wait_ut_0_node2* node2 = BEHAVIAC_NEW Wait_bt_node_test_wait_ut_0_node2;
					node2->SetClassNameString("Wait");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: node_test/wait_ut_1

	class Action_bt_node_test_wait_ut_1_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_node_test_wait_ut_1_node1, Action);
		Action_bt_node_test_wait_ut_1_node1()
		{
			method_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_0, void, int >(method_p0);
			return BT_SUCCESS;
		}
		int method_p0;
	};

	class Wait_bt_node_test_wait_ut_1_node2 : public Wait
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Wait_bt_node_test_wait_ut_1_node2, Wait);
		Wait_bt_node_test_wait_ut_1_node2()
		{
		}
	protected:
		virtual double GetTime(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 1000;
		}
	};

	class bt_node_test_wait_ut_1
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("node_test/wait_ut_1");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_node_test_wait_ut_1_node1* node1 = BEHAVIAC_NEW Action_bt_node_test_wait_ut_1_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Wait_bt_node_test_wait_ut_1_node2* node2 = BEHAVIAC_NEW Wait_bt_node_test_wait_ut_1_node2;
					node2->SetClassNameString("Wait");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("AgentNodeTest");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/const_param

	class Assignment_bt_par_test_const_param_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_const_param_node0, Assignment);
		Assignment_bt_par_test_const_param_node0()
		{
			opr_p0 = true;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >() = opr;
			return result;
		}
		bool opr_p0;
	};

	class Assignment_bt_par_test_const_param_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_const_param_node1, Assignment);
		Assignment_bt_par_test_const_param_node1()
		{
			opr_p0 = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >() = opr;
			return result;
		}
		unsigned char opr_p0;
	};

	class Assignment_bt_par_test_const_param_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_const_param_node2, Assignment);
		Assignment_bt_par_test_const_param_node2()
		{
			opr_p0.reserve(2);
			bool opr_p0_item0 = true;
			opr_p0.push_back(opr_p0_item0);
			bool opr_p0_item1 = true;
			opr_p0.push_back(opr_p0_item1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<bool> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >() = opr;
			return result;
		}
		behaviac::vector<bool> opr_p0;
	};

	class bt_par_test_const_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/const_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// children
			{
				Sequence* node22 = BEHAVIAC_NEW Sequence;
				node22->SetClassNameString("Sequence");
				node22->SetId(22);
#if !BEHAVIAC_RELEASE
				node22->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node22);
				{
					Assignment_bt_par_test_const_param_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_const_param_node0;
					node0->SetClassNameString("Assignment");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("EmployeeParTestAgent");
#endif
					node22->AddChild(node0);
					node22->SetHasEvents(node22->HasEvents() | node0->HasEvents());
				}
				{
					Assignment_bt_par_test_const_param_node1* node1 = BEHAVIAC_NEW Assignment_bt_par_test_const_param_node1;
					node1->SetClassNameString("Assignment");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node22->AddChild(node1);
					node22->SetHasEvents(node22->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_par_test_const_param_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_const_param_node2;
					node2->SetClassNameString("Assignment");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("EmployeeParTestAgent");
#endif
					node22->AddChild(node2);
					node22->SetHasEvents(node22->HasEvents() | node2->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node22->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/custom_property_as_left_value_and_param

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node0, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Bool") == 130231588u);
			pAgent->SetVariable("c_Bool", opr, 130231588u);
			return result;
		}
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node1, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node1()
		{
			opr.reserve(2);
			int opr_item0 = 1;
			opr.push_back(opr_item0);
			int opr_item1 = 2;
			opr.push_back(opr_item1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_IntArray") == 1799035077u);
			pAgent->SetVariable("c_IntArray", opr, 1799035077u);
			return result;
		}
		behaviac::vector<int> opr;
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node2, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node2()
		{
			opr = (char*)("test string");
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_StaticString") == 2438934774u);
			pAgent->SetVariable("c_StaticString", opr, 2438934774u);
			return result;
		}
		string opr;
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node3, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::NE::NAT::eColor opr = TNS::NE::NAT::GREEN;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Enum") == 99975606u);
			pAgent->SetVariable("c_Enum", opr, 99975606u);
			return result;
		}
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node4, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 2;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_Int") == 337932423u);
			pAgent->SetVariable("l_Int", opr, 337932423u);
			return result;
		}
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node11, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node11()
		{
			opr.x = 1;
			opr.y = 1;
			opr.z = 1;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			((CustomPropertyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_Location, UnityEngine::Vector3 >() = opr;
			return result;
		}
		UnityEngine::Vector3 opr;
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node8, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			UnityEngine::Vector3 opr = ((CustomPropertyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_Location, UnityEngine::Vector3 >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Location") == 1335260864u);
			pAgent->SetVariable("c_Location", opr, 1335260864u);
			return result;
		}
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node9, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node9()
		{
			opr.x = 2;
			opr.y = 2;
			opr.z = 2;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_Location") == 3698229766u);
			pAgent->SetVariable("l_Location", opr, 3698229766u);
			return result;
		}
		UnityEngine::Vector3 opr;
	};

	class Assignment_bt_par_test_custom_property_as_left_value_and_param_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_as_left_value_and_param_node10, Assignment);
		Assignment_bt_par_test_custom_property_as_left_value_and_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_Location") == 3698229766u);
			UnityEngine::Vector3& opr = (UnityEngine::Vector3&)pAgent->GetVariable<UnityEngine::Vector3 >(3698229766u);
			((CustomPropertyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_CustomPropertyAgent_Location, UnityEngine::Vector3 >() = opr;
			return result;
		}
	};

	class DecoratorLoop_bt_par_test_custom_property_as_left_value_and_param_node6 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_par_test_custom_property_as_left_value_and_param_node6, DecoratorLoop);
		DecoratorLoop_bt_par_test_custom_property_as_left_value_and_param_node6()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class bt_par_test_custom_property_as_left_value_and_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/custom_property_as_left_value_and_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("CustomPropertyAgent");
#endif
			// pars
			pBT->AddPar("CustomPropertyAgent", "int", "l_Int", "1");
			pBT->AddPar("CustomPropertyAgent", "UnityEngine::Vector3", "l_Location", "{x=0;y=0;z=0;}");
			// children
			{
				Sequence* node5 = BEHAVIAC_NEW Sequence;
				node5->SetClassNameString("Sequence");
				node5->SetId(5);
#if !BEHAVIAC_RELEASE
				node5->SetAgentType("CustomPropertyAgent");
#endif
				pBT->AddChild(node5);
				{
					Sequence* node13 = BEHAVIAC_NEW Sequence;
					node13->SetClassNameString("Sequence");
					node13->SetId(13);
#if !BEHAVIAC_RELEASE
					node13->SetAgentType("CustomPropertyAgent");
#endif
					node5->AddChild(node13);
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node0;
						node0->SetClassNameString("Assignment");
						node0->SetId(0);
#if !BEHAVIAC_RELEASE
						node0->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node0);
						node13->SetHasEvents(node13->HasEvents() | node0->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node1* node1 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node1;
						node1->SetClassNameString("Assignment");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node1);
						node13->SetHasEvents(node13->HasEvents() | node1->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node2;
						node2->SetClassNameString("Assignment");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node2);
						node13->SetHasEvents(node13->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node3* node3 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node3;
						node3->SetClassNameString("Assignment");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node3);
						node13->SetHasEvents(node13->HasEvents() | node3->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node4;
						node4->SetClassNameString("Assignment");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node4);
						node13->SetHasEvents(node13->HasEvents() | node4->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node11;
						node11->SetClassNameString("Assignment");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node11);
						node13->SetHasEvents(node13->HasEvents() | node11->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node8;
						node8->SetClassNameString("Assignment");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node8);
						node13->SetHasEvents(node13->HasEvents() | node8->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node9;
						node9->SetClassNameString("Assignment");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node9);
						node13->SetHasEvents(node13->HasEvents() | node9->HasEvents());
					}
					{
						Assignment_bt_par_test_custom_property_as_left_value_and_param_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_as_left_value_and_param_node10;
						node10->SetClassNameString("Assignment");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node10);
						node13->SetHasEvents(node13->HasEvents() | node10->HasEvents());
					}
					node5->SetHasEvents(node5->HasEvents() | node13->HasEvents());
				}
				{
					DecoratorLoop_bt_par_test_custom_property_as_left_value_and_param_node6* node6 = BEHAVIAC_NEW DecoratorLoop_bt_par_test_custom_property_as_left_value_and_param_node6;
					node6->SetClassNameString("DecoratorLoop");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("CustomPropertyAgent");
#endif
					node5->AddChild(node6);
					{
						Noop* node7 = BEHAVIAC_NEW Noop;
						node7->SetClassNameString("Noop");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("CustomPropertyAgent");
#endif
						node6->AddChild(node7);
						node6->SetHasEvents(node6->HasEvents() | node7->HasEvents());
					}
					node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node5->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/custom_property_reset

	class Action_bt_par_test_custom_property_reset_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_custom_property_reset_node1, Action);
		Action_bt_par_test_custom_property_reset_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("testInt") == 2614050066u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(2614050066u);
			((AgentNodeTest*)pAgent)->_Execute_Method_<METHOD_TYPE_AgentNodeTest_setTestVar_1, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Assignment_bt_par_test_custom_property_reset_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_custom_property_reset_node0, Assignment);
		Assignment_bt_par_test_custom_property_reset_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 20;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("testInt") == 2614050066u);
			pAgent->SetVariable("testInt", opr, 2614050066u);
			return result;
		}
	};

	class bt_par_test_custom_property_reset
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/custom_property_reset");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("AgentNodeTest");
#endif
			// pars
			pBT->AddPar("AgentNodeTest", "int", "l_Int", "1");
			pBT->AddPar("AgentNodeTest", "UnityEngine::Vector3", "l_Location", "{x=0;y=0;z=0;}");
			// children
			{
				Sequence* node5 = BEHAVIAC_NEW Sequence;
				node5->SetClassNameString("Sequence");
				node5->SetId(5);
#if !BEHAVIAC_RELEASE
				node5->SetAgentType("AgentNodeTest");
#endif
				pBT->AddChild(node5);
				{
					Action_bt_par_test_custom_property_reset_node1* node1 = BEHAVIAC_NEW Action_bt_par_test_custom_property_reset_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("AgentNodeTest");
#endif
					node5->AddChild(node1);
					node5->SetHasEvents(node5->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_par_test_custom_property_reset_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_custom_property_reset_node0;
					node0->SetClassNameString("Assignment");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("AgentNodeTest");
#endif
					node5->AddChild(node0);
					node5->SetHasEvents(node5->HasEvents() | node0->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node5->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/local_out_scope

	class Assignment_bt_par_test_local_out_scope_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_local_out_scope_node0, Assignment);
		Assignment_bt_par_test_local_out_scope_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr = true;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Bool") == 130231588u);
			pAgent->SetVariable("c_Bool", opr, 130231588u);
			return result;
		}
	};

	class Assignment_bt_par_test_local_out_scope_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_local_out_scope_node1, Assignment);
		Assignment_bt_par_test_local_out_scope_node1()
		{
			opr.reserve(2);
			int opr_item0 = 1;
			opr.push_back(opr_item0);
			int opr_item1 = 2;
			opr.push_back(opr_item1);
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_IntArray") == 1799035077u);
			pAgent->SetVariable("c_IntArray", opr, 1799035077u);
			return result;
		}
		behaviac::vector<int> opr;
	};

	class Assignment_bt_par_test_local_out_scope_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_local_out_scope_node2, Assignment);
		Assignment_bt_par_test_local_out_scope_node2()
		{
			opr = (char*)("test string");
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_StaticString") == 2438934774u);
			pAgent->SetVariable("c_StaticString", opr, 2438934774u);
			return result;
		}
		string opr;
	};

	class Assignment_bt_par_test_local_out_scope_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_local_out_scope_node3, Assignment);
		Assignment_bt_par_test_local_out_scope_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::NE::NAT::eColor opr = TNS::NE::NAT::GREEN;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Enum") == 99975606u);
			pAgent->SetVariable("c_Enum", opr, 99975606u);
			return result;
		}
	};

	class DecoratorLoop_bt_par_test_local_out_scope_node6 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_par_test_local_out_scope_node6, DecoratorLoop);
		DecoratorLoop_bt_par_test_local_out_scope_node6()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return 2;
		}
	};

	class bt_par_test_local_out_scope
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/local_out_scope");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("CustomPropertyAgent");
#endif
			// pars
			pBT->AddPar("CustomPropertyAgent", "vector<int>", "l_IntArray", "2:2|3");
			// children
			{
				Sequence* node5 = BEHAVIAC_NEW Sequence;
				node5->SetClassNameString("Sequence");
				node5->SetId(5);
#if !BEHAVIAC_RELEASE
				node5->SetAgentType("CustomPropertyAgent");
#endif
				pBT->AddChild(node5);
				{
					Sequence* node13 = BEHAVIAC_NEW Sequence;
					node13->SetClassNameString("Sequence");
					node13->SetId(13);
#if !BEHAVIAC_RELEASE
					node13->SetAgentType("CustomPropertyAgent");
#endif
					node5->AddChild(node13);
					{
						Assignment_bt_par_test_local_out_scope_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_local_out_scope_node0;
						node0->SetClassNameString("Assignment");
						node0->SetId(0);
#if !BEHAVIAC_RELEASE
						node0->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node0);
						node13->SetHasEvents(node13->HasEvents() | node0->HasEvents());
					}
					{
						Assignment_bt_par_test_local_out_scope_node1* node1 = BEHAVIAC_NEW Assignment_bt_par_test_local_out_scope_node1;
						node1->SetClassNameString("Assignment");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node1);
						node13->SetHasEvents(node13->HasEvents() | node1->HasEvents());
					}
					{
						Assignment_bt_par_test_local_out_scope_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_local_out_scope_node2;
						node2->SetClassNameString("Assignment");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node2);
						node13->SetHasEvents(node13->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_par_test_local_out_scope_node3* node3 = BEHAVIAC_NEW Assignment_bt_par_test_local_out_scope_node3;
						node3->SetClassNameString("Assignment");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("CustomPropertyAgent");
#endif
						node13->AddChild(node3);
						node13->SetHasEvents(node13->HasEvents() | node3->HasEvents());
					}
					node5->SetHasEvents(node5->HasEvents() | node13->HasEvents());
				}
				{
					DecoratorLoop_bt_par_test_local_out_scope_node6* node6 = BEHAVIAC_NEW DecoratorLoop_bt_par_test_local_out_scope_node6;
					node6->SetClassNameString("DecoratorLoop");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("CustomPropertyAgent");
#endif
					node5->AddChild(node6);
					{
						Noop* node7 = BEHAVIAC_NEW Noop;
						node7->SetClassNameString("Noop");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("CustomPropertyAgent");
#endif
						node6->AddChild(node7);
						node6->SetHasEvents(node6->HasEvents() | node7->HasEvents());
					}
					node5->SetHasEvents(node5->HasEvents() | node6->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node5->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/par_as_left_value_and_param

	class Assignment_bt_par_test_par_as_left_value_and_param_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node0, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_0") == 3876418331u);
			behaviac::Agent*& opr_p0 = (behaviac::Agent*&)pAgent->GetVariable<behaviac::Agent* >(3876418331u);
			behaviac::Agent* opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentIR, behaviac::Agent*, behaviac::Agent* >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_0") == 3876418331u);
			pAgent->SetVariable("par2_agent_0", opr, 3876418331u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node30 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node30, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node30()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ParTestAgentBase_0") == 2489994139u);
			ParTestAgentBase*& opr_p0 = (ParTestAgentBase*&)pAgent->GetVariable<ParTestAgentBase* >(2489994139u);
			ParTestAgentBase* opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseIR, ParTestAgentBase*, ParTestAgentBase* >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ParTestAgentBase_0") == 2489994139u);
			pAgent->SetVariable("par2_ParTestAgentBase_0", opr, 2489994139u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node15 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node15, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_list_0") == 1126732011u);
			behaviac::vector<behaviac::Agent*>& opr_p0 = (behaviac::vector<behaviac::Agent*>&)pAgent->GetVariable<behaviac::vector<behaviac::Agent*> >(1126732011u);
			behaviac::vector<behaviac::Agent*> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR, behaviac::vector<behaviac::Agent*>, behaviac::vector<behaviac::Agent*> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_list_0") == 1126732011u);
			pAgent->SetVariable("par2_agent_list_0", opr, 1126732011u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node31 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node31, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node31()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ParTestAgentBaseList_0") == 3110436684u);
			behaviac::vector<ParTestAgentBase*>& opr_p0 = (behaviac::vector<ParTestAgentBase*>&)pAgent->GetVariable<behaviac::vector<ParTestAgentBase*> >(3110436684u);
			behaviac::vector<ParTestAgentBase*> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ParTestAgentBaseListIR, behaviac::vector<ParTestAgentBase*>, behaviac::vector<ParTestAgentBase*> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ParTestAgentBaseList_0") == 3110436684u);
			pAgent->SetVariable("par2_ParTestAgentBaseList_0", opr, 3110436684u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node2, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_double_0") == 2183367433u);
			double& opr_p0 = (double&)pAgent->GetVariable<double >(2183367433u);
			double opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleIR, double, double >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_double_0") == 2183367433u);
			pAgent->SetVariable("par2_double_0", opr, 2183367433u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node3, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_0") == 3120166065u);
			float& opr_p0 = (float&)pAgent->GetVariable<float >(3120166065u);
			float opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR, float, float >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_0") == 3120166065u);
			pAgent->SetVariable("par2_single_0", opr, 3120166065u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node4, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_list_0") == 3448877207u);
			behaviac::vector<float>& opr_p0 = (behaviac::vector<float>&)pAgent->GetVariable<behaviac::vector<float> >(3448877207u);
			behaviac::vector<float> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR, behaviac::vector<float>, behaviac::vector<float> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_list_0") == 3448877207u);
			pAgent->SetVariable("par2_single_list_0", opr, 3448877207u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node5, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_0") == 351984746u);
			string& opr_p0 = (string&)pAgent->GetVariable<string >(351984746u);
			string opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR, string, string& >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_0") == 351984746u);
			pAgent->SetVariable("par2_string_0", opr, 351984746u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node6, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_list_0") == 1339885043u);
			behaviac::vector<string>& opr_p0 = (behaviac::vector<string>&)pAgent->GetVariable<behaviac::vector<string> >(1339885043u);
			behaviac::vector<string> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR, behaviac::vector<string>, behaviac::vector<string> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_list_0") == 1339885043u);
			pAgent->SetVariable("par2_string_list_0", opr, 1339885043u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node7, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_uint_0") == 868709384u);
			unsigned int& opr_p0 = (unsigned int&)pAgent->GetVariable<unsigned int >(868709384u);
			unsigned int opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntIR, unsigned int, unsigned int >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_uint_0") == 868709384u);
			pAgent->SetVariable("par2_uint_0", opr, 868709384u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node8, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulong_0") == 4274832167u);
			unsigned long& opr_p0 = (unsigned long&)pAgent->GetVariable<unsigned long >(4274832167u);
			unsigned long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongIR, unsigned long, unsigned long >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulong_0") == 4274832167u);
			pAgent->SetVariable("par2_ulong_0", opr, 4274832167u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node35 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node35, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node35()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_longlong_0") == 1021248696u);
			long long& opr_p0 = (long long&)pAgent->GetVariable<long long >(1021248696u);
			long long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongIR, long long, long long >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_longlong_0") == 1021248696u);
			pAgent->SetVariable("par2_longlong_0", opr, 1021248696u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node36 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node36, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node36()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulonglong_0") == 386357671u);
			unsigned long long& opr_p0 = (unsigned long long&)pAgent->GetVariable<unsigned long long >(386357671u);
			unsigned long long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongIR, unsigned long long, unsigned long long >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulonglong_0") == 386357671u);
			pAgent->SetVariable("par2_ulonglong_0", opr, 386357671u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node37 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node37, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node37()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_SzString_0") == 2318984205u);
			string& opr_p0 = (string&)pAgent->GetVariable<string >(2318984205u);
			string opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR, string, string& >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_SzString_0") == 2318984205u);
			pAgent->SetVariable("par2_SzString_0", opr, 2318984205u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node9, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_short_0") == 3228030786u);
			short& opr_p0 = (short&)pAgent->GetVariable<short >(3228030786u);
			short opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortIR, short, short >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_short_0") == 3228030786u);
			pAgent->SetVariable("par1_short_0", opr, 3228030786u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node10, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_0") == 2735162453u);
			int& opr_p0 = (int&)pAgent->GetVariable<int >(2735162453u);
			int opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR, int, int >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_0") == 2735162453u);
			pAgent->SetVariable("par1_int_0", opr, 2735162453u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node11, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_list_0") == 2093180786u);
			behaviac::vector<int>& opr_p0 = (behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(2093180786u);
			behaviac::vector<int> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR, behaviac::vector<int>, behaviac::vector<int> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_list_0") == 2093180786u);
			pAgent->SetVariable("par1_int_list_0", opr, 2093180786u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node12, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_long_0") == 1828293308u);
			long& opr_p0 = (long&)pAgent->GetVariable<long >(1828293308u);
			long opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongIR, long, long >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_long_0") == 1828293308u);
			pAgent->SetVariable("par1_long_0", opr, 1828293308u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node17 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node17, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_0") == 4045482770u);
			TNS::ST::PER::WRK::kEmployee& opr_p0 = (TNS::ST::PER::WRK::kEmployee&)pAgent->GetVariable<TNS::ST::PER::WRK::kEmployee >(4045482770u);
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_0") == 4045482770u);
			pAgent->SetVariable("par1_kemployee_0", opr, 4045482770u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node19 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node19, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_list_0") == 506976637u);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee>& opr_p0 = (behaviac::vector<TNS::ST::PER::WRK::kEmployee>&)pAgent->GetVariable<behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(506976637u);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_list_0") == 506976637u);
			pAgent->SetVariable("par1_kemployee_list_0", opr, 506976637u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node18 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node18, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_ushort_0") == 109865111u);
			unsigned short& opr_p0 = (unsigned short&)pAgent->GetVariable<unsigned short >(109865111u);
			unsigned short opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortIR, unsigned short, unsigned short >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_ushort_0") == 109865111u);
			pAgent->SetVariable("par1_ushort_0", opr, 109865111u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node16 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node16, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_0") == 1912381985u);
			bool& opr_p0 = (bool&)pAgent->GetVariable<bool >(1912381985u);
			bool opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_0") == 1912381985u);
			pAgent->SetVariable("par0_boolean_0", opr, 1912381985u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node20 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node20, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_list_0") == 109714028u);
			behaviac::vector<bool>& opr_p0 = (behaviac::vector<bool>&)pAgent->GetVariable<behaviac::vector<bool> >(109714028u);
			behaviac::vector<bool> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_list_0") == 109714028u);
			pAgent->SetVariable("par0_boolean_list_0", opr, 109714028u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node24 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node24, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_0") == 2120958860u);
			unsigned char& opr_p0 = (unsigned char&)pAgent->GetVariable<unsigned char >(2120958860u);
			unsigned char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_0") == 2120958860u);
			pAgent->SetVariable("par0_byte_0", opr, 2120958860u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node25 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node25, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_list_0") == 1459492261u);
			behaviac::vector<unsigned char>& opr_p0 = (behaviac::vector<unsigned char>&)pAgent->GetVariable<behaviac::vector<unsigned char> >(1459492261u);
			behaviac::vector<unsigned char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR, behaviac::vector<unsigned char>, behaviac::vector<unsigned char> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_list_0") == 1459492261u);
			pAgent->SetVariable("par0_byte_list_0", opr, 1459492261u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node26 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node26, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_0") == 1968762578u);
			char& opr_p0 = (char&)pAgent->GetVariable<char >(1968762578u);
			char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_0") == 1968762578u);
			pAgent->SetVariable("par0_char_0", opr, 1968762578u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node27 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node27, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node27()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_list_0") == 2869241813u);
			behaviac::vector<char>& opr_p0 = (behaviac::vector<char>&)pAgent->GetVariable<behaviac::vector<char> >(2869241813u);
			behaviac::vector<char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_list_0") == 2869241813u);
			pAgent->SetVariable("par0_char_list_0", opr, 2869241813u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node21 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node21, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_0") == 3914433730u);
			TNS::NE::NAT::eColor& opr_p0 = (TNS::NE::NAT::eColor&)pAgent->GetVariable<TNS::NE::NAT::eColor >(3914433730u);
			TNS::NE::NAT::eColor opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_0") == 3914433730u);
			pAgent->SetVariable("par0_ecolor_0", opr, 3914433730u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node23 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node23, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_list_0") == 1963776920u);
			behaviac::vector<TNS::NE::NAT::eColor>& opr_p0 = (behaviac::vector<TNS::NE::NAT::eColor>&)pAgent->GetVariable<behaviac::vector<TNS::NE::NAT::eColor> >(1963776920u);
			behaviac::vector<TNS::NE::NAT::eColor> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_list_0") == 1963776920u);
			pAgent->SetVariable("par0_ecolor_list_0", opr, 1963776920u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node28 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node28, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node28()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_0") == 968869870u);
			signed char& opr_p0 = (signed char&)pAgent->GetVariable<signed char >(968869870u);
			signed char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR, signed char, signed char >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_0") == 968869870u);
			pAgent->SetVariable("par0_sbyte_0", opr, 968869870u);
			return result;
		}
	};

	class Assignment_bt_par_test_par_as_left_value_and_param_node29 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_par_as_left_value_and_param_node29, Assignment);
		Assignment_bt_par_test_par_as_left_value_and_param_node29()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_list_0") == 2290963684u);
			behaviac::vector<signed char>& opr_p0 = (behaviac::vector<signed char>&)pAgent->GetVariable<behaviac::vector<signed char> >(2290963684u);
			behaviac::vector<signed char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_list_0") == 2290963684u);
			pAgent->SetVariable("par0_sbyte_list_0", opr, 2290963684u);
			return result;
		}
	};

	class DecoratorLoop_bt_par_test_par_as_left_value_and_param_node33 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_par_test_par_as_left_value_and_param_node33, DecoratorLoop);
		DecoratorLoop_bt_par_test_par_as_left_value_and_param_node33()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class bt_par_test_par_as_left_value_and_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/par_as_left_value_and_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// pars
			pBT->AddPar("EmployeeParTestAgent", "double", "par2_double_0", "5.7");
			pBT->AddPar("EmployeeParTestAgent", "float", "par2_single_0", "98.2");
			pBT->AddPar("EmployeeParTestAgent", "vector<float>", "par2_single_list_0", "2:5.1|6.2");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_string_0", "origin");
			pBT->AddPar("EmployeeParTestAgent", "vector<string>", "par2_string_list_0", "4:\"string0\"|\"string1\"|\"string2\"|\"string3\"");
			pBT->AddPar("EmployeeParTestAgent", "uint", "par2_uint_0", "9");
			pBT->AddPar("EmployeeParTestAgent", "ulong", "par2_ulong_0", "300");
			pBT->AddPar("EmployeeParTestAgent", "short", "par1_short_0", "78");
			pBT->AddPar("EmployeeParTestAgent", "int", "par1_int_0", "-3");
			pBT->AddPar("EmployeeParTestAgent", "vector<int>", "par1_int_list_0", "3:9999|12345|0");
			pBT->AddPar("EmployeeParTestAgent", "long", "par1_long_0", "1500");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::ST::PER::WRK::kEmployee>", "par1_kemployee_list_0", "1:{boss=null;car={brand=\"Lexus\";color=BLUE;price=93840;};code=q;id=9;isMale=true;name=\"John\";skinColor=GREEN;weight=110;}");
			pBT->AddPar("EmployeeParTestAgent", "ushort", "par1_ushort_0", "2001");
			pBT->AddPar("EmployeeParTestAgent", "bool", "par0_boolean_0", "true");
			pBT->AddPar("EmployeeParTestAgent", "vector<bool>", "par0_boolean_list_0", "2:false|true");
			pBT->AddPar("EmployeeParTestAgent", "TNS::NE::NAT::eColor", "par0_ecolor_0", "YELLOW");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::NE::NAT::eColor>", "par0_ecolor_list_0", "2:RED|GREEN");
			pBT->AddPar("EmployeeParTestAgent", "behaviac::Agent", "par2_agent_0", "null");
			pBT->AddPar("EmployeeParTestAgent", "vector<behaviac::Agent>", "par2_agent_list_0", "2:null|null");
			pBT->AddPar("EmployeeParTestAgent", "char", "par0_char_0", "A");
			pBT->AddPar("EmployeeParTestAgent", "TNS::ST::PER::WRK::kEmployee", "par1_kemployee_0", "{boss=null;car={brand=\"Alpha\";color=WHITE;price=5700;};code=A;id=83;isMale=false;name=\"Tom\";skinColor=RED;weight=97.3;}");
			pBT->AddPar("EmployeeParTestAgent", "ubyte", "par0_byte_0", "197");
			pBT->AddPar("EmployeeParTestAgent", "sbyte", "par0_sbyte_0", "-60");
			pBT->AddPar("EmployeeParTestAgent", "vector<char>", "par0_char_list_0", "4:d|j|F|A");
			pBT->AddPar("EmployeeParTestAgent", "vector<sbyte>", "par0_sbyte_list_0", "3:127|-128|0");
			pBT->AddPar("EmployeeParTestAgent", "vector<ubyte>", "par0_byte_list_0", "3:167|23|152");
			pBT->AddPar("EmployeeParTestAgent", "ParTestAgentBase", "par2_ParTestAgentBase_0", "null");
			pBT->AddPar("EmployeeParTestAgent", "vector<ParTestAgentBase>", "par2_ParTestAgentBaseList_0", "2:null|null");
			pBT->AddPar("EmployeeParTestAgent", "llong", "par2_longlong_0", "-666");
			pBT->AddPar("EmployeeParTestAgent", "ullong", "par2_ulonglong_0", "666");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_SzString_0", "this is char* test");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_CSzString_0", "this is const char* test");
			// children
			{
				Sequence* node32 = BEHAVIAC_NEW Sequence;
				node32->SetClassNameString("Sequence");
				node32->SetId(32);
#if !BEHAVIAC_RELEASE
				node32->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node32);
				{
					Sequence* node13 = BEHAVIAC_NEW Sequence;
					node13->SetClassNameString("Sequence");
					node13->SetId(13);
#if !BEHAVIAC_RELEASE
					node13->SetAgentType("EmployeeParTestAgent");
#endif
					node32->AddChild(node13);
					{
						Sequence* node1 = BEHAVIAC_NEW Sequence;
						node1->SetClassNameString("Sequence");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("EmployeeParTestAgent");
#endif
						node13->AddChild(node1);
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node0;
							node0->SetClassNameString("Assignment");
							node0->SetId(0);
#if !BEHAVIAC_RELEASE
							node0->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node0);
							node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node30* node30 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node30;
							node30->SetClassNameString("Assignment");
							node30->SetId(30);
#if !BEHAVIAC_RELEASE
							node30->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node30);
							node1->SetHasEvents(node1->HasEvents() | node30->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node15* node15 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node15;
							node15->SetClassNameString("Assignment");
							node15->SetId(15);
#if !BEHAVIAC_RELEASE
							node15->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node15);
							node1->SetHasEvents(node1->HasEvents() | node15->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node31* node31 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node31;
							node31->SetClassNameString("Assignment");
							node31->SetId(31);
#if !BEHAVIAC_RELEASE
							node31->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node31);
							node1->SetHasEvents(node1->HasEvents() | node31->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node2;
							node2->SetClassNameString("Assignment");
							node2->SetId(2);
#if !BEHAVIAC_RELEASE
							node2->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node2);
							node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node3* node3 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node3;
							node3->SetClassNameString("Assignment");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node3);
							node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node4;
							node4->SetClassNameString("Assignment");
							node4->SetId(4);
#if !BEHAVIAC_RELEASE
							node4->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node4);
							node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node5;
							node5->SetClassNameString("Assignment");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node5);
							node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node6* node6 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node6;
							node6->SetClassNameString("Assignment");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node6);
							node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node7* node7 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node7;
							node7->SetClassNameString("Assignment");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node7);
							node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node8;
							node8->SetClassNameString("Assignment");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node8);
							node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node35* node35 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node35;
							node35->SetClassNameString("Assignment");
							node35->SetId(35);
#if !BEHAVIAC_RELEASE
							node35->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node35);
							node1->SetHasEvents(node1->HasEvents() | node35->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node36* node36 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node36;
							node36->SetClassNameString("Assignment");
							node36->SetId(36);
#if !BEHAVIAC_RELEASE
							node36->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node36);
							node1->SetHasEvents(node1->HasEvents() | node36->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node37* node37 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node37;
							node37->SetClassNameString("Assignment");
							node37->SetId(37);
#if !BEHAVIAC_RELEASE
							node37->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node37);
							node1->SetHasEvents(node1->HasEvents() | node37->HasEvents());
						}
						node13->SetHasEvents(node13->HasEvents() | node1->HasEvents());
					}
					{
						Sequence* node14 = BEHAVIAC_NEW Sequence;
						node14->SetClassNameString("Sequence");
						node14->SetId(14);
#if !BEHAVIAC_RELEASE
						node14->SetAgentType("EmployeeParTestAgent");
#endif
						node13->AddChild(node14);
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node9;
							node9->SetClassNameString("Assignment");
							node9->SetId(9);
#if !BEHAVIAC_RELEASE
							node9->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node9);
							node14->SetHasEvents(node14->HasEvents() | node9->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node10;
							node10->SetClassNameString("Assignment");
							node10->SetId(10);
#if !BEHAVIAC_RELEASE
							node10->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node10);
							node14->SetHasEvents(node14->HasEvents() | node10->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node11;
							node11->SetClassNameString("Assignment");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node11);
							node14->SetHasEvents(node14->HasEvents() | node11->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node12* node12 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node12;
							node12->SetClassNameString("Assignment");
							node12->SetId(12);
#if !BEHAVIAC_RELEASE
							node12->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node12);
							node14->SetHasEvents(node14->HasEvents() | node12->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node17* node17 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node17;
							node17->SetClassNameString("Assignment");
							node17->SetId(17);
#if !BEHAVIAC_RELEASE
							node17->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node17);
							node14->SetHasEvents(node14->HasEvents() | node17->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node19* node19 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node19;
							node19->SetClassNameString("Assignment");
							node19->SetId(19);
#if !BEHAVIAC_RELEASE
							node19->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node19);
							node14->SetHasEvents(node14->HasEvents() | node19->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node18* node18 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node18;
							node18->SetClassNameString("Assignment");
							node18->SetId(18);
#if !BEHAVIAC_RELEASE
							node18->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node18);
							node14->SetHasEvents(node14->HasEvents() | node18->HasEvents());
						}
						node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
					}
					{
						Sequence* node22 = BEHAVIAC_NEW Sequence;
						node22->SetClassNameString("Sequence");
						node22->SetId(22);
#if !BEHAVIAC_RELEASE
						node22->SetAgentType("EmployeeParTestAgent");
#endif
						node13->AddChild(node22);
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node16* node16 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node16;
							node16->SetClassNameString("Assignment");
							node16->SetId(16);
#if !BEHAVIAC_RELEASE
							node16->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node16);
							node22->SetHasEvents(node22->HasEvents() | node16->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node20* node20 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node20;
							node20->SetClassNameString("Assignment");
							node20->SetId(20);
#if !BEHAVIAC_RELEASE
							node20->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node20);
							node22->SetHasEvents(node22->HasEvents() | node20->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node24* node24 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node24;
							node24->SetClassNameString("Assignment");
							node24->SetId(24);
#if !BEHAVIAC_RELEASE
							node24->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node24);
							node22->SetHasEvents(node22->HasEvents() | node24->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node25* node25 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node25;
							node25->SetClassNameString("Assignment");
							node25->SetId(25);
#if !BEHAVIAC_RELEASE
							node25->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node25);
							node22->SetHasEvents(node22->HasEvents() | node25->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node26* node26 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node26;
							node26->SetClassNameString("Assignment");
							node26->SetId(26);
#if !BEHAVIAC_RELEASE
							node26->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node26);
							node22->SetHasEvents(node22->HasEvents() | node26->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node27* node27 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node27;
							node27->SetClassNameString("Assignment");
							node27->SetId(27);
#if !BEHAVIAC_RELEASE
							node27->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node27);
							node22->SetHasEvents(node22->HasEvents() | node27->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node21* node21 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node21;
							node21->SetClassNameString("Assignment");
							node21->SetId(21);
#if !BEHAVIAC_RELEASE
							node21->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node21);
							node22->SetHasEvents(node22->HasEvents() | node21->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node23* node23 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node23;
							node23->SetClassNameString("Assignment");
							node23->SetId(23);
#if !BEHAVIAC_RELEASE
							node23->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node23);
							node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node28* node28 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node28;
							node28->SetClassNameString("Assignment");
							node28->SetId(28);
#if !BEHAVIAC_RELEASE
							node28->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node28);
							node22->SetHasEvents(node22->HasEvents() | node28->HasEvents());
						}
						{
							Assignment_bt_par_test_par_as_left_value_and_param_node29* node29 = BEHAVIAC_NEW Assignment_bt_par_test_par_as_left_value_and_param_node29;
							node29->SetClassNameString("Assignment");
							node29->SetId(29);
#if !BEHAVIAC_RELEASE
							node29->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node29);
							node22->SetHasEvents(node22->HasEvents() | node29->HasEvents());
						}
						node13->SetHasEvents(node13->HasEvents() | node22->HasEvents());
					}
					node32->SetHasEvents(node32->HasEvents() | node13->HasEvents());
				}
				{
					DecoratorLoop_bt_par_test_par_as_left_value_and_param_node33* node33 = BEHAVIAC_NEW DecoratorLoop_bt_par_test_par_as_left_value_and_param_node33;
					node33->SetClassNameString("DecoratorLoop");
					node33->SetId(33);
#if !BEHAVIAC_RELEASE
					node33->SetAgentType("EmployeeParTestAgent");
#endif
					node32->AddChild(node33);
					{
						Noop* node34 = BEHAVIAC_NEW Noop;
						node34->SetClassNameString("Noop");
						node34->SetId(34);
#if !BEHAVIAC_RELEASE
						node34->SetAgentType("EmployeeParTestAgent");
#endif
						node33->AddChild(node34);
						node33->SetHasEvents(node33->HasEvents() | node34->HasEvents());
					}
					node32->SetHasEvents(node32->HasEvents() | node33->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node32->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/par_as_ref_param

	class Action_bt_par_test_par_as_ref_param_node0 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node0, Action);
		Action_bt_par_test_par_as_ref_param_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_0") == 3876418331u);
			behaviac::Agent*& method_p0 = (behaviac::Agent*&)pAgent->GetVariable<behaviac::Agent* >(3876418331u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentRef, void, behaviac::Agent*& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_0") == 3876418331u);
			pAgent->SetVariable("par2_agent_0", method_p0, 3876418331u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node17 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node17, Action);
		Action_bt_par_test_par_as_ref_param_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_list_0") == 1126732011u);
			behaviac::vector<behaviac::Agent*>& method_p0 = (behaviac::vector<behaviac::Agent*>&)pAgent->GetVariable<behaviac::vector<behaviac::Agent*> >(1126732011u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListRef, void, behaviac::vector<behaviac::Agent*>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_list_0") == 1126732011u);
			pAgent->SetVariable("par2_agent_list_0", method_p0, 1126732011u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node2, Action);
		Action_bt_par_test_par_as_ref_param_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_double_0") == 2183367433u);
			double& method_p0 = (double&)pAgent->GetVariable<double >(2183367433u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleRef, void, double& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_double_0") == 2183367433u);
			pAgent->SetVariable("par2_double_0", method_p0, 2183367433u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node3, Action);
		Action_bt_par_test_par_as_ref_param_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_0") == 3120166065u);
			float& method_p0 = (float&)pAgent->GetVariable<float >(3120166065u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleRef, void, float& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_0") == 3120166065u);
			pAgent->SetVariable("par2_single_0", method_p0, 3120166065u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node4, Action);
		Action_bt_par_test_par_as_ref_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_list_0") == 3448877207u);
			behaviac::vector<float>& method_p0 = (behaviac::vector<float>&)pAgent->GetVariable<behaviac::vector<float> >(3448877207u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListRef, void, behaviac::vector<float>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_list_0") == 3448877207u);
			pAgent->SetVariable("par2_single_list_0", method_p0, 3448877207u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node5, Action);
		Action_bt_par_test_par_as_ref_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_0") == 351984746u);
			string& method_p0 = (string&)pAgent->GetVariable<string >(351984746u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringRef, void, string& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_0") == 351984746u);
			pAgent->SetVariable("par2_string_0", method_p0, 351984746u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node6, Action);
		Action_bt_par_test_par_as_ref_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_list_0") == 1339885043u);
			behaviac::vector<string>& method_p0 = (behaviac::vector<string>&)pAgent->GetVariable<behaviac::vector<string> >(1339885043u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListRef, void, behaviac::vector<string>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_list_0") == 1339885043u);
			pAgent->SetVariable("par2_string_list_0", method_p0, 1339885043u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node7, Action);
		Action_bt_par_test_par_as_ref_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_uint_0") == 868709384u);
			unsigned int& method_p0 = (unsigned int&)pAgent->GetVariable<unsigned int >(868709384u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntRef, void, unsigned int& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_uint_0") == 868709384u);
			pAgent->SetVariable("par2_uint_0", method_p0, 868709384u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node8, Action);
		Action_bt_par_test_par_as_ref_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulong_0") == 4274832167u);
			unsigned long& method_p0 = (unsigned long&)pAgent->GetVariable<unsigned long >(4274832167u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongRef, void, unsigned long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulong_0") == 4274832167u);
			pAgent->SetVariable("par2_ulong_0", method_p0, 4274832167u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node35 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node35, Action);
		Action_bt_par_test_par_as_ref_param_node35()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_longlong_0") == 1021248696u);
			long long& method_p0 = (long long&)pAgent->GetVariable<long long >(1021248696u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongRef, void, long long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_longlong_0") == 1021248696u);
			pAgent->SetVariable("par2_longlong_0", method_p0, 1021248696u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node36 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node36, Action);
		Action_bt_par_test_par_as_ref_param_node36()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulonglong_0") == 386357671u);
			unsigned long long& method_p0 = (unsigned long long&)pAgent->GetVariable<unsigned long long >(386357671u);
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongRef, void, unsigned long long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulonglong_0") == 386357671u);
			pAgent->SetVariable("par2_ulonglong_0", method_p0, 386357671u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node31 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node31, Action);
		Action_bt_par_test_par_as_ref_param_node31()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_SzString_0") == 2318984205u);
			char* method_p0 = (char*)((behaviac::string&)pAgent->GetVariable<behaviac::string>(2318984205u)).c_str();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SzStringRef, void, char*& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_SzString_0") == 2318984205u);
			pAgent->SetVariable("par2_SzString_0", behaviac::string(method_p0), 2318984205u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node32 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node32, Action);
		Action_bt_par_test_par_as_ref_param_node32()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_CSzStrng_0") == 1084657673u);
			char* method_p0 = (char*)((behaviac::string&)pAgent->GetVariable<behaviac::string>(1084657673u)).c_str();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_CSzStringRef, void, char* >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node9, Action);
		Action_bt_par_test_par_as_ref_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_short_0") == 3228030786u);
			short& method_p0 = (short&)pAgent->GetVariable<short >(3228030786u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortRef, void, short& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_short_0") == 3228030786u);
			pAgent->SetVariable("par1_short_0", method_p0, 3228030786u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node10 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node10, Action);
		Action_bt_par_test_par_as_ref_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_0") == 2735162453u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(2735162453u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntRef, void, int& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_0") == 2735162453u);
			pAgent->SetVariable("par1_int_0", method_p0, 2735162453u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node11, Action);
		Action_bt_par_test_par_as_ref_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_list_0") == 2093180786u);
			behaviac::vector<int>& method_p0 = (behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(2093180786u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListRef, void, behaviac::vector<int>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_list_0") == 2093180786u);
			pAgent->SetVariable("par1_int_list_0", method_p0, 2093180786u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node12, Action);
		Action_bt_par_test_par_as_ref_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_long_0") == 1828293308u);
			long& method_p0 = (long&)pAgent->GetVariable<long >(1828293308u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongRef, void, long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_long_0") == 1828293308u);
			pAgent->SetVariable("par1_long_0", method_p0, 1828293308u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node18 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node18, Action);
		Action_bt_par_test_par_as_ref_param_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_0") == 4045482770u);
			TNS::ST::PER::WRK::kEmployee& method_p0 = (TNS::ST::PER::WRK::kEmployee&)pAgent->GetVariable<TNS::ST::PER::WRK::kEmployee >(4045482770u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeRef, void, TNS::ST::PER::WRK::kEmployee& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_0") == 4045482770u);
			pAgent->SetVariable("par1_kemployee_0", method_p0, 4045482770u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node19 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node19, Action);
		Action_bt_par_test_par_as_ref_param_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_list_0") == 506976637u);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee>& method_p0 = (behaviac::vector<TNS::ST::PER::WRK::kEmployee>&)pAgent->GetVariable<behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(506976637u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef, void, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_list_0") == 506976637u);
			pAgent->SetVariable("par1_kemployee_list_0", method_p0, 506976637u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node20 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node20, Action);
		Action_bt_par_test_par_as_ref_param_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_ushort_0") == 109865111u);
			unsigned short& method_p0 = (unsigned short&)pAgent->GetVariable<unsigned short >(109865111u);
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortRef, void, unsigned short& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_ushort_0") == 109865111u);
			pAgent->SetVariable("par1_ushort_0", method_p0, 109865111u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node16, Action);
		Action_bt_par_test_par_as_ref_param_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_0") == 1912381985u);
			bool& method_p0 = (bool&)pAgent->GetVariable<bool >(1912381985u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef, void, bool& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_0") == 1912381985u);
			pAgent->SetVariable("par0_boolean_0", method_p0, 1912381985u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node21 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node21, Action);
		Action_bt_par_test_par_as_ref_param_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_list_0") == 109714028u);
			behaviac::vector<bool>& method_p0 = (behaviac::vector<bool>&)pAgent->GetVariable<behaviac::vector<bool> >(109714028u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef, void, behaviac::vector<bool>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_list_0") == 109714028u);
			pAgent->SetVariable("par0_boolean_list_0", method_p0, 109714028u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node15 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node15, Action);
		Action_bt_par_test_par_as_ref_param_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_0") == 2120958860u);
			unsigned char& method_p0 = (unsigned char&)pAgent->GetVariable<unsigned char >(2120958860u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteRef, void, unsigned char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_0") == 2120958860u);
			pAgent->SetVariable("par0_byte_0", method_p0, 2120958860u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node29 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node29, Action);
		Action_bt_par_test_par_as_ref_param_node29()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_list_0") == 1459492261u);
			behaviac::vector<unsigned char>& method_p0 = (behaviac::vector<unsigned char>&)pAgent->GetVariable<behaviac::vector<unsigned char> >(1459492261u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListRef, void, behaviac::vector<unsigned char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_list_0") == 1459492261u);
			pAgent->SetVariable("par0_byte_list_0", method_p0, 1459492261u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node26 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node26, Action);
		Action_bt_par_test_par_as_ref_param_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_0") == 1968762578u);
			char& method_p0 = (char&)pAgent->GetVariable<char >(1968762578u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef, void, char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_0") == 1968762578u);
			pAgent->SetVariable("par0_char_0", method_p0, 1968762578u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node27 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node27, Action);
		Action_bt_par_test_par_as_ref_param_node27()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_list_0") == 2869241813u);
			behaviac::vector<char>& method_p0 = (behaviac::vector<char>&)pAgent->GetVariable<behaviac::vector<char> >(2869241813u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef, void, behaviac::vector<char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_list_0") == 2869241813u);
			pAgent->SetVariable("par0_char_list_0", method_p0, 2869241813u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node24 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node24, Action);
		Action_bt_par_test_par_as_ref_param_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_0") == 3914433730u);
			TNS::NE::NAT::eColor& method_p0 = (TNS::NE::NAT::eColor&)pAgent->GetVariable<TNS::NE::NAT::eColor >(3914433730u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef, void, TNS::NE::NAT::eColor& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_0") == 3914433730u);
			pAgent->SetVariable("par0_ecolor_0", method_p0, 3914433730u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node25 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node25, Action);
		Action_bt_par_test_par_as_ref_param_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_list_0") == 1963776920u);
			behaviac::vector<TNS::NE::NAT::eColor>& method_p0 = (behaviac::vector<TNS::NE::NAT::eColor>&)pAgent->GetVariable<behaviac::vector<TNS::NE::NAT::eColor> >(1963776920u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef, void, behaviac::vector<TNS::NE::NAT::eColor>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_list_0") == 1963776920u);
			pAgent->SetVariable("par0_ecolor_list_0", method_p0, 1963776920u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node23 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node23, Action);
		Action_bt_par_test_par_as_ref_param_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_0") == 968869870u);
			signed char& method_p0 = (signed char&)pAgent->GetVariable<signed char >(968869870u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteRef, void, signed char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_0") == 968869870u);
			pAgent->SetVariable("par0_sbyte_0", method_p0, 968869870u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_par_as_ref_param_node28 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_par_as_ref_param_node28, Action);
		Action_bt_par_test_par_as_ref_param_node28()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_list_0") == 2290963684u);
			behaviac::vector<signed char>& method_p0 = (behaviac::vector<signed char>&)pAgent->GetVariable<behaviac::vector<signed char> >(2290963684u);
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef, void, behaviac::vector<signed char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_list_0") == 2290963684u);
			pAgent->SetVariable("par0_sbyte_list_0", method_p0, 2290963684u);
			return BT_SUCCESS;
		}
	};

	class DecoratorLoop_bt_par_test_par_as_ref_param_node33 : public DecoratorLoop
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(DecoratorLoop_bt_par_test_par_as_ref_param_node33, DecoratorLoop);
		DecoratorLoop_bt_par_test_par_as_ref_param_node33()
		{
			m_bDecorateWhenChildEnds = true;
		}
	protected:
		virtual int GetCount(Agent* pAgent) const
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			return -1;
		}
	};

	class bt_par_test_par_as_ref_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/par_as_ref_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// pars
			pBT->AddPar("EmployeeParTestAgent", "bool", "par0_boolean_0", "false");
			pBT->AddPar("EmployeeParTestAgent", "vector<bool>", "par0_boolean_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "ubyte", "par0_byte_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<ubyte>", "par0_byte_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "char", "par0_char_0", "A");
			pBT->AddPar("EmployeeParTestAgent", "vector<char>", "par0_char_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "TNS::NE::NAT::eColor", "par0_ecolor_0", "WHITE");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::NE::NAT::eColor>", "par0_ecolor_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "sbyte", "par0_sbyte_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<sbyte>", "par0_sbyte_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "short", "par1_short_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "int", "par1_int_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<int>", "par1_int_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "long", "par1_long_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "TNS::ST::PER::WRK::kEmployee", "par1_kemployee_0", "{boss=null;car={brand=\"\";color=RED;price=0;};code=c;id=0;isMale=false;name=\"tomlp\";skinColor=RED;weight=0;}");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::ST::PER::WRK::kEmployee>", "par1_kemployee_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "ushort", "par1_ushort_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "behaviac::Agent", "par2_agent_0", "null");
			pBT->AddPar("EmployeeParTestAgent", "vector<behaviac::Agent>", "par2_agent_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "double", "par2_double_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "float", "par2_single_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<float>", "par2_single_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_string_0", "");
			pBT->AddPar("EmployeeParTestAgent", "vector<string>", "par2_string_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "uint", "par2_uint_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "ulong", "par2_ulong_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_SzString_0", "this is char* test");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_CSzStrng_0", "this is const char* test");
			pBT->AddPar("EmployeeParTestAgent", "llong", "par2_longlong_0", "-666");
			pBT->AddPar("EmployeeParTestAgent", "ullong", "par2_ulonglong_0", "666");
			// children
			{
				Sequence* node13 = BEHAVIAC_NEW Sequence;
				node13->SetClassNameString("Sequence");
				node13->SetId(13);
#if !BEHAVIAC_RELEASE
				node13->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node13);
				{
					Sequence* node30 = BEHAVIAC_NEW Sequence;
					node30->SetClassNameString("Sequence");
					node30->SetId(30);
#if !BEHAVIAC_RELEASE
					node30->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node30);
					{
						Sequence* node1 = BEHAVIAC_NEW Sequence;
						node1->SetClassNameString("Sequence");
						node1->SetId(1);
#if !BEHAVIAC_RELEASE
						node1->SetAgentType("EmployeeParTestAgent");
#endif
						node30->AddChild(node1);
						{
							Action_bt_par_test_par_as_ref_param_node0* node0 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node0;
							node0->SetClassNameString("Action");
							node0->SetId(0);
#if !BEHAVIAC_RELEASE
							node0->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node0);
							node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node17* node17 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node17;
							node17->SetClassNameString("Action");
							node17->SetId(17);
#if !BEHAVIAC_RELEASE
							node17->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node17);
							node1->SetHasEvents(node1->HasEvents() | node17->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node2* node2 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node2;
							node2->SetClassNameString("Action");
							node2->SetId(2);
#if !BEHAVIAC_RELEASE
							node2->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node2);
							node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node3* node3 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node3;
							node3->SetClassNameString("Action");
							node3->SetId(3);
#if !BEHAVIAC_RELEASE
							node3->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node3);
							node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node4* node4 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node4;
							node4->SetClassNameString("Action");
							node4->SetId(4);
#if !BEHAVIAC_RELEASE
							node4->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node4);
							node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node5* node5 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node5;
							node5->SetClassNameString("Action");
							node5->SetId(5);
#if !BEHAVIAC_RELEASE
							node5->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node5);
							node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node6* node6 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node6;
							node6->SetClassNameString("Action");
							node6->SetId(6);
#if !BEHAVIAC_RELEASE
							node6->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node6);
							node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node7* node7 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node7;
							node7->SetClassNameString("Action");
							node7->SetId(7);
#if !BEHAVIAC_RELEASE
							node7->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node7);
							node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node8* node8 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node8;
							node8->SetClassNameString("Action");
							node8->SetId(8);
#if !BEHAVIAC_RELEASE
							node8->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node8);
							node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node35* node35 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node35;
							node35->SetClassNameString("Action");
							node35->SetId(35);
#if !BEHAVIAC_RELEASE
							node35->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node35);
							node1->SetHasEvents(node1->HasEvents() | node35->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node36* node36 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node36;
							node36->SetClassNameString("Action");
							node36->SetId(36);
#if !BEHAVIAC_RELEASE
							node36->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node36);
							node1->SetHasEvents(node1->HasEvents() | node36->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node31* node31 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node31;
							node31->SetClassNameString("Action");
							node31->SetId(31);
#if !BEHAVIAC_RELEASE
							node31->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node31);
							node1->SetHasEvents(node1->HasEvents() | node31->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node32* node32 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node32;
							node32->SetClassNameString("Action");
							node32->SetId(32);
#if !BEHAVIAC_RELEASE
							node32->SetAgentType("EmployeeParTestAgent");
#endif
							node1->AddChild(node32);
							node1->SetHasEvents(node1->HasEvents() | node32->HasEvents());
						}
						node30->SetHasEvents(node30->HasEvents() | node1->HasEvents());
					}
					{
						Sequence* node14 = BEHAVIAC_NEW Sequence;
						node14->SetClassNameString("Sequence");
						node14->SetId(14);
#if !BEHAVIAC_RELEASE
						node14->SetAgentType("EmployeeParTestAgent");
#endif
						node30->AddChild(node14);
						{
							Action_bt_par_test_par_as_ref_param_node9* node9 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node9;
							node9->SetClassNameString("Action");
							node9->SetId(9);
#if !BEHAVIAC_RELEASE
							node9->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node9);
							node14->SetHasEvents(node14->HasEvents() | node9->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node10* node10 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node10;
							node10->SetClassNameString("Action");
							node10->SetId(10);
#if !BEHAVIAC_RELEASE
							node10->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node10);
							node14->SetHasEvents(node14->HasEvents() | node10->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node11* node11 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node11;
							node11->SetClassNameString("Action");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node11);
							node14->SetHasEvents(node14->HasEvents() | node11->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node12* node12 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node12;
							node12->SetClassNameString("Action");
							node12->SetId(12);
#if !BEHAVIAC_RELEASE
							node12->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node12);
							node14->SetHasEvents(node14->HasEvents() | node12->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node18* node18 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node18;
							node18->SetClassNameString("Action");
							node18->SetId(18);
#if !BEHAVIAC_RELEASE
							node18->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node18);
							node14->SetHasEvents(node14->HasEvents() | node18->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node19* node19 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node19;
							node19->SetClassNameString("Action");
							node19->SetId(19);
#if !BEHAVIAC_RELEASE
							node19->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node19);
							node14->SetHasEvents(node14->HasEvents() | node19->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node20* node20 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node20;
							node20->SetClassNameString("Action");
							node20->SetId(20);
#if !BEHAVIAC_RELEASE
							node20->SetAgentType("EmployeeParTestAgent");
#endif
							node14->AddChild(node20);
							node14->SetHasEvents(node14->HasEvents() | node20->HasEvents());
						}
						node30->SetHasEvents(node30->HasEvents() | node14->HasEvents());
					}
					{
						Sequence* node22 = BEHAVIAC_NEW Sequence;
						node22->SetClassNameString("Sequence");
						node22->SetId(22);
#if !BEHAVIAC_RELEASE
						node22->SetAgentType("EmployeeParTestAgent");
#endif
						node30->AddChild(node22);
						{
							Action_bt_par_test_par_as_ref_param_node16* node16 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node16;
							node16->SetClassNameString("Action");
							node16->SetId(16);
#if !BEHAVIAC_RELEASE
							node16->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node16);
							node22->SetHasEvents(node22->HasEvents() | node16->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node21* node21 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node21;
							node21->SetClassNameString("Action");
							node21->SetId(21);
#if !BEHAVIAC_RELEASE
							node21->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node21);
							node22->SetHasEvents(node22->HasEvents() | node21->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node15* node15 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node15;
							node15->SetClassNameString("Action");
							node15->SetId(15);
#if !BEHAVIAC_RELEASE
							node15->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node15);
							node22->SetHasEvents(node22->HasEvents() | node15->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node29* node29 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node29;
							node29->SetClassNameString("Action");
							node29->SetId(29);
#if !BEHAVIAC_RELEASE
							node29->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node29);
							node22->SetHasEvents(node22->HasEvents() | node29->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node26* node26 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node26;
							node26->SetClassNameString("Action");
							node26->SetId(26);
#if !BEHAVIAC_RELEASE
							node26->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node26);
							node22->SetHasEvents(node22->HasEvents() | node26->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node27* node27 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node27;
							node27->SetClassNameString("Action");
							node27->SetId(27);
#if !BEHAVIAC_RELEASE
							node27->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node27);
							node22->SetHasEvents(node22->HasEvents() | node27->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node24* node24 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node24;
							node24->SetClassNameString("Action");
							node24->SetId(24);
#if !BEHAVIAC_RELEASE
							node24->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node24);
							node22->SetHasEvents(node22->HasEvents() | node24->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node25* node25 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node25;
							node25->SetClassNameString("Action");
							node25->SetId(25);
#if !BEHAVIAC_RELEASE
							node25->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node25);
							node22->SetHasEvents(node22->HasEvents() | node25->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node23* node23 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node23;
							node23->SetClassNameString("Action");
							node23->SetId(23);
#if !BEHAVIAC_RELEASE
							node23->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node23);
							node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
						}
						{
							Action_bt_par_test_par_as_ref_param_node28* node28 = BEHAVIAC_NEW Action_bt_par_test_par_as_ref_param_node28;
							node28->SetClassNameString("Action");
							node28->SetId(28);
#if !BEHAVIAC_RELEASE
							node28->SetAgentType("EmployeeParTestAgent");
#endif
							node22->AddChild(node28);
							node22->SetHasEvents(node22->HasEvents() | node28->HasEvents());
						}
						node30->SetHasEvents(node30->HasEvents() | node22->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node30->HasEvents());
				}
				{
					DecoratorLoop_bt_par_test_par_as_ref_param_node33* node33 = BEHAVIAC_NEW DecoratorLoop_bt_par_test_par_as_ref_param_node33;
					node33->SetClassNameString("DecoratorLoop");
					node33->SetId(33);
#if !BEHAVIAC_RELEASE
					node33->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node33);
					{
						Noop* node34 = BEHAVIAC_NEW Noop;
						node34->SetClassNameString("Noop");
						node34->SetId(34);
#if !BEHAVIAC_RELEASE
						node34->SetAgentType("EmployeeParTestAgent");
#endif
						node33->AddChild(node34);
						node33->SetHasEvents(node33->HasEvents() | node34->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node33->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node13->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/property_as_left_value

	class Assignment_bt_par_test_property_as_left_value_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node0, Assignment);
		Assignment_bt_par_test_property_as_left_value_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_0") == 3876418331u);
			behaviac::Agent*& opr_p0 = (behaviac::Agent*&)pAgent->GetVariable<behaviac::Agent* >(3876418331u);
			behaviac::Agent* opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentIR, behaviac::Agent*, behaviac::Agent* >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node15 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node15, Assignment);
		Assignment_bt_par_test_property_as_left_value_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_agent_list_0") == 1126732011u);
			behaviac::vector<behaviac::Agent*>& opr_p0 = (behaviac::vector<behaviac::Agent*>&)pAgent->GetVariable<behaviac::vector<behaviac::Agent*> >(1126732011u);
			behaviac::vector<behaviac::Agent*> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR, behaviac::vector<behaviac::Agent*>, behaviac::vector<behaviac::Agent*> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node2, Assignment);
		Assignment_bt_par_test_property_as_left_value_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_double_0") == 2183367433u);
			double& opr_p0 = (double&)pAgent->GetVariable<double >(2183367433u);
			double opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleIR, double, double >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0, double >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node3, Assignment);
		Assignment_bt_par_test_property_as_left_value_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_0") == 3120166065u);
			float& opr_p0 = (float&)pAgent->GetVariable<float >(3120166065u);
			float opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR, float, float >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0, float >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node4, Assignment);
		Assignment_bt_par_test_property_as_left_value_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_single_list_0") == 3448877207u);
			behaviac::vector<float>& opr_p0 = (behaviac::vector<float>&)pAgent->GetVariable<behaviac::vector<float> >(3448877207u);
			behaviac::vector<float> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR, behaviac::vector<float>, behaviac::vector<float> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node5, Assignment);
		Assignment_bt_par_test_property_as_left_value_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_0") == 351984746u);
			string& opr_p0 = (string&)pAgent->GetVariable<string >(351984746u);
			string opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR, string, string& >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, string >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node6, Assignment);
		Assignment_bt_par_test_property_as_left_value_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_string_list_0") == 1339885043u);
			behaviac::vector<string>& opr_p0 = (behaviac::vector<string>&)pAgent->GetVariable<behaviac::vector<string> >(1339885043u);
			behaviac::vector<string> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR, behaviac::vector<string>, behaviac::vector<string> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<string> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node7, Assignment);
		Assignment_bt_par_test_property_as_left_value_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_uint_0") == 868709384u);
			unsigned int& opr_p0 = (unsigned int&)pAgent->GetVariable<unsigned int >(868709384u);
			unsigned int opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntIR, unsigned int, unsigned int >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0, unsigned int >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node8, Assignment);
		Assignment_bt_par_test_property_as_left_value_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par2_ulong_0") == 4274832167u);
			unsigned long& opr_p0 = (unsigned long&)pAgent->GetVariable<unsigned long >(4274832167u);
			unsigned long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongIR, unsigned long, unsigned long >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node30 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node30, Assignment);
		Assignment_bt_par_test_property_as_left_value_node30()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			long long opr = -666;
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0, long long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node31 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node31, Assignment);
		Assignment_bt_par_test_property_as_left_value_node31()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned long long opr = 666;
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0, unsigned long long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node9, Assignment);
		Assignment_bt_par_test_property_as_left_value_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_short_0") == 3228030786u);
			short& opr_p0 = (short&)pAgent->GetVariable<short >(3228030786u);
			short opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortIR, short, short >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0, short >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node10, Assignment);
		Assignment_bt_par_test_property_as_left_value_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_0") == 2735162453u);
			int& opr_p0 = (int&)pAgent->GetVariable<int >(2735162453u);
			int opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR, int, int >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node11, Assignment);
		Assignment_bt_par_test_property_as_left_value_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_int_list_0") == 2093180786u);
			behaviac::vector<int>& opr_p0 = (behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(2093180786u);
			behaviac::vector<int> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR, behaviac::vector<int>, behaviac::vector<int> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node12, Assignment);
		Assignment_bt_par_test_property_as_left_value_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_long_0") == 1828293308u);
			long& opr_p0 = (long&)pAgent->GetVariable<long >(1828293308u);
			long opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongIR, long, long >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0, long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node17 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node17, Assignment);
		Assignment_bt_par_test_property_as_left_value_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_0") == 4045482770u);
			TNS::ST::PER::WRK::kEmployee& opr_p0 = (TNS::ST::PER::WRK::kEmployee&)pAgent->GetVariable<TNS::ST::PER::WRK::kEmployee >(4045482770u);
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node19 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node19, Assignment);
		Assignment_bt_par_test_property_as_left_value_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_kemployee_list_0") == 506976637u);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee>& opr_p0 = (behaviac::vector<TNS::ST::PER::WRK::kEmployee>&)pAgent->GetVariable<behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(506976637u);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node18 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node18, Assignment);
		Assignment_bt_par_test_property_as_left_value_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par1_ushort_0") == 109865111u);
			unsigned short& opr_p0 = (unsigned short&)pAgent->GetVariable<unsigned short >(109865111u);
			unsigned short opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortIR, unsigned short, unsigned short >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0, unsigned short >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node16 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node16, Assignment);
		Assignment_bt_par_test_property_as_left_value_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_0") == 1912381985u);
			bool& opr_p0 = (bool&)pAgent->GetVariable<bool >(1912381985u);
			bool opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node20 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node20, Assignment);
		Assignment_bt_par_test_property_as_left_value_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_boolean_list_0") == 109714028u);
			behaviac::vector<bool>& opr_p0 = (behaviac::vector<bool>&)pAgent->GetVariable<behaviac::vector<bool> >(109714028u);
			behaviac::vector<bool> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node24 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node24, Assignment);
		Assignment_bt_par_test_property_as_left_value_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_0") == 2120958860u);
			unsigned char& opr_p0 = (unsigned char&)pAgent->GetVariable<unsigned char >(2120958860u);
			unsigned char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node25 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node25, Assignment);
		Assignment_bt_par_test_property_as_left_value_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_byte_list_0") == 1459492261u);
			behaviac::vector<unsigned char>& opr_p0 = (behaviac::vector<unsigned char>&)pAgent->GetVariable<behaviac::vector<unsigned char> >(1459492261u);
			behaviac::vector<unsigned char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR, behaviac::vector<unsigned char>, behaviac::vector<unsigned char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node26 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node26, Assignment);
		Assignment_bt_par_test_property_as_left_value_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_0") == 1968762578u);
			char& opr_p0 = (char&)pAgent->GetVariable<char >(1968762578u);
			char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node27 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node27, Assignment);
		Assignment_bt_par_test_property_as_left_value_node27()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_char_list_0") == 2869241813u);
			behaviac::vector<char>& opr_p0 = (behaviac::vector<char>&)pAgent->GetVariable<behaviac::vector<char> >(2869241813u);
			behaviac::vector<char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node21 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node21, Assignment);
		Assignment_bt_par_test_property_as_left_value_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_0") == 3914433730u);
			TNS::NE::NAT::eColor& opr_p0 = (TNS::NE::NAT::eColor&)pAgent->GetVariable<TNS::NE::NAT::eColor >(3914433730u);
			TNS::NE::NAT::eColor opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0, TNS::NE::NAT::eColor >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node23 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node23, Assignment);
		Assignment_bt_par_test_property_as_left_value_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_ecolor_list_0") == 1963776920u);
			behaviac::vector<TNS::NE::NAT::eColor>& opr_p0 = (behaviac::vector<TNS::NE::NAT::eColor>&)pAgent->GetVariable<behaviac::vector<TNS::NE::NAT::eColor> >(1963776920u);
			behaviac::vector<TNS::NE::NAT::eColor> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node28 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node28, Assignment);
		Assignment_bt_par_test_property_as_left_value_node28()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_0") == 968869870u);
			signed char& opr_p0 = (signed char&)pAgent->GetVariable<signed char >(968869870u);
			signed char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR, signed char, signed char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_node29 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_node29, Assignment);
		Assignment_bt_par_test_property_as_left_value_node29()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("par0_sbyte_list_0") == 2290963684u);
			behaviac::vector<signed char>& opr_p0 = (behaviac::vector<signed char>&)pAgent->GetVariable<behaviac::vector<signed char> >(2290963684u);
			behaviac::vector<signed char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >() = opr;
			return result;
		}
	};

	class bt_par_test_property_as_left_value
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/property_as_left_value");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// pars
			pBT->AddPar("EmployeeParTestAgent", "double", "par2_double_0", "5.7");
			pBT->AddPar("EmployeeParTestAgent", "float", "par2_single_0", "98.2");
			pBT->AddPar("EmployeeParTestAgent", "vector<float>", "par2_single_list_0", "2:5.1|6.2");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_string_0", "origin");
			pBT->AddPar("EmployeeParTestAgent", "vector<string>", "par2_string_list_0", "4:\"string0\"|\"string1\"|\"string2\"|\"string3\"");
			pBT->AddPar("EmployeeParTestAgent", "uint", "par2_uint_0", "9");
			pBT->AddPar("EmployeeParTestAgent", "ulong", "par2_ulong_0", "300");
			pBT->AddPar("EmployeeParTestAgent", "short", "par1_short_0", "78");
			pBT->AddPar("EmployeeParTestAgent", "int", "par1_int_0", "-3");
			pBT->AddPar("EmployeeParTestAgent", "vector<int>", "par1_int_list_0", "3:9999|12345|0");
			pBT->AddPar("EmployeeParTestAgent", "long", "par1_long_0", "1500");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::ST::PER::WRK::kEmployee>", "par1_kemployee_list_0", "1:{boss=null;car={brand=\"Lexus\";color=BLUE;price=93840;};code=q;id=9;isMale=true;name=\"John\";skinColor=GREEN;weight=110;}");
			pBT->AddPar("EmployeeParTestAgent", "ushort", "par1_ushort_0", "2001");
			pBT->AddPar("EmployeeParTestAgent", "bool", "par0_boolean_0", "true");
			pBT->AddPar("EmployeeParTestAgent", "vector<bool>", "par0_boolean_list_0", "2:false|true");
			pBT->AddPar("EmployeeParTestAgent", "TNS::NE::NAT::eColor", "par0_ecolor_0", "YELLOW");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::NE::NAT::eColor>", "par0_ecolor_list_0", "2:RED|GREEN");
			pBT->AddPar("EmployeeParTestAgent", "behaviac::Agent", "par2_agent_0", "null");
			pBT->AddPar("EmployeeParTestAgent", "vector<behaviac::Agent>", "par2_agent_list_0", "2:null|null");
			pBT->AddPar("EmployeeParTestAgent", "char", "par0_char_0", "A");
			pBT->AddPar("EmployeeParTestAgent", "TNS::ST::PER::WRK::kEmployee", "par1_kemployee_0", "{boss=null;car={brand=\"Alpha\";color=WHITE;price=5700;};code=A;id=83;isMale=false;name=\"Tom\";skinColor=RED;weight=97.3;}");
			pBT->AddPar("EmployeeParTestAgent", "ubyte", "par0_byte_0", "197");
			pBT->AddPar("EmployeeParTestAgent", "sbyte", "par0_sbyte_0", "-60");
			pBT->AddPar("EmployeeParTestAgent", "vector<char>", "par0_char_list_0", "4:d|j|F|A");
			pBT->AddPar("EmployeeParTestAgent", "vector<sbyte>", "par0_sbyte_list_0", "3:127|-128|0");
			pBT->AddPar("EmployeeParTestAgent", "vector<ubyte>", "par0_byte_list_0", "3:167|23|152");
			// children
			{
				Sequence* node13 = BEHAVIAC_NEW Sequence;
				node13->SetClassNameString("Sequence");
				node13->SetId(13);
#if !BEHAVIAC_RELEASE
				node13->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node13);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node1);
					{
						Assignment_bt_par_test_property_as_left_value_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node0;
						node0->SetClassNameString("Assignment");
						node0->SetId(0);
#if !BEHAVIAC_RELEASE
						node0->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node0);
						node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node15* node15 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node15;
						node15->SetClassNameString("Assignment");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node15);
						node1->SetHasEvents(node1->HasEvents() | node15->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node2;
						node2->SetClassNameString("Assignment");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node3* node3 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node3;
						node3->SetClassNameString("Assignment");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node4;
						node4->SetClassNameString("Assignment");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node5;
						node5->SetClassNameString("Assignment");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node6* node6 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node6;
						node6->SetClassNameString("Assignment");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node6);
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node7* node7 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node7;
						node7->SetClassNameString("Assignment");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node7);
						node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node8;
						node8->SetClassNameString("Assignment");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node8);
						node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node30* node30 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node30;
						node30->SetClassNameString("Assignment");
						node30->SetId(30);
#if !BEHAVIAC_RELEASE
						node30->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node30);
						node1->SetHasEvents(node1->HasEvents() | node30->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node31* node31 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node31;
						node31->SetClassNameString("Assignment");
						node31->SetId(31);
#if !BEHAVIAC_RELEASE
						node31->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node31);
						node1->SetHasEvents(node1->HasEvents() | node31->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node1->HasEvents());
				}
				{
					Sequence* node14 = BEHAVIAC_NEW Sequence;
					node14->SetClassNameString("Sequence");
					node14->SetId(14);
#if !BEHAVIAC_RELEASE
					node14->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node14);
					{
						Assignment_bt_par_test_property_as_left_value_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node9;
						node9->SetClassNameString("Assignment");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node9);
						node14->SetHasEvents(node14->HasEvents() | node9->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node10;
						node10->SetClassNameString("Assignment");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node10);
						node14->SetHasEvents(node14->HasEvents() | node10->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node11;
						node11->SetClassNameString("Assignment");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node11);
						node14->SetHasEvents(node14->HasEvents() | node11->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node12* node12 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node12;
						node12->SetClassNameString("Assignment");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node12);
						node14->SetHasEvents(node14->HasEvents() | node12->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node17* node17 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node17;
						node17->SetClassNameString("Assignment");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node17);
						node14->SetHasEvents(node14->HasEvents() | node17->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node19* node19 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node19;
						node19->SetClassNameString("Assignment");
						node19->SetId(19);
#if !BEHAVIAC_RELEASE
						node19->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node19);
						node14->SetHasEvents(node14->HasEvents() | node19->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node18* node18 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node18;
						node18->SetClassNameString("Assignment");
						node18->SetId(18);
#if !BEHAVIAC_RELEASE
						node18->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node18);
						node14->SetHasEvents(node14->HasEvents() | node18->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
				}
				{
					Sequence* node22 = BEHAVIAC_NEW Sequence;
					node22->SetClassNameString("Sequence");
					node22->SetId(22);
#if !BEHAVIAC_RELEASE
					node22->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node22);
					{
						Assignment_bt_par_test_property_as_left_value_node16* node16 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node16;
						node16->SetClassNameString("Assignment");
						node16->SetId(16);
#if !BEHAVIAC_RELEASE
						node16->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node16);
						node22->SetHasEvents(node22->HasEvents() | node16->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node20* node20 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node20;
						node20->SetClassNameString("Assignment");
						node20->SetId(20);
#if !BEHAVIAC_RELEASE
						node20->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node20);
						node22->SetHasEvents(node22->HasEvents() | node20->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node24* node24 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node24;
						node24->SetClassNameString("Assignment");
						node24->SetId(24);
#if !BEHAVIAC_RELEASE
						node24->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node24);
						node22->SetHasEvents(node22->HasEvents() | node24->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node25* node25 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node25;
						node25->SetClassNameString("Assignment");
						node25->SetId(25);
#if !BEHAVIAC_RELEASE
						node25->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node25);
						node22->SetHasEvents(node22->HasEvents() | node25->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node26* node26 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node26;
						node26->SetClassNameString("Assignment");
						node26->SetId(26);
#if !BEHAVIAC_RELEASE
						node26->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node26);
						node22->SetHasEvents(node22->HasEvents() | node26->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node27* node27 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node27;
						node27->SetClassNameString("Assignment");
						node27->SetId(27);
#if !BEHAVIAC_RELEASE
						node27->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node27);
						node22->SetHasEvents(node22->HasEvents() | node27->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node21* node21 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node21;
						node21->SetClassNameString("Assignment");
						node21->SetId(21);
#if !BEHAVIAC_RELEASE
						node21->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node21);
						node22->SetHasEvents(node22->HasEvents() | node21->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node23* node23 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node23;
						node23->SetClassNameString("Assignment");
						node23->SetId(23);
#if !BEHAVIAC_RELEASE
						node23->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node23);
						node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node28* node28 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node28;
						node28->SetClassNameString("Assignment");
						node28->SetId(28);
#if !BEHAVIAC_RELEASE
						node28->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node28);
						node22->SetHasEvents(node22->HasEvents() | node28->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_node29* node29 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_node29;
						node29->SetClassNameString("Assignment");
						node29->SetId(29);
#if !BEHAVIAC_RELEASE
						node29->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node29);
						node22->SetHasEvents(node22->HasEvents() | node29->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node22->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node13->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/property_as_left_value_and_param

	class Assignment_bt_par_test_property_as_left_value_and_param_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node0, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::Agent* opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >();
			behaviac::Agent* opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentIR, behaviac::Agent*, behaviac::Agent* >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node15 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node15, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<behaviac::Agent*> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >();
			behaviac::vector<behaviac::Agent*> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR, behaviac::vector<behaviac::Agent*>, behaviac::vector<behaviac::Agent*> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node2, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			double opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0, double >();
			double opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleIR, double, double >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0, double >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node3, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0, float >();
			float opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR, float, float >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0, float >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node4, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<float> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >();
			behaviac::vector<float> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR, behaviac::vector<float>, behaviac::vector<float> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node5, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			string opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, string >();
			string opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR, string, string& >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, string >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node6, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<string> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<string> >();
			behaviac::vector<string> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR, behaviac::vector<string>, behaviac::vector<string> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<string> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node7, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned int opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0, unsigned int >();
			unsigned int opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntIR, unsigned int, unsigned int >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0, unsigned int >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node8, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned long opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >();
			unsigned long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongIR, unsigned long, unsigned long >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node30 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node30, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node30()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			long long opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0, long long >();
			long long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongIR, long long, long long >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0, long long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node31 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node31, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node31()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned long long opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0, unsigned long long >();
			unsigned long long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongIR, unsigned long long, unsigned long long >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0, unsigned long long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node9, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			short opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0, short >();
			short opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortIR, short, short >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0, short >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node10, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0, int >();
			int opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR, int, int >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node11, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<int> opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >();
			behaviac::vector<int> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR, behaviac::vector<int>, behaviac::vector<int> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node12, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			long opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0, long >();
			long opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongIR, long, long >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0, long >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node17 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node17, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::ST::PER::WRK::kEmployee opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node19 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node19, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node18 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node18, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned short opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0, unsigned short >();
			unsigned short opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortIR, unsigned short, unsigned short >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0, unsigned short >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node16 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node16, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >();
			bool opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node20 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node20, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<bool> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >();
			behaviac::vector<bool> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node24 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node24, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >();
			unsigned char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteIR, unsigned char, unsigned char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node25 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node25, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<unsigned char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >();
			behaviac::vector<unsigned char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListIR, behaviac::vector<unsigned char>, behaviac::vector<unsigned char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node26 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node26, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >();
			char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node27 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node27, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node27()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >();
			behaviac::vector<char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node21 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node21, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::NE::NAT::eColor opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0, TNS::NE::NAT::eColor >();
			TNS::NE::NAT::eColor opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0, TNS::NE::NAT::eColor >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node23 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node23, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<TNS::NE::NAT::eColor> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >();
			behaviac::vector<TNS::NE::NAT::eColor> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node28 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node28, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node28()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			signed char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >();
			signed char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteIR, signed char, signed char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_property_as_left_value_and_param_node29 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_property_as_left_value_and_param_node29, Assignment);
		Assignment_bt_par_test_property_as_left_value_and_param_node29()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<signed char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >();
			behaviac::vector<signed char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >() = opr;
			return result;
		}
	};

	class bt_par_test_property_as_left_value_and_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/property_as_left_value_and_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// children
			{
				Sequence* node13 = BEHAVIAC_NEW Sequence;
				node13->SetClassNameString("Sequence");
				node13->SetId(13);
#if !BEHAVIAC_RELEASE
				node13->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node13);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node1);
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node0;
						node0->SetClassNameString("Assignment");
						node0->SetId(0);
#if !BEHAVIAC_RELEASE
						node0->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node0);
						node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node15* node15 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node15;
						node15->SetClassNameString("Assignment");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node15);
						node1->SetHasEvents(node1->HasEvents() | node15->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node2;
						node2->SetClassNameString("Assignment");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node3* node3 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node3;
						node3->SetClassNameString("Assignment");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node4;
						node4->SetClassNameString("Assignment");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node5;
						node5->SetClassNameString("Assignment");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node6* node6 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node6;
						node6->SetClassNameString("Assignment");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node6);
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node7* node7 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node7;
						node7->SetClassNameString("Assignment");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node7);
						node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node8;
						node8->SetClassNameString("Assignment");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node8);
						node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node30* node30 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node30;
						node30->SetClassNameString("Assignment");
						node30->SetId(30);
#if !BEHAVIAC_RELEASE
						node30->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node30);
						node1->SetHasEvents(node1->HasEvents() | node30->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node31* node31 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node31;
						node31->SetClassNameString("Assignment");
						node31->SetId(31);
#if !BEHAVIAC_RELEASE
						node31->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node31);
						node1->SetHasEvents(node1->HasEvents() | node31->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node1->HasEvents());
				}
				{
					Sequence* node14 = BEHAVIAC_NEW Sequence;
					node14->SetClassNameString("Sequence");
					node14->SetId(14);
#if !BEHAVIAC_RELEASE
					node14->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node14);
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node9;
						node9->SetClassNameString("Assignment");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node9);
						node14->SetHasEvents(node14->HasEvents() | node9->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node10;
						node10->SetClassNameString("Assignment");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node10);
						node14->SetHasEvents(node14->HasEvents() | node10->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node11;
						node11->SetClassNameString("Assignment");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node11);
						node14->SetHasEvents(node14->HasEvents() | node11->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node12* node12 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node12;
						node12->SetClassNameString("Assignment");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node12);
						node14->SetHasEvents(node14->HasEvents() | node12->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node17* node17 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node17;
						node17->SetClassNameString("Assignment");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node17);
						node14->SetHasEvents(node14->HasEvents() | node17->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node19* node19 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node19;
						node19->SetClassNameString("Assignment");
						node19->SetId(19);
#if !BEHAVIAC_RELEASE
						node19->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node19);
						node14->SetHasEvents(node14->HasEvents() | node19->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node18* node18 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node18;
						node18->SetClassNameString("Assignment");
						node18->SetId(18);
#if !BEHAVIAC_RELEASE
						node18->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node18);
						node14->SetHasEvents(node14->HasEvents() | node18->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
				}
				{
					Sequence* node22 = BEHAVIAC_NEW Sequence;
					node22->SetClassNameString("Sequence");
					node22->SetId(22);
#if !BEHAVIAC_RELEASE
					node22->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node22);
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node16* node16 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node16;
						node16->SetClassNameString("Assignment");
						node16->SetId(16);
#if !BEHAVIAC_RELEASE
						node16->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node16);
						node22->SetHasEvents(node22->HasEvents() | node16->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node20* node20 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node20;
						node20->SetClassNameString("Assignment");
						node20->SetId(20);
#if !BEHAVIAC_RELEASE
						node20->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node20);
						node22->SetHasEvents(node22->HasEvents() | node20->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node24* node24 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node24;
						node24->SetClassNameString("Assignment");
						node24->SetId(24);
#if !BEHAVIAC_RELEASE
						node24->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node24);
						node22->SetHasEvents(node22->HasEvents() | node24->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node25* node25 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node25;
						node25->SetClassNameString("Assignment");
						node25->SetId(25);
#if !BEHAVIAC_RELEASE
						node25->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node25);
						node22->SetHasEvents(node22->HasEvents() | node25->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node26* node26 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node26;
						node26->SetClassNameString("Assignment");
						node26->SetId(26);
#if !BEHAVIAC_RELEASE
						node26->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node26);
						node22->SetHasEvents(node22->HasEvents() | node26->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node27* node27 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node27;
						node27->SetClassNameString("Assignment");
						node27->SetId(27);
#if !BEHAVIAC_RELEASE
						node27->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node27);
						node22->SetHasEvents(node22->HasEvents() | node27->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node21* node21 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node21;
						node21->SetClassNameString("Assignment");
						node21->SetId(21);
#if !BEHAVIAC_RELEASE
						node21->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node21);
						node22->SetHasEvents(node22->HasEvents() | node21->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node23* node23 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node23;
						node23->SetClassNameString("Assignment");
						node23->SetId(23);
#if !BEHAVIAC_RELEASE
						node23->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node23);
						node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node28* node28 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node28;
						node28->SetClassNameString("Assignment");
						node28->SetId(28);
#if !BEHAVIAC_RELEASE
						node28->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node28);
						node22->SetHasEvents(node22->HasEvents() | node28->HasEvents());
					}
					{
						Assignment_bt_par_test_property_as_left_value_and_param_node29* node29 = BEHAVIAC_NEW Assignment_bt_par_test_property_as_left_value_and_param_node29;
						node29->SetClassNameString("Assignment");
						node29->SetId(29);
#if !BEHAVIAC_RELEASE
						node29->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node29);
						node22->SetHasEvents(node22->HasEvents() | node29->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node22->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node13->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/property_as_ref_param

	class Action_bt_par_test_property_as_ref_param_node0 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node0, Action);
		Action_bt_par_test_property_as_ref_param_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::Agent* method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentRef, void, behaviac::Agent*& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_AGENT_0") == 2234467067u);
			pAgent->SetVariable("TV_AGENT_0", method_p0, 2234467067u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node17 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node17, Action);
		Action_bt_par_test_property_as_ref_param_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<behaviac::Agent*> method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListRef, void, behaviac::vector<behaviac::Agent*>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_AGENT_0") == 350152458u);
			pAgent->SetVariable("TV_LIST_AGENT_0", method_p0, 350152458u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node2, Action);
		Action_bt_par_test_property_as_ref_param_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			double method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_D_0, double >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_DoubleRef, void, double& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_D_0") == 2418961396u);
			pAgent->SetVariable("TV_D_0", method_p0, 2418961396u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node3 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node3, Action);
		Action_bt_par_test_property_as_ref_param_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_F_0, float >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleRef, void, float& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_F_0") == 975676287u);
			pAgent->SetVariable("TV_F_0", method_p0, 975676287u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node4, Action);
		Action_bt_par_test_property_as_ref_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<float> method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_F_0, behaviac::vector<float> >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListRef, void, behaviac::vector<float>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_F_0") == 3277708114u);
			pAgent->SetVariable("TV_LIST_F_0", method_p0, 3277708114u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node5, Action);
		Action_bt_par_test_property_as_ref_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			string method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, string >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringRef, void, string& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_STR_0") == 3765213955u);
			pAgent->SetVariable("TV_STR_0", method_p0, 3765213955u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node32 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node32, Action);
		Action_bt_par_test_property_as_ref_param_node32()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			Agent* pAgent_method_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_method_p0);
			string method_p0 = ((ParTestRegNameAgent*)pAgent_method_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0, string >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringRef, void, string& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_STR_0") == 3765213955u);
			pAgent_method_p0->SetVariable("TV_STR_0", method_p0, 3765213955u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node6, Action);
		Action_bt_par_test_property_as_ref_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<string> method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<string> >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListRef, void, behaviac::vector<string>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_STR_0") == 3861554756u);
			pAgent->SetVariable("TV_LIST_STR_0", method_p0, 3861554756u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node7, Action);
		Action_bt_par_test_property_as_ref_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			unsigned int method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_UINT_0, unsigned int >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_UIntRef, void, unsigned int& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_UINT_0") == 447245470u);
			pAgent->SetVariable("TV_UINT_0", method_p0, 447245470u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node8, Action);
		Action_bt_par_test_property_as_ref_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			unsigned long method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongRef, void, unsigned long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_ULONG_0") == 2632905415u);
			pAgent->SetVariable("TV_ULONG_0", method_p0, 2632905415u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node30 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node30, Action);
		Action_bt_par_test_property_as_ref_param_node30()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			long long method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LL_0, long long >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_LongLongRef, void, long long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LL_0") == 2624529173u);
			pAgent->SetVariable("TV_LL_0", method_p0, 2624529173u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node31 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node31, Action);
		Action_bt_par_test_property_as_ref_param_node31()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			unsigned long long method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULL_0, unsigned long long >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongLongRef, void, unsigned long long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_ULL_0") == 3596846321u);
			pAgent->SetVariable("TV_ULL_0", method_p0, 3596846321u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node9, Action);
		Action_bt_par_test_property_as_ref_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			short method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_SHORT_0, short >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_ShortRef, void, short& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_SHORT_0") == 1232231841u);
			pAgent->SetVariable("TV_SHORT_0", method_p0, 1232231841u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node10 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node10, Action);
		Action_bt_par_test_property_as_ref_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_INT_0, int >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntRef, void, int& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_INT_0") == 1293576705u);
			pAgent->SetVariable("TV_INT_0", method_p0, 1293576705u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node11, Action);
		Action_bt_par_test_property_as_ref_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<int> method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_INT_0, behaviac::vector<int> >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListRef, void, behaviac::vector<int>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_INT_0") == 1264342854u);
			pAgent->SetVariable("TV_LIST_INT_0", method_p0, 1264342854u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node12, Action);
		Action_bt_par_test_property_as_ref_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			long method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LONG_0, long >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_LongRef, void, long& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LONG_0") == 2082189039u);
			pAgent->SetVariable("TV_LONG_0", method_p0, 2082189039u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node18 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node18, Action);
		Action_bt_par_test_property_as_ref_param_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			TNS::ST::PER::WRK::kEmployee method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeRef, void, TNS::ST::PER::WRK::kEmployee& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_KEMPLOYEE_0") == 2788553297u);
			pAgent->SetVariable("TV_KEMPLOYEE_0", method_p0, 2788553297u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node19 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node19, Action);
		Action_bt_par_test_property_as_ref_param_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef, void, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_KEMPLOYEE_0") == 1712688287u);
			pAgent->SetVariable("TV_LIST_KEMPLOYEE_0", method_p0, 1712688287u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node20 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node20, Action);
		Action_bt_par_test_property_as_ref_param_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			unsigned short method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_USHORT_0, unsigned short >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_UShortRef, void, unsigned short& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_USHORT_0") == 537748306u);
			pAgent->SetVariable("TV_USHORT_0", method_p0, 537748306u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node16, Action);
		Action_bt_par_test_property_as_ref_param_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BOOL_0, bool >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef, void, bool& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_BOOL_0") == 3326442243u);
			pAgent->SetVariable("TV_BOOL_0", method_p0, 3326442243u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node21 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node21, Action);
		Action_bt_par_test_property_as_ref_param_node21()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<bool> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BOOL_0, behaviac::vector<bool> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef, void, behaviac::vector<bool>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_BOOL_0") == 3454568683u);
			pAgent->SetVariable("TV_LIST_BOOL_0", method_p0, 3454568683u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node15 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node15, Action);
		Action_bt_par_test_property_as_ref_param_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			unsigned char method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteRef, void, unsigned char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_BYTE_0") == 2045932444u);
			pAgent->SetVariable("TV_BYTE_0", method_p0, 2045932444u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node29 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node29, Action);
		Action_bt_par_test_property_as_ref_param_node29()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<unsigned char> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_BYTE_0, behaviac::vector<unsigned char> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteListRef, void, behaviac::vector<unsigned char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_BYTE_0") == 1918861428u);
			pAgent->SetVariable("TV_LIST_BYTE_0", method_p0, 1918861428u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node26 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node26, Action);
		Action_bt_par_test_property_as_ref_param_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			char method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef, void, char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_CHAR_0") == 1925308098u);
			pAgent->SetVariable("TV_CHAR_0", method_p0, 1925308098u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node27 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node27, Action);
		Action_bt_par_test_property_as_ref_param_node27()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<char> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef, void, behaviac::vector<char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_CHAR_0") == 2037132586u);
			pAgent->SetVariable("TV_LIST_CHAR_0", method_p0, 2037132586u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node24 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node24, Action);
		Action_bt_par_test_property_as_ref_param_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			TNS::NE::NAT::eColor method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_ECOLOR_0, TNS::NE::NAT::eColor >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef, void, TNS::NE::NAT::eColor& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_ECOLOR_0") == 241062087u);
			pAgent->SetVariable("TV_ECOLOR_0", method_p0, 241062087u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node25 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node25, Action);
		Action_bt_par_test_property_as_ref_param_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<TNS::NE::NAT::eColor> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef, void, behaviac::vector<TNS::NE::NAT::eColor>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_ECOLOR_0") == 862412353u);
			pAgent->SetVariable("TV_LIST_ECOLOR_0", method_p0, 862412353u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node23 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node23, Action);
		Action_bt_par_test_property_as_ref_param_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			signed char method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteRef, void, signed char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_SBYTE_0") == 1600661043u);
			pAgent->SetVariable("TV_SBYTE_0", method_p0, 1600661043u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_property_as_ref_param_node28 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_property_as_ref_param_node28, Action);
		Action_bt_par_test_property_as_ref_param_node28()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<signed char> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef, void, behaviac::vector<signed char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("TV_LIST_SBYTE_0") == 3466167234u);
			pAgent->SetVariable("TV_LIST_SBYTE_0", method_p0, 3466167234u);
			return BT_SUCCESS;
		}
	};

	class bt_par_test_property_as_ref_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/property_as_ref_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// pars
			pBT->AddPar("EmployeeParTestAgent", "ulong", "par2_ulong_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "uint", "par2_uint_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<string>", "par2_string_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "string", "par2_string_0", "");
			pBT->AddPar("EmployeeParTestAgent", "vector<float>", "par2_single_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "float", "par2_single_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "double", "par2_double_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<behaviac::Agent>", "par2_agent_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "behaviac::Agent", "par2_agent_0", "null");
			pBT->AddPar("EmployeeParTestAgent", "ushort", "par1_ushort_0", "65535");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::ST::PER::WRK::kEmployee>", "par1_kemployee_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "TNS::ST::PER::WRK::kEmployee", "par1_kemployee_0", "{boss=null;car={brand=\"\";color=RED;price=0;};code=c;id=0;isMale=false;name=\"tomlp\";skinColor=RED;weight=0;}");
			pBT->AddPar("EmployeeParTestAgent", "long", "par1_long_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<int>", "par1_int_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "int", "par1_int_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "short", "par1_short_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<sbyte>", "par0_sbyte_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "sbyte", "par0_sbyte_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<TNS::NE::NAT::eColor>", "par0_ecolor_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "TNS::NE::NAT::eColor", "par0_ecolor_0", "WHITE");
			pBT->AddPar("EmployeeParTestAgent", "vector<char>", "par0_char_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "char", "par0_char_0", "A");
			pBT->AddPar("EmployeeParTestAgent", "vector<ubyte>", "par0_byte_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "ubyte", "par0_byte_0", "0");
			pBT->AddPar("EmployeeParTestAgent", "vector<bool>", "par0_boolean_list_0", "0:");
			pBT->AddPar("EmployeeParTestAgent", "bool", "par0_boolean_0", "false");
			// children
			{
				Sequence* node13 = BEHAVIAC_NEW Sequence;
				node13->SetClassNameString("Sequence");
				node13->SetId(13);
#if !BEHAVIAC_RELEASE
				node13->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node13);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node1);
					{
						Action_bt_par_test_property_as_ref_param_node0* node0 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node0;
						node0->SetClassNameString("Action");
						node0->SetId(0);
#if !BEHAVIAC_RELEASE
						node0->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node0);
						node1->SetHasEvents(node1->HasEvents() | node0->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node17* node17 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node17;
						node17->SetClassNameString("Action");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node17);
						node1->SetHasEvents(node1->HasEvents() | node17->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node2* node2 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node2;
						node2->SetClassNameString("Action");
						node2->SetId(2);
#if !BEHAVIAC_RELEASE
						node2->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node2);
						node1->SetHasEvents(node1->HasEvents() | node2->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node3* node3 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node3;
						node3->SetClassNameString("Action");
						node3->SetId(3);
#if !BEHAVIAC_RELEASE
						node3->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node3);
						node1->SetHasEvents(node1->HasEvents() | node3->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node4* node4 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node5* node5 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node32* node32 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node32;
						node32->SetClassNameString("Action");
						node32->SetId(32);
#if !BEHAVIAC_RELEASE
						node32->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node32);
						node1->SetHasEvents(node1->HasEvents() | node32->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node6* node6 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node6);
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node7* node7 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node7;
						node7->SetClassNameString("Action");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node7);
						node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node8* node8 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node8);
						node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node30* node30 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node30;
						node30->SetClassNameString("Action");
						node30->SetId(30);
#if !BEHAVIAC_RELEASE
						node30->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node30);
						node1->SetHasEvents(node1->HasEvents() | node30->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node31* node31 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node31;
						node31->SetClassNameString("Action");
						node31->SetId(31);
#if !BEHAVIAC_RELEASE
						node31->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node31);
						node1->SetHasEvents(node1->HasEvents() | node31->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node1->HasEvents());
				}
				{
					Sequence* node14 = BEHAVIAC_NEW Sequence;
					node14->SetClassNameString("Sequence");
					node14->SetId(14);
#if !BEHAVIAC_RELEASE
					node14->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node14);
					{
						Action_bt_par_test_property_as_ref_param_node9* node9 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node9;
						node9->SetClassNameString("Action");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node9);
						node14->SetHasEvents(node14->HasEvents() | node9->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node10* node10 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node10;
						node10->SetClassNameString("Action");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node10);
						node14->SetHasEvents(node14->HasEvents() | node10->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node11* node11 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node11;
						node11->SetClassNameString("Action");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node11);
						node14->SetHasEvents(node14->HasEvents() | node11->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node12* node12 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node12;
						node12->SetClassNameString("Action");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node12);
						node14->SetHasEvents(node14->HasEvents() | node12->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node18* node18 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node18;
						node18->SetClassNameString("Action");
						node18->SetId(18);
#if !BEHAVIAC_RELEASE
						node18->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node18);
						node14->SetHasEvents(node14->HasEvents() | node18->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node19* node19 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node19;
						node19->SetClassNameString("Action");
						node19->SetId(19);
#if !BEHAVIAC_RELEASE
						node19->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node19);
						node14->SetHasEvents(node14->HasEvents() | node19->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node20* node20 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node20;
						node20->SetClassNameString("Action");
						node20->SetId(20);
#if !BEHAVIAC_RELEASE
						node20->SetAgentType("EmployeeParTestAgent");
#endif
						node14->AddChild(node20);
						node14->SetHasEvents(node14->HasEvents() | node20->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node14->HasEvents());
				}
				{
					Sequence* node22 = BEHAVIAC_NEW Sequence;
					node22->SetClassNameString("Sequence");
					node22->SetId(22);
#if !BEHAVIAC_RELEASE
					node22->SetAgentType("EmployeeParTestAgent");
#endif
					node13->AddChild(node22);
					{
						Action_bt_par_test_property_as_ref_param_node16* node16 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node16;
						node16->SetClassNameString("Action");
						node16->SetId(16);
#if !BEHAVIAC_RELEASE
						node16->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node16);
						node22->SetHasEvents(node22->HasEvents() | node16->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node21* node21 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node21;
						node21->SetClassNameString("Action");
						node21->SetId(21);
#if !BEHAVIAC_RELEASE
						node21->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node21);
						node22->SetHasEvents(node22->HasEvents() | node21->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node15* node15 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node15;
						node15->SetClassNameString("Action");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node15);
						node22->SetHasEvents(node22->HasEvents() | node15->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node29* node29 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node29;
						node29->SetClassNameString("Action");
						node29->SetId(29);
#if !BEHAVIAC_RELEASE
						node29->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node29);
						node22->SetHasEvents(node22->HasEvents() | node29->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node26* node26 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node26;
						node26->SetClassNameString("Action");
						node26->SetId(26);
#if !BEHAVIAC_RELEASE
						node26->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node26);
						node22->SetHasEvents(node22->HasEvents() | node26->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node27* node27 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node27;
						node27->SetClassNameString("Action");
						node27->SetId(27);
#if !BEHAVIAC_RELEASE
						node27->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node27);
						node22->SetHasEvents(node22->HasEvents() | node27->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node24* node24 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node24;
						node24->SetClassNameString("Action");
						node24->SetId(24);
#if !BEHAVIAC_RELEASE
						node24->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node24);
						node22->SetHasEvents(node22->HasEvents() | node24->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node25* node25 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node25;
						node25->SetClassNameString("Action");
						node25->SetId(25);
#if !BEHAVIAC_RELEASE
						node25->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node25);
						node22->SetHasEvents(node22->HasEvents() | node25->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node23* node23 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node23;
						node23->SetClassNameString("Action");
						node23->SetId(23);
#if !BEHAVIAC_RELEASE
						node23->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node23);
						node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
					}
					{
						Action_bt_par_test_property_as_ref_param_node28* node28 = BEHAVIAC_NEW Action_bt_par_test_property_as_ref_param_node28;
						node28->SetClassNameString("Action");
						node28->SetId(28);
#if !BEHAVIAC_RELEASE
						node28->SetAgentType("EmployeeParTestAgent");
#endif
						node22->AddChild(node28);
						node22->SetHasEvents(node22->HasEvents() | node28->HasEvents());
					}
					node13->SetHasEvents(node13->HasEvents() | node22->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node13->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/readonly_default

	class Assignment_bt_par_test_readonly_default_node3 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_readonly_default_node3, Assignment);
		Assignment_bt_par_test_readonly_default_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = ((PropertyReadonlyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonly, int >();
			((PropertyReadonlyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterSetter, int >() = opr;
			return result;
		}
	};

	class Action_bt_par_test_readonly_default_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_readonly_default_node1, Action);
		Action_bt_par_test_readonly_default_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int method_p0 = ((PropertyReadonlyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterOnly, int >();
			((PropertyReadonlyAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_PropertyReadonlyAgent_PassInProperty, void, int >(method_p0);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_readonly_default_node2 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_readonly_default_node2, Action);
		Action_bt_par_test_readonly_default_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Int") == 3849503314u);
			int& method_p0 = (int&)pAgent->GetVariable<int >(3849503314u);
			((PropertyReadonlyAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_PropertyReadonlyAgent_FnWithOutParam, void, int& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Int") == 3849503314u);
			pAgent->SetVariable("c_Int", method_p0, 3849503314u);
			return BT_SUCCESS;
		}
	};

	class Compute_bt_par_test_readonly_default_node4 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_par_test_readonly_default_node4, Compute);
		Compute_bt_par_test_readonly_default_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr1 = ((PropertyReadonlyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_MemberReadonly, int >();
			int opr2 = ((PropertyReadonlyAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_PropertyReadonlyAgent_PropertyGetterOnly, int >();
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ResultStatic") == 450204216u);
			pAgent->SetVariable("c_ResultStatic", (int)(opr1 + opr2), 450204216u);
			return result;
		}
	};

	class bt_par_test_readonly_default
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/readonly_default");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("PropertyReadonlyAgent");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("PropertyReadonlyAgent");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_par_test_readonly_default_node3* node3 = BEHAVIAC_NEW Assignment_bt_par_test_readonly_default_node3;
					node3->SetClassNameString("Assignment");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("PropertyReadonlyAgent");
#endif
					node0->AddChild(node3);
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_par_test_readonly_default_node1* node1 = BEHAVIAC_NEW Action_bt_par_test_readonly_default_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("PropertyReadonlyAgent");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Action_bt_par_test_readonly_default_node2* node2 = BEHAVIAC_NEW Action_bt_par_test_readonly_default_node2;
					node2->SetClassNameString("Action");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("PropertyReadonlyAgent");
#endif
					node0->AddChild(node2);
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Compute_bt_par_test_readonly_default_node4* node4 = BEHAVIAC_NEW Compute_bt_par_test_readonly_default_node4;
					node4->SetClassNameString("Compute");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("PropertyReadonlyAgent");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/register_name_as_left_value_and_param

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node1, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			TNS::ST::PER::WRK::kEmployee opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node4, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node5, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			behaviac::vector<signed char> opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			behaviac::vector<signed char> opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_STV_LIST_SBYTE_0, behaviac::vector<signed char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node6, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			behaviac::Agent* opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_AGENT_0, behaviac::Agent* >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			behaviac::Agent* opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_AgentIR, behaviac::Agent*, behaviac::Agent* >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_AGENT_0, behaviac::Agent* >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node7, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			unsigned char opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_BYTE_0, unsigned char >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			unsigned char opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_ByteIR, unsigned char, unsigned char >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_BYTE_0, unsigned char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node8, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			char opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_CHAR_0, char >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			char opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_CharIR, char, char >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_CHAR_0, char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node9, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			TNS::ST::PER::WRK::kEmployee opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node10, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node11, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			signed char opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_SBYTE_0, signed char >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			signed char opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_SByteIR, signed char, signed char >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_SBYTE_0, signed char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_register_name_as_left_value_and_param_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_register_name_as_left_value_and_param_node12, Assignment);
		Assignment_bt_par_test_register_name_as_left_value_and_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			Agent* pAgent_opr_p0 = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr_p0);
			string opr_p0 = ((ParTestRegNameAgent*)pAgent_opr_p0)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0, string >();
			Agent* pAgent_opr = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opr);
			string opr = ((ParTestRegNameAgent*)pAgent_opr)->_Execute_Method_<METHOD_TYPE_ParTestRegNameAgent_Func_StringIR, string, string >(opr_p0);
			Agent* pAgent_opl = Agent::GetInstance(pAgent, "ParTestRegNameAgent");
			BEHAVIAC_ASSERT(pAgent_opl);
			((ParTestRegNameAgent*)pAgent_opl)->_Get_Property_<PROPERTY_TYPE_ParTestRegNameAgent_TV_STR_0, string >() = opr;
			return result;
		}
	};

	class bt_par_test_register_name_as_left_value_and_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/register_name_as_left_value_and_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node0);
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node1* node1 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node1;
					node1->SetClassNameString("Assignment");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node4);
					node0->SetHasEvents(node0->HasEvents() | node4->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node5;
					node5->SetClassNameString("Assignment");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node5);
					node0->SetHasEvents(node0->HasEvents() | node5->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node6* node6 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node6;
					node6->SetClassNameString("Assignment");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node6);
					node0->SetHasEvents(node0->HasEvents() | node6->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node7* node7 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node7;
					node7->SetClassNameString("Assignment");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node7);
					node0->SetHasEvents(node0->HasEvents() | node7->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node8;
					node8->SetClassNameString("Assignment");
					node8->SetId(8);
#if !BEHAVIAC_RELEASE
					node8->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node8);
					node0->SetHasEvents(node0->HasEvents() | node8->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node9;
					node9->SetClassNameString("Assignment");
					node9->SetId(9);
#if !BEHAVIAC_RELEASE
					node9->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node9);
					node0->SetHasEvents(node0->HasEvents() | node9->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node10;
					node10->SetClassNameString("Assignment");
					node10->SetId(10);
#if !BEHAVIAC_RELEASE
					node10->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node10);
					node0->SetHasEvents(node0->HasEvents() | node10->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node11;
					node11->SetClassNameString("Assignment");
					node11->SetId(11);
#if !BEHAVIAC_RELEASE
					node11->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node11);
					node0->SetHasEvents(node0->HasEvents() | node11->HasEvents());
				}
				{
					Assignment_bt_par_test_register_name_as_left_value_and_param_node12* node12 = BEHAVIAC_NEW Assignment_bt_par_test_register_name_as_left_value_and_param_node12;
					node12->SetClassNameString("Assignment");
					node12->SetId(12);
#if !BEHAVIAC_RELEASE
					node12->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node12);
					node0->SetHasEvents(node0->HasEvents() | node12->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/static_member_function_test_0

	class Assignment_bt_par_test_static_member_function_test_0_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node4, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >();
			char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharSMF, char, char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_CHAR_0, char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node5, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >();
			unsigned char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_ByteSMF, unsigned char, unsigned char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_BYTE_0, unsigned char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node6, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			signed char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >();
			signed char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteSMF, signed char, signed char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_SBYTE_0, signed char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node7, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >();
			behaviac::vector<char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListSMF, behaviac::vector<char>, behaviac::vector<char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_CHAR_0, behaviac::vector<char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node8, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<signed char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >();
			behaviac::vector<signed char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListSMF, behaviac::vector<signed char>, behaviac::vector<signed char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_TV_LIST_SBYTE_0, behaviac::vector<signed char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node9, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::ST::PER::WRK::kEmployee opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeSMF, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node10, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListSMF, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_TV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node11, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node11()
		{
			opr_p0 = 0;
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			unsigned long opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_ULongSMF, unsigned long, unsigned long >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_ULONG_0, unsigned long >() = opr;
			return result;
		}
		unsigned long opr_p0;
	};

	class Assignment_bt_par_test_static_member_function_test_0_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node12, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			string opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, string >();
			string opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringSMF, string, string& >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_STR_0, string >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node13 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node13, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<string> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<string> >();
			behaviac::vector<string> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListSMF, behaviac::vector<string>, behaviac::vector<string> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_STR_0, behaviac::vector<string> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node14 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node14, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::Agent* opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >();
			behaviac::Agent* opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentSMF, behaviac::Agent*, behaviac::Agent* >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_AGENT_0, behaviac::Agent* >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_member_function_test_0_node15 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_member_function_test_0_node15, Assignment);
		Assignment_bt_par_test_static_member_function_test_0_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<behaviac::Agent*> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >();
			behaviac::vector<behaviac::Agent*> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListSMF, behaviac::vector<behaviac::Agent*>, behaviac::vector<behaviac::Agent*> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_TV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >() = opr;
			return result;
		}
	};

	class bt_par_test_static_member_function_test_0
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/static_member_function_test_0");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node1);
					{
						Assignment_bt_par_test_static_member_function_test_0_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node4;
						node4->SetClassNameString("Assignment");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node5;
						node5->SetClassNameString("Assignment");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node6* node6 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node6;
						node6->SetClassNameString("Assignment");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node6);
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node7* node7 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node7;
						node7->SetClassNameString("Assignment");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node7);
						node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node8;
						node8->SetClassNameString("Assignment");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node8);
						node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Sequence* node2 = BEHAVIAC_NEW Sequence;
					node2->SetClassNameString("Sequence");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node2);
					{
						Assignment_bt_par_test_static_member_function_test_0_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node9;
						node9->SetClassNameString("Assignment");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node9);
						node2->SetHasEvents(node2->HasEvents() | node9->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node10;
						node10->SetClassNameString("Assignment");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node10);
						node2->SetHasEvents(node2->HasEvents() | node10->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Sequence* node3 = BEHAVIAC_NEW Sequence;
					node3->SetClassNameString("Sequence");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node3);
					{
						Assignment_bt_par_test_static_member_function_test_0_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node11;
						node11->SetClassNameString("Assignment");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node11);
						node3->SetHasEvents(node3->HasEvents() | node11->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node12* node12 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node12;
						node12->SetClassNameString("Assignment");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node12);
						node3->SetHasEvents(node3->HasEvents() | node12->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node13* node13 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node13;
						node13->SetClassNameString("Assignment");
						node13->SetId(13);
#if !BEHAVIAC_RELEASE
						node13->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node13);
						node3->SetHasEvents(node3->HasEvents() | node13->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node14* node14 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node14;
						node14->SetClassNameString("Assignment");
						node14->SetId(14);
#if !BEHAVIAC_RELEASE
						node14->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node14);
						node3->SetHasEvents(node3->HasEvents() | node14->HasEvents());
					}
					{
						Assignment_bt_par_test_static_member_function_test_0_node15* node15 = BEHAVIAC_NEW Assignment_bt_par_test_static_member_function_test_0_node15;
						node15->SetClassNameString("Assignment");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node15);
						node3->SetHasEvents(node3->HasEvents() | node15->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/static_property_as_left_value_and_param

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node4, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::NE::NAT::eColor opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0, TNS::NE::NAT::eColor >();
			TNS::NE::NAT::eColor opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorIR, TNS::NE::NAT::eColor, TNS::NE::NAT::eColor >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0, TNS::NE::NAT::eColor >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node5, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			bool opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0, bool >();
			bool opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanIR, bool, bool >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0, bool >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node6 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node6, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			char opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0, char >();
			char opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharIR, char, char >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0, char >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node7 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node7, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<TNS::NE::NAT::eColor> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >();
			behaviac::vector<TNS::NE::NAT::eColor> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListIR, behaviac::vector<TNS::NE::NAT::eColor>, behaviac::vector<TNS::NE::NAT::eColor> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node8 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node8, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<bool> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >();
			behaviac::vector<bool> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListIR, behaviac::vector<bool>, behaviac::vector<bool> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node9 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node9, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >();
			behaviac::vector<char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListIR, behaviac::vector<char>, behaviac::vector<char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node10 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node10, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<signed char> opr_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >();
			behaviac::vector<signed char> opr = ((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListIR, behaviac::vector<signed char>, behaviac::vector<signed char> >(opr_p0);
			((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node15 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node15, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_INT_0, int >();
			int opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntIR, int, int >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_INT_0, int >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node12 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node12, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			TNS::ST::PER::WRK::kEmployee opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			TNS::ST::PER::WRK::kEmployee opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeIR, TNS::ST::PER::WRK::kEmployee, TNS::ST::PER::WRK::kEmployee >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node13 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node13, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<int> opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >();
			behaviac::vector<int> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListIR, behaviac::vector<int>, behaviac::vector<int> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node11 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node11, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> opr = ((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListIR, behaviac::vector<TNS::ST::PER::WRK::kEmployee>, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >(opr_p0);
			((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node14 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node14, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			float opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0, float >();
			float opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleIR, float, float >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0, float >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node19 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node19, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			string opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0, string >();
			string opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringIR, string, string& >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0, string >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node17 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node17, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::Agent* opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0, behaviac::Agent* >();
			behaviac::Agent* opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentIR, behaviac::Agent*, behaviac::Agent* >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0, behaviac::Agent* >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node18 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node18, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<float> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >();
			behaviac::vector<float> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListIR, behaviac::vector<float>, behaviac::vector<float> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node16 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node16, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<string> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<string> >();
			behaviac::vector<string> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListIR, behaviac::vector<string>, behaviac::vector<string> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<string> >() = opr;
			return result;
		}
	};

	class Assignment_bt_par_test_static_property_as_left_value_and_param_node20 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_static_property_as_left_value_and_param_node20, Assignment);
		Assignment_bt_par_test_static_property_as_left_value_and_param_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<behaviac::Agent*> opr_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >();
			behaviac::vector<behaviac::Agent*> opr = ((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListIR, behaviac::vector<behaviac::Agent*>, behaviac::vector<behaviac::Agent*> >(opr_p0);
			((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >() = opr;
			return result;
		}
	};

	class bt_par_test_static_property_as_left_value_and_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/static_property_as_left_value_and_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node1);
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node4;
						node4->SetClassNameString("Assignment");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node5;
						node5->SetClassNameString("Assignment");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node6* node6 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node6;
						node6->SetClassNameString("Assignment");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node6);
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node7* node7 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node7;
						node7->SetClassNameString("Assignment");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node7);
						node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node8* node8 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node8;
						node8->SetClassNameString("Assignment");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node8);
						node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node9* node9 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node9;
						node9->SetClassNameString("Assignment");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node9);
						node1->SetHasEvents(node1->HasEvents() | node9->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node10* node10 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node10;
						node10->SetClassNameString("Assignment");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node10);
						node1->SetHasEvents(node1->HasEvents() | node10->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Sequence* node2 = BEHAVIAC_NEW Sequence;
					node2->SetClassNameString("Sequence");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node2);
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node15* node15 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node15;
						node15->SetClassNameString("Assignment");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node15);
						node2->SetHasEvents(node2->HasEvents() | node15->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node12* node12 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node12;
						node12->SetClassNameString("Assignment");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node12);
						node2->SetHasEvents(node2->HasEvents() | node12->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node13* node13 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node13;
						node13->SetClassNameString("Assignment");
						node13->SetId(13);
#if !BEHAVIAC_RELEASE
						node13->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node13);
						node2->SetHasEvents(node2->HasEvents() | node13->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node11* node11 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node11;
						node11->SetClassNameString("Assignment");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node11);
						node2->SetHasEvents(node2->HasEvents() | node11->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Sequence* node3 = BEHAVIAC_NEW Sequence;
					node3->SetClassNameString("Sequence");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node3);
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node14* node14 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node14;
						node14->SetClassNameString("Assignment");
						node14->SetId(14);
#if !BEHAVIAC_RELEASE
						node14->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node14);
						node3->SetHasEvents(node3->HasEvents() | node14->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node19* node19 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node19;
						node19->SetClassNameString("Assignment");
						node19->SetId(19);
#if !BEHAVIAC_RELEASE
						node19->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node19);
						node3->SetHasEvents(node3->HasEvents() | node19->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node17* node17 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node17;
						node17->SetClassNameString("Assignment");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node17);
						node3->SetHasEvents(node3->HasEvents() | node17->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node18* node18 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node18;
						node18->SetClassNameString("Assignment");
						node18->SetId(18);
#if !BEHAVIAC_RELEASE
						node18->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node18);
						node3->SetHasEvents(node3->HasEvents() | node18->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node16* node16 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node16;
						node16->SetClassNameString("Assignment");
						node16->SetId(16);
#if !BEHAVIAC_RELEASE
						node16->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node16);
						node3->SetHasEvents(node3->HasEvents() | node16->HasEvents());
					}
					{
						Assignment_bt_par_test_static_property_as_left_value_and_param_node20* node20 = BEHAVIAC_NEW Assignment_bt_par_test_static_property_as_left_value_and_param_node20;
						node20->SetClassNameString("Assignment");
						node20->SetId(20);
#if !BEHAVIAC_RELEASE
						node20->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node20);
						node3->SetHasEvents(node3->HasEvents() | node20->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/static_property_as_ref_param

	class Action_bt_par_test_static_property_as_ref_param_node4 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node4, Action);
		Action_bt_par_test_static_property_as_ref_param_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			TNS::NE::NAT::eColor method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_ECOLOR_0, TNS::NE::NAT::eColor >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorRef, void, TNS::NE::NAT::eColor& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_ECOLOR_0") == 1356537398u);
			pAgent->SetVariable("STV_ECOLOR_0", method_p0, 1356537398u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node5 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node5, Action);
		Action_bt_par_test_static_property_as_ref_param_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_BOOL_0, bool >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanRef, void, bool& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_BOOL_0") == 907888646u);
			pAgent->SetVariable("STV_BOOL_0", method_p0, 907888646u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node6, Action);
		Action_bt_par_test_static_property_as_ref_param_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			char method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_CHAR_0, char >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharRef, void, char& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_CHAR_0") == 2191125959u);
			pAgent->SetVariable("STV_CHAR_0", method_p0, 2191125959u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node7, Action);
		Action_bt_par_test_static_property_as_ref_param_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<TNS::NE::NAT::eColor> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_ECOLOR_0, behaviac::vector<TNS::NE::NAT::eColor> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_eColorListRef, void, behaviac::vector<TNS::NE::NAT::eColor>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_ECOLOR_0") == 2487001405u);
			pAgent->SetVariable("STV_LIST_ECOLOR_0", method_p0, 2487001405u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node8 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node8, Action);
		Action_bt_par_test_static_property_as_ref_param_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<bool> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_BOOL_0, behaviac::vector<bool> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_BooleanListRef, void, behaviac::vector<bool>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_BOOL_0") == 1612090457u);
			pAgent->SetVariable("STV_LIST_BOOL_0", method_p0, 1612090457u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node9 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node9, Action);
		Action_bt_par_test_static_property_as_ref_param_node9()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<char> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_CHAR_0, behaviac::vector<char> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_CharListRef, void, behaviac::vector<char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_CHAR_0") == 3566348696u);
			pAgent->SetVariable("STV_LIST_CHAR_0", method_p0, 3566348696u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node10 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node10, Action);
		Action_bt_par_test_static_property_as_ref_param_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<signed char> method_p0 = ((ParTestAgentBase*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgentBase_STV_LIST_SBYTE_0, behaviac::vector<signed char> >();
			((ParTestAgentBase*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgentBase_Func_SByteListRef, void, behaviac::vector<signed char>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_SBYTE_0") == 2135462866u);
			pAgent->SetVariable("STV_LIST_SBYTE_0", method_p0, 2135462866u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node15 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node15, Action);
		Action_bt_par_test_static_property_as_ref_param_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			int method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_INT_0, int >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntRef, void, int& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_INT_0") == 1841109764u);
			pAgent->SetVariable("STV_INT_0", method_p0, 1841109764u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node12, Action);
		Action_bt_par_test_static_property_as_ref_param_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			TNS::ST::PER::WRK::kEmployee method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_KEMPLOYEE_0, TNS::ST::PER::WRK::kEmployee >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeRef, void, TNS::ST::PER::WRK::kEmployee& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_KEMPLOYEE_0") == 197916387u);
			pAgent->SetVariable("STV_KEMPLOYEE_0", method_p0, 197916387u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node13 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node13, Action);
		Action_bt_par_test_static_property_as_ref_param_node13()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<int> method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_INT_0, behaviac::vector<int> >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_IntListRef, void, behaviac::vector<int>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_INT_0") == 1272574615u);
			pAgent->SetVariable("STV_LIST_INT_0", method_p0, 1272574615u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node11, Action);
		Action_bt_par_test_static_property_as_ref_param_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<TNS::ST::PER::WRK::kEmployee> method_p0 = ((ParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_ParTestAgent_STV_LIST_KEMPLOYEE_0, behaviac::vector<TNS::ST::PER::WRK::kEmployee> >();
			((ParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_ParTestAgent_Func_kEmployeeListRef, void, behaviac::vector<TNS::ST::PER::WRK::kEmployee>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_KEMPLOYEE_0") == 1924897476u);
			pAgent->SetVariable("STV_LIST_KEMPLOYEE_0", method_p0, 1924897476u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node14 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node14, Action);
		Action_bt_par_test_static_property_as_ref_param_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			float method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_F_0, float >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleRef, void, float& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_F_0") == 1858562011u);
			pAgent->SetVariable("STV_F_0", method_p0, 1858562011u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node16, Action);
		Action_bt_par_test_static_property_as_ref_param_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			string method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_STR_0, string >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringRef, void, string& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_STR_0") == 3234589190u);
			pAgent->SetVariable("STV_STR_0", method_p0, 3234589190u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node17 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node17, Action);
		Action_bt_par_test_static_property_as_ref_param_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::Agent* method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_AGENT_0, behaviac::Agent* >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentRef, void, behaviac::Agent*& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_AGENT_0") == 2845805842u);
			pAgent->SetVariable("STV_AGENT_0", method_p0, 2845805842u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node18 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node18, Action);
		Action_bt_par_test_static_property_as_ref_param_node18()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<float> method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_F_0, behaviac::vector<float> >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_SingleListRef, void, behaviac::vector<float>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_F_0") == 2648216995u);
			pAgent->SetVariable("STV_LIST_F_0", method_p0, 2648216995u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node19 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node19, Action);
		Action_bt_par_test_static_property_as_ref_param_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<string> method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_STR_0, behaviac::vector<string> >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_StringListRef, void, behaviac::vector<string>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_STR_0") == 3870229397u);
			pAgent->SetVariable("STV_LIST_STR_0", method_p0, 3870229397u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_static_property_as_ref_param_node20 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_static_property_as_ref_param_node20, Action);
		Action_bt_par_test_static_property_as_ref_param_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::vector<behaviac::Agent*> method_p0 = ((EmployeeParTestAgent*)pAgent)->_Get_Property_<PROPERTY_TYPE_EmployeeParTestAgent_STV_LIST_AGENT_0, behaviac::vector<behaviac::Agent*> >();
			((EmployeeParTestAgent*)pAgent)->_Execute_Method_<METHOD_TYPE_EmployeeParTestAgent_Func_AgentListRef, void, behaviac::vector<behaviac::Agent*>& >(method_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("STV_LIST_AGENT_0") == 2769286938u);
			pAgent->SetVariable("STV_LIST_AGENT_0", method_p0, 2769286938u);
			return BT_SUCCESS;
		}
	};

	class bt_par_test_static_property_as_ref_param
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/static_property_as_ref_param");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("EmployeeParTestAgent");
#endif
			// children
			{
				Sequence* node0 = BEHAVIAC_NEW Sequence;
				node0->SetClassNameString("Sequence");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("EmployeeParTestAgent");
#endif
				pBT->AddChild(node0);
				{
					Sequence* node1 = BEHAVIAC_NEW Sequence;
					node1->SetClassNameString("Sequence");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node1);
					{
						Action_bt_par_test_static_property_as_ref_param_node4* node4 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node4;
						node4->SetClassNameString("Action");
						node4->SetId(4);
#if !BEHAVIAC_RELEASE
						node4->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node4);
						node1->SetHasEvents(node1->HasEvents() | node4->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node5* node5 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node5;
						node5->SetClassNameString("Action");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node5);
						node1->SetHasEvents(node1->HasEvents() | node5->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node6* node6 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node6;
						node6->SetClassNameString("Action");
						node6->SetId(6);
#if !BEHAVIAC_RELEASE
						node6->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node6);
						node1->SetHasEvents(node1->HasEvents() | node6->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node7* node7 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node7;
						node7->SetClassNameString("Action");
						node7->SetId(7);
#if !BEHAVIAC_RELEASE
						node7->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node7);
						node1->SetHasEvents(node1->HasEvents() | node7->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node8* node8 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node8;
						node8->SetClassNameString("Action");
						node8->SetId(8);
#if !BEHAVIAC_RELEASE
						node8->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node8);
						node1->SetHasEvents(node1->HasEvents() | node8->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node9* node9 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node9;
						node9->SetClassNameString("Action");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node9);
						node1->SetHasEvents(node1->HasEvents() | node9->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node10* node10 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node10;
						node10->SetClassNameString("Action");
						node10->SetId(10);
#if !BEHAVIAC_RELEASE
						node10->SetAgentType("EmployeeParTestAgent");
#endif
						node1->AddChild(node10);
						node1->SetHasEvents(node1->HasEvents() | node10->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Sequence* node2 = BEHAVIAC_NEW Sequence;
					node2->SetClassNameString("Sequence");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node2);
					{
						Action_bt_par_test_static_property_as_ref_param_node15* node15 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node15;
						node15->SetClassNameString("Action");
						node15->SetId(15);
#if !BEHAVIAC_RELEASE
						node15->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node15);
						node2->SetHasEvents(node2->HasEvents() | node15->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node12* node12 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node12;
						node12->SetClassNameString("Action");
						node12->SetId(12);
#if !BEHAVIAC_RELEASE
						node12->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node12);
						node2->SetHasEvents(node2->HasEvents() | node12->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node13* node13 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node13;
						node13->SetClassNameString("Action");
						node13->SetId(13);
#if !BEHAVIAC_RELEASE
						node13->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node13);
						node2->SetHasEvents(node2->HasEvents() | node13->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node11* node11 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node11;
						node11->SetClassNameString("Action");
						node11->SetId(11);
#if !BEHAVIAC_RELEASE
						node11->SetAgentType("EmployeeParTestAgent");
#endif
						node2->AddChild(node11);
						node2->SetHasEvents(node2->HasEvents() | node11->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node2->HasEvents());
				}
				{
					Sequence* node3 = BEHAVIAC_NEW Sequence;
					node3->SetClassNameString("Sequence");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("EmployeeParTestAgent");
#endif
					node0->AddChild(node3);
					{
						Action_bt_par_test_static_property_as_ref_param_node14* node14 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node14;
						node14->SetClassNameString("Action");
						node14->SetId(14);
#if !BEHAVIAC_RELEASE
						node14->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node14);
						node3->SetHasEvents(node3->HasEvents() | node14->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node16* node16 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node16;
						node16->SetClassNameString("Action");
						node16->SetId(16);
#if !BEHAVIAC_RELEASE
						node16->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node16);
						node3->SetHasEvents(node3->HasEvents() | node16->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node17* node17 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node17;
						node17->SetClassNameString("Action");
						node17->SetId(17);
#if !BEHAVIAC_RELEASE
						node17->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node17);
						node3->SetHasEvents(node3->HasEvents() | node17->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node18* node18 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node18;
						node18->SetClassNameString("Action");
						node18->SetId(18);
#if !BEHAVIAC_RELEASE
						node18->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node18);
						node3->SetHasEvents(node3->HasEvents() | node18->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node19* node19 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node19;
						node19->SetClassNameString("Action");
						node19->SetId(19);
#if !BEHAVIAC_RELEASE
						node19->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node19);
						node3->SetHasEvents(node3->HasEvents() | node19->HasEvents());
					}
					{
						Action_bt_par_test_static_property_as_ref_param_node20* node20 = BEHAVIAC_NEW Action_bt_par_test_static_property_as_ref_param_node20;
						node20->SetClassNameString("Action");
						node20->SetId(20);
#if !BEHAVIAC_RELEASE
						node20->SetAgentType("EmployeeParTestAgent");
#endif
						node3->AddChild(node20);
						node3->SetHasEvents(node3->HasEvents() | node20->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

	// Source file: par_test/vector_test

	class Assignment_bt_par_test_vector_test_node0 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_vector_test_node0, Assignment);
		Assignment_bt_par_test_vector_test_node0()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			behaviac::vector<int> opr = ((TestNS::AgentArrayAccessTest*)pAgent)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts, behaviac::vector<int> >();
			int opr_index = 0;
			((TestNS::AgentArrayAccessTest*)pAgent)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_Int, int >() = (opr)[opr_index];
			return result;
		}
	};

	class Assignment_bt_par_test_vector_test_node1 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_vector_test_node1, Assignment);
		Assignment_bt_par_test_vector_test_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ListInts") == 2521109666u);
			vector<int >& opr = (vector<int >&)pAgent->GetVariable<vector<int > >(2521109666u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Int") == 3849503314u);
			int opr_index = 0;
			pAgent->SetVariable("c_Int", (opr)[opr_index], 3849503314u);
			return result;
		}
	};

	class Assignment_bt_par_test_vector_test_node2 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_vector_test_node2, Assignment);
		Assignment_bt_par_test_vector_test_node2()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_ListInts") == 96329828u);
			vector<int >& opr = (vector<int >&)pAgent->GetVariable<vector<int > >(96329828u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_Int") == 337932423u);
			int opr_index = 0;
			pAgent->SetVariable("l_Int", (opr)[opr_index], 337932423u);
			return result;
		}
	};

	class Assignment_bt_par_test_vector_test_node4 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_vector_test_node4, Assignment);
		Assignment_bt_par_test_vector_test_node4()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			int opr = 0;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_index") == 1109890112u);
			pAgent->SetVariable("l_index", opr, 1109890112u);
			return result;
		}
	};

	class Compute_bt_par_test_vector_test_node3 : public Compute
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Compute_bt_par_test_vector_test_node3, Compute);
		Compute_bt_par_test_vector_test_node3()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Int") == 3849503314u);
			int& opr1 = (int&)pAgent->GetVariable<int >(3849503314u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_Int") == 337932423u);
			int& opr2 = (int&)pAgent->GetVariable<int >(337932423u);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_index") == 1109890112u);
			int& opl_index = (int&)pAgent->GetVariable<int >(1109890112u);
			(((TestNS::AgentArrayAccessTest*)pAgent)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_ListInts, behaviac::vector<int> >())[opl_index] = (int)(opr1 + opr2);
			return result;
		}
	};

	class Assignment_bt_par_test_vector_test_node5 : public Assignment
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Assignment_bt_par_test_vector_test_node5, Assignment);
		Assignment_bt_par_test_vector_test_node5()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			EBTStatus result = BT_SUCCESS;
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("l_ListInts") == 96329828u);
			TList<vector<int> > opr_p0 = &((behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(96329828u));
			int opr = ((behaviac::Agent*)pAgent)->_Execute_Method_<behaviac::METHOD_TYPE_behaviac_Agent_VectorLength, int, IList& >(opr_p0);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Count") == 1209342235u);
			pAgent->SetVariable("c_Count", opr, 1209342235u);
			return result;
		}
	};

	class Action_bt_par_test_vector_test_node6 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_vector_test_node6, Action);
		Action_bt_par_test_vector_test_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ListInts") == 2521109666u);
			TList<vector<int> > method_p0 = &((behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(2521109666u));
			int method_p1 = ((TestNS::AgentArrayAccessTest*)pAgent)->_Get_Property_<TestNS::PROPERTY_TYPE_TestNS_AgentArrayAccessTest_Int, int >();
			((behaviac::Agent*)pAgent)->_Execute_Method_<behaviac::METHOD_TYPE_behaviac_Agent_VectorAdd, void, IList&, System::Object& >(method_p0, *(System::Object*)&method_p1);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ListInts") == 2521109666u);
			pAgent->SetVariable("c_ListInts", *method_p0.vector_, 2521109666u);
			return BT_SUCCESS;
		}
	};

	class Action_bt_par_test_vector_test_node7 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_par_test_vector_test_node7, Action);
		Action_bt_par_test_vector_test_node7()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ListInts") == 2521109666u);
			TList<vector<int> > method_p0 = &((behaviac::vector<int>&)pAgent->GetVariable<behaviac::vector<int> >(2521109666u));
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_Int") == 3849503314u);
			int& method_p1 = (int&)pAgent->GetVariable<int >(3849503314u);
			((behaviac::Agent*)pAgent)->_Execute_Method_<behaviac::METHOD_TYPE_behaviac_Agent_VectorRemove, void, IList&, System::Object& >(method_p0, *(System::Object*)&method_p1);
			BEHAVIAC_ASSERT(behaviac::MakeVariableId("c_ListInts") == 2521109666u);
			pAgent->SetVariable("c_ListInts", *method_p0.vector_, 2521109666u);
			return BT_SUCCESS;
		}
	};

	class bt_par_test_vector_test
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("par_test/vector_test");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
			// pars
			pBT->AddPar("TestNS::AgentArrayAccessTest", "int", "l_index", "0");
			pBT->AddPar("TestNS::AgentArrayAccessTest", "vector<int>", "l_ListInts", "5:100|200|300|400|500");
			pBT->AddPar("TestNS::AgentArrayAccessTest", "int", "l_Int", "0");
			// children
			{
				Sequence* node22 = BEHAVIAC_NEW Sequence;
				node22->SetClassNameString("Sequence");
				node22->SetId(22);
#if !BEHAVIAC_RELEASE
				node22->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
				pBT->AddChild(node22);
				{
					Assignment_bt_par_test_vector_test_node0* node0 = BEHAVIAC_NEW Assignment_bt_par_test_vector_test_node0;
					node0->SetClassNameString("Assignment");
					node0->SetId(0);
#if !BEHAVIAC_RELEASE
					node0->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node0);
					node22->SetHasEvents(node22->HasEvents() | node0->HasEvents());
				}
				{
					Assignment_bt_par_test_vector_test_node1* node1 = BEHAVIAC_NEW Assignment_bt_par_test_vector_test_node1;
					node1->SetClassNameString("Assignment");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node1);
					node22->SetHasEvents(node22->HasEvents() | node1->HasEvents());
				}
				{
					Assignment_bt_par_test_vector_test_node2* node2 = BEHAVIAC_NEW Assignment_bt_par_test_vector_test_node2;
					node2->SetClassNameString("Assignment");
					node2->SetId(2);
#if !BEHAVIAC_RELEASE
					node2->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node2);
					node22->SetHasEvents(node22->HasEvents() | node2->HasEvents());
				}
				{
					Assignment_bt_par_test_vector_test_node4* node4 = BEHAVIAC_NEW Assignment_bt_par_test_vector_test_node4;
					node4->SetClassNameString("Assignment");
					node4->SetId(4);
#if !BEHAVIAC_RELEASE
					node4->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node4);
					node22->SetHasEvents(node22->HasEvents() | node4->HasEvents());
				}
				{
					Compute_bt_par_test_vector_test_node3* node3 = BEHAVIAC_NEW Compute_bt_par_test_vector_test_node3;
					node3->SetClassNameString("Compute");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node3);
					node22->SetHasEvents(node22->HasEvents() | node3->HasEvents());
				}
				{
					Assignment_bt_par_test_vector_test_node5* node5 = BEHAVIAC_NEW Assignment_bt_par_test_vector_test_node5;
					node5->SetClassNameString("Assignment");
					node5->SetId(5);
#if !BEHAVIAC_RELEASE
					node5->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node5);
					node22->SetHasEvents(node22->HasEvents() | node5->HasEvents());
				}
				{
					Action_bt_par_test_vector_test_node6* node6 = BEHAVIAC_NEW Action_bt_par_test_vector_test_node6;
					node6->SetClassNameString("Action");
					node6->SetId(6);
#if !BEHAVIAC_RELEASE
					node6->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node6);
					node22->SetHasEvents(node22->HasEvents() | node6->HasEvents());
				}
				{
					Action_bt_par_test_vector_test_node7* node7 = BEHAVIAC_NEW Action_bt_par_test_vector_test_node7;
					node7->SetClassNameString("Action");
					node7->SetId(7);
#if !BEHAVIAC_RELEASE
					node7->SetAgentType("TestNS::AgentArrayAccessTest");
#endif
					node22->AddChild(node7);
					node22->SetHasEvents(node22->HasEvents() | node7->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node22->HasEvents());
			}
			return true;
		}
	};

	class CppGenerationManager : GenerationManager
	{
	public:
		CppGenerationManager()
		{
			SetInstance(this);
		}

		virtual void RegisterBehaviorsImplement()
		{
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/fsm/action_ut_1_2", bt_node_test_fsm_action_ut_1_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/fsm/bt_ref_fsm", bt_node_test_fsm_bt_ref_fsm::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/fsm/fsm_ref_bt_ut", bt_node_test_fsm_fsm_ref_bt_ut::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/fsm/fsm_ref_fsm_ut", bt_node_test_fsm_fsm_ref_fsm_ut::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/fsm/fsm_ut_0", bt_node_test_fsm_fsm_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/fsm/fsm_ut_1", bt_node_test_fsm_fsm_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/htn/house/build_house", bt_node_test_htn_house_build_house::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/htn/house/construct", bt_node_test_htn_house_construct::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/htn/house/root", bt_node_test_htn_house_root::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/htn/travel/root", bt_node_test_htn_travel_root::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/htn/travel/travel", bt_node_test_htn_travel_travel::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/htn/travel/travel_by_air", bt_node_test_htn_travel_travel_by_air::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/PreconditionEffectorTest/PreconditionEffectorTest_0", bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/PreconditionEffectorTest/PreconditionEffectorTest_1", bt_node_test_PreconditionEffectorTest_PreconditionEffectorTest_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/repeat/repeat_ut_0", bt_node_test_repeat_repeat_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_child_agent_0", bt_node_test_action_child_agent_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_noop_ut_0", bt_node_test_action_noop_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_0", bt_node_test_action_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_1", bt_node_test_action_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_2", bt_node_test_action_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_3", bt_node_test_action_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_waitforsignal_0", bt_node_test_action_ut_waitforsignal_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_waitforsignal_1", bt_node_test_action_ut_waitforsignal_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_ut_waitforsignal_2", bt_node_test_action_ut_waitforsignal_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/action_waitframes_ut_0", bt_node_test_action_waitframes_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/circular_ut_0", bt_node_test_circular_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/condition_ut_0", bt_node_test_condition_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/condition_ut_1", bt_node_test_condition_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/condition_ut_2", bt_node_test_condition_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/condition_ut_3", bt_node_test_condition_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_alwaysfailure_ut_0", bt_node_test_decoration_alwaysfailure_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_alwaysrunning_ut_0", bt_node_test_decoration_alwaysrunning_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_alwayssuccess_ut_0", bt_node_test_decoration_alwayssuccess_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_countlimit_ut_0", bt_node_test_decoration_countlimit_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_countlimit_ut_1", bt_node_test_decoration_countlimit_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_countlimit_ut_2", bt_node_test_decoration_countlimit_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_countlimit_ut_3", bt_node_test_decoration_countlimit_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_failureuntil_ut_0", bt_node_test_decoration_failureuntil_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_failureuntil_ut_1", bt_node_test_decoration_failureuntil_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_frames_ut_0", bt_node_test_decoration_frames_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_log_ut_0", bt_node_test_decoration_log_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_loopuntil_ut_0", bt_node_test_decoration_loopuntil_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_loopuntil_ut_1", bt_node_test_decoration_loopuntil_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_loopuntil_ut_2", bt_node_test_decoration_loopuntil_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_loop_ut_0", bt_node_test_decoration_loop_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_loop_ut_1", bt_node_test_decoration_loop_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_not_ut_0", bt_node_test_decoration_not_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_not_ut_1", bt_node_test_decoration_not_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_not_ut_2", bt_node_test_decoration_not_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_successuntil_ut_0", bt_node_test_decoration_successuntil_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/decoration_successuntil_ut_1", bt_node_test_decoration_successuntil_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/enter_exit_action_ut_0", bt_node_test_enter_exit_action_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/enter_exit_action_ut_1", bt_node_test_enter_exit_action_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/enter_exit_action_ut_2", bt_node_test_enter_exit_action_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_subtree_0", bt_node_test_event_subtree_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_subtree_1", bt_node_test_event_subtree_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_subtree_2", bt_node_test_event_subtree_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_subtree_3", bt_node_test_event_subtree_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_subtree_4", bt_node_test_event_subtree_4::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_ut_0", bt_node_test_event_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_ut_1", bt_node_test_event_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/event_ut_2", bt_node_test_event_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/frames_ut_0", bt_node_test_frames_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/if_else_ut_0", bt_node_test_if_else_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/if_else_ut_1", bt_node_test_if_else_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/parallel_ut_0", bt_node_test_parallel_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/parallel_ut_1", bt_node_test_parallel_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/parallel_ut_2", bt_node_test_parallel_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/parallel_ut_3", bt_node_test_parallel_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/parallel_ut_4", bt_node_test_parallel_ut_4::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_action_ut_0", bt_node_test_predicate_action_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_action_ut_1", bt_node_test_predicate_action_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_action_ut_2", bt_node_test_predicate_action_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_action_ut_3", bt_node_test_predicate_action_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_selector_ut_0", bt_node_test_predicate_selector_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_selector_ut_1", bt_node_test_predicate_selector_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_selector_ut_2", bt_node_test_predicate_selector_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_selector_ut_3", bt_node_test_predicate_selector_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_selector_ut_4", bt_node_test_predicate_selector_ut_4::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_selector_ut_5", bt_node_test_predicate_selector_ut_5::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_sequence_ut_0", bt_node_test_predicate_sequence_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_sequence_ut_1", bt_node_test_predicate_sequence_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_sequence_ut_2", bt_node_test_predicate_sequence_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_sequence_ut_3", bt_node_test_predicate_sequence_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_sequence_ut_4", bt_node_test_predicate_sequence_ut_4::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/predicate_sequence_ut_5", bt_node_test_predicate_sequence_ut_5::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_subtree_0", bt_node_test_query_subtree_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_subtree_1", bt_node_test_query_subtree_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_subtree_2", bt_node_test_query_subtree_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_ut_0", bt_node_test_query_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_ut_1", bt_node_test_query_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_ut_2", bt_node_test_query_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/query_ut_3", bt_node_test_query_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/reference_sub_0", bt_node_test_reference_sub_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/reference_sub_1", bt_node_test_reference_sub_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/reference_ut_0", bt_node_test_reference_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_0", bt_node_test_selector_loop_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_1", bt_node_test_selector_loop_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_2", bt_node_test_selector_loop_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_3", bt_node_test_selector_loop_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_4", bt_node_test_selector_loop_ut_4::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_5", bt_node_test_selector_loop_ut_5::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_6", bt_node_test_selector_loop_ut_6::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_7", bt_node_test_selector_loop_ut_7::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_loop_ut_8", bt_node_test_selector_loop_ut_8::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_probability_ut_0", bt_node_test_selector_probability_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_probability_ut_1", bt_node_test_selector_probability_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_probability_ut_2", bt_node_test_selector_probability_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_stochastic_ut_0", bt_node_test_selector_stochastic_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_stochastic_ut_1", bt_node_test_selector_stochastic_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_stochastic_ut_2", bt_node_test_selector_stochastic_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_ut_0", bt_node_test_selector_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_ut_1", bt_node_test_selector_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_ut_2", bt_node_test_selector_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_ut_3", bt_node_test_selector_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_ut_4", bt_node_test_selector_ut_4::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/selector_ut_5", bt_node_test_selector_ut_5::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_stochastic_ut_0", bt_node_test_sequence_stochastic_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_stochastic_ut_1", bt_node_test_sequence_stochastic_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_stochastic_ut_2", bt_node_test_sequence_stochastic_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_stochastic_ut_3", bt_node_test_sequence_stochastic_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_ut_0", bt_node_test_sequence_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_ut_1", bt_node_test_sequence_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_ut_2", bt_node_test_sequence_ut_2::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/sequence_ut_3", bt_node_test_sequence_ut_3::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/wait_ut_0", bt_node_test_wait_ut_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("node_test/wait_ut_1", bt_node_test_wait_ut_1::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/const_param", bt_par_test_const_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/custom_property_as_left_value_and_param", bt_par_test_custom_property_as_left_value_and_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/custom_property_reset", bt_par_test_custom_property_reset::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/local_out_scope", bt_par_test_local_out_scope::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/par_as_left_value_and_param", bt_par_test_par_as_left_value_and_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/par_as_ref_param", bt_par_test_par_as_ref_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/property_as_left_value", bt_par_test_property_as_left_value::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/property_as_left_value_and_param", bt_par_test_property_as_left_value_and_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/property_as_ref_param", bt_par_test_property_as_ref_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/readonly_default", bt_par_test_readonly_default::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/register_name_as_left_value_and_param", bt_par_test_register_name_as_left_value_and_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/static_member_function_test_0", bt_par_test_static_member_function_test_0::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/static_property_as_left_value_and_param", bt_par_test_static_property_as_left_value_and_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/static_property_as_ref_param", bt_par_test_static_property_as_ref_param::Create);
			Workspace::GetInstance()->RegisterBehaviorTreeCreator("par_test/vector_test", bt_par_test_vector_test::Create);
		}
	};

	CppGenerationManager _cppGenerationManager_;
}
